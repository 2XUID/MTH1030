(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1357352,      27085]
NotebookOptionsPosition[   1330887,      26647]
NotebookOutlinePosition[   1331645,      26672]
CellTagsIndexPosition[   1331602,      26669]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["MTH1030 A2", "Title",
 CellChangeTimes->{{3.8595345843512416`*^9, 
  3.859534585554187*^9}},ExpressionUUID->"e27e77bf-d6eb-48e6-9e58-\
965ec2a44eac"],

Cell["Rui Qin", "Subtitle",
 CellChangeTimes->{
  3.8595345903633823`*^9},ExpressionUUID->"02d40c21-725c-4117-a783-\
edffb919fbbd"],

Cell["30874157", "Subsubtitle",
 CellChangeTimes->{
  3.859534593855788*^9},ExpressionUUID->"23e00274-b39b-4c57-82ae-\
a7b5a8ea2769"],

Cell[CellGroupData[{

Cell["1. Funny numbers", "Section",
 CellChangeTimes->{3.859534607970379*^9, 
  3.860097646190525*^9},ExpressionUUID->"e67365e4-4428-4263-bf54-\
68539de6f627"],

Cell[CellGroupData[{

Cell["A. Show that:", "Subsection",
 CellChangeTimes->{
  3.8595346236618853`*^9, {3.8596065384334936`*^9, 3.859606538757553*^9}, {
   3.860097718571339*^9, 
   3.860097719356876*^9}},ExpressionUUID->"4c5007aa-f20d-4472-a344-\
972dbd1caa33"],

Cell[CellGroupData[{

Cell["i) the identity matrix is a funny number", "Subsubsection",
 CellChangeTimes->{
  3.859534634571686*^9, 3.859606652805241*^9, {3.860097659714251*^9, 
   3.8600976600395*^9}},ExpressionUUID->"62fcc24d-cb07-4ab5-8f2c-\
97d94f12f346"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"mat", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", 
       RowBox[{"-", "b"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"b", ",", "a"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8595347093136306`*^9, 3.8595347141133738`*^9}, 
   3.859534766669279*^9},
 NumberMarks->False,
 CellLabel->"In[1]:=",ExpressionUUID->"2ab6e594-7b51-4a1d-b3dc-f3b720b30d6d"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"a", 
      RowBox[{"-", "b"}]},
     {"b", "a"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.8595346808035736`*^9, 3.8595347164036317`*^9, 3.85953476912763*^9, {
   3.8595850770929966`*^9, 3.859585127454157*^9}},
 CellLabel->
  "Out[1]//MatrixForm=",ExpressionUUID->"ffef7dba-baae-46ab-83cc-\
597a70e943c9"]
}, Open  ]],

Cell["The identity matrix of it is ", "Text",
 CellChangeTimes->{{3.8595346920091033`*^9, 
  3.859534704109419*^9}},ExpressionUUID->"8ea3168f-be9f-4409-a261-\
5e8045e71deb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"identitymat", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8595347366900177`*^9, 3.859534745192436*^9}, {
  3.8595851037884912`*^9, 3.8595851049796257`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"6c30e524-cad0-492d-bb3f-cbb0e20fb671"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0"},
     {"0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8595347472304597`*^9, 3.8595850801674137`*^9, 
  3.85958513106098*^9},
 CellLabel->
  "Out[2]//MatrixForm=",ExpressionUUID->"de8e4781-0bf2-4e64-a07a-\
01bc093be571"]
}, Open  ]],

Cell["Which meets requirement", "Text",
 CellChangeTimes->{{3.8595347526197553`*^9, 
  3.859534761192626*^9}},ExpressionUUID->"fa6c51c9-ba88-470c-a6af-\
e6bfc8cdd09d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["ii) sums and products of funny numbers are funny numbers", \
"Subsubsection",
 CellChangeTimes->{{3.85953478327897*^9, 3.85953478340193*^9}, 
   3.859606654680504*^9, {3.860097665885412*^9, 
   3.8600976688999724`*^9}},ExpressionUUID->"2e4e3d6f-2c4e-4356-9aee-\
281a4ce97271"],

Cell["sum of matrix", "Text",
 CellChangeTimes->{{3.859537955034235*^9, 
  3.859537959741951*^9}},ExpressionUUID->"7c9c8131-00fb-4aa0-b3a0-\
d98735a4bf0d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"mat", "+", "mat"}], "]"}]], "Input",
 CellChangeTimes->{3.8595379645187807`*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"11ec6d93-331f-4a78-ad05-25520ee379b3"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"2", " ", "a"}], 
      RowBox[{
       RowBox[{"-", "2"}], " ", "b"}]},
     {
      RowBox[{"2", " ", "b"}], 
      RowBox[{"2", " ", "a"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8595379664344387`*^9, 3.8595850829185967`*^9, 
  3.8595851356332917`*^9},
 CellLabel->
  "Out[3]//MatrixForm=",ExpressionUUID->"25d55ac6-c38f-4959-b73e-\
71270f84cf54"]
}, Open  ]],

Cell["product of matrix", "Text",
 CellChangeTimes->{{3.8595379712143745`*^9, 
  3.8595379765868273`*^9}},ExpressionUUID->"aed58a9e-e4a6-467d-a121-\
273fa5c214ca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"mat", ".", "mat"}], "]"}]], "Input",
 CellChangeTimes->{3.859537982740173*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"337e2f0f-362e-41fe-af3d-16d8778a8fba"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       SuperscriptBox["a", "2"], "-", 
       SuperscriptBox["b", "2"]}], 
      RowBox[{
       RowBox[{"-", "2"}], " ", "a", " ", "b"}]},
     {
      RowBox[{"2", " ", "a", " ", "b"}], 
      RowBox[{
       SuperscriptBox["a", "2"], "-", 
       SuperscriptBox["b", "2"]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.859537984373483*^9, 3.859585138355418*^9},
 CellLabel->
  "Out[4]//MatrixForm=",ExpressionUUID->"95a74868-dde1-423d-afb0-\
38c7cb0631d4"]
}, Open  ]],

Cell["they all meet the funny number requirement", "Text",
 CellChangeTimes->{{3.85953799493008*^9, 
  3.8595380067426205`*^9}},ExpressionUUID->"fef59be1-9e4e-4150-baa1-\
6bcfe0488674"]
}, Open  ]],

Cell[CellGroupData[{

Cell["iii) all funny numbers except for one", "Subsubsection",
 CellChangeTimes->{{3.859538041574459*^9, 3.859538041866153*^9}, 
   3.8596066567248683`*^9, {3.860097679823367*^9, 
   3.860097680190115*^9}},ExpressionUUID->"359bf11d-cfc1-4339-be7f-\
6f5f5a371586"],

Cell["making inverse of mat", "Text",
 CellChangeTimes->{{3.859538094777933*^9, 
  3.8595380987331657`*^9}},ExpressionUUID->"41c6c7be-c02f-4ff0-8e32-\
78914536e588"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"Inverse", "[", "mat", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.859538060775127*^9, 3.8595380813740187`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"77b4903c-f03c-4540-b7ec-d87fcdf1caf8"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox["a", 
       RowBox[{
        SuperscriptBox["a", "2"], "+", 
        SuperscriptBox["b", "2"]}]], 
      FractionBox["b", 
       RowBox[{
        SuperscriptBox["a", "2"], "+", 
        SuperscriptBox["b", "2"]}]]},
     {
      RowBox[{"-", 
       FractionBox["b", 
        RowBox[{
         SuperscriptBox["a", "2"], "+", 
         SuperscriptBox["b", "2"]}]]}], 
      FractionBox["a", 
       RowBox[{
        SuperscriptBox["a", "2"], "+", 
        SuperscriptBox["b", "2"]}]]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.859538063330922*^9, 3.8595380829801674`*^9}, 
   3.859585141868371*^9},
 CellLabel->
  "Out[5]//MatrixForm=",ExpressionUUID->"23e81b30-d177-4a44-bf66-\
d033e52e902c"]
}, Open  ]],

Cell["\<\
we notice each of value in matrix they all divided by a^2+b^2
that means if a=0 and b=0, the funny numbers is not valid\
\>", "Text",
 CellChangeTimes->{{3.8595381076441526`*^9, 3.8595381713210783`*^9}, {
  3.859579417249961*^9, 
  3.8595794341531935`*^9}},ExpressionUUID->"fe269254-4d87-439a-88cd-\
33f96244ac59"]
}, Open  ]],

Cell[CellGroupData[{

Cell["iv) multiplication of funny numbers is commutative", "Subsubsection",
 CellChangeTimes->{{3.8595384013263516`*^9, 3.8595384014481487`*^9}, 
   3.8596066588126087`*^9, {3.8600977032785597`*^9, 
   3.860097703620067*^9}},ExpressionUUID->"0912b389-0ba6-417e-bbb2-\
b816ccda4586"],

Cell["We make two value and multi them and check the result", "Text",
 CellChangeTimes->{{3.859538694420349*^9, 
  3.8595387165752687`*^9}},ExpressionUUID->"1872ec5d-499d-4f50-bf57-\
1365f8d24602"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"MatrixForm", "[", 
   RowBox[{"A", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"a", ",", 
        RowBox[{"-", "b"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"b", ",", "a"}], "}"}]}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", 
  RowBox[{"B", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"c", ",", 
       RowBox[{"-", "d"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"d", ",", "c"}], "}"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.8595384469488373`*^9, 3.8595384633718357`*^9}, {
  3.8595386620129824`*^9, 3.859538665025782*^9}, {3.859583307078161*^9, 
  3.8595833072741776`*^9}, {3.859878958777441*^9, 3.8598789616147437`*^9}},
 CellLabel->"",ExpressionUUID->"aaf0d5c2-6a3c-4ed8-a6dd-4be008a72b7f"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"a", 
      RowBox[{"-", "b"}]},
     {"b", "a"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.859538465240703*^9, 3.8595386669503126`*^9, 
  3.8595851456211386`*^9},
 CellLabel->
  "Out[6]//MatrixForm=",ExpressionUUID->"418c2448-3f73-4c60-8fea-\
7e2ae79d3532"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"c", 
      RowBox[{"-", "d"}]},
     {"d", "c"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.859538465240703*^9, 3.8595386669503126`*^9, 
  3.859585145624137*^9},
 CellLabel->
  "Out[7]//MatrixForm=",ExpressionUUID->"4885905e-70b7-4174-9fe9-\
5f73ec086d7d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MatrixForm", "[", 
   RowBox[{"A", ".", "B"}], "]"}], "\[Equal]", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{"B", ".", "A"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.859538472354048*^9, 3.8595385094649286`*^9}, 
   3.859538542967067*^9, 3.8595386142772446`*^9},
 CellLabel->"In[8]:=",ExpressionUUID->"a6797d8c-958a-4c42-851a-5961eee59825"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.8595385442021236`*^9, 3.8595386171611495`*^9, 
  3.8595386700278587`*^9, 3.8595851492916927`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"65826825-5d56-4947-a375-f539785459d6"]
}, Open  ]],

Cell["The return is true which mean it meets the requirement", "Text",
 CellChangeTimes->{{3.8595386778610125`*^9, 
  3.8595387316069565`*^9}},ExpressionUUID->"bd16d01a-114e-4178-b063-\
fc70f0abb536"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
B. What is the solution of the following system of two linear equations with \
funny number
coefficients in the funny number unknowns X and Y ?\
\>", "Subsection",
 CellChangeTimes->{
  3.8595387672202997`*^9, {3.8596065418393774`*^9, 3.8596065426823606`*^9}, {
   3.860097727748542*^9, 
   3.860097728381688*^9}},ExpressionUUID->"2db9910b-6103-4983-be04-\
06025f66685d"],

Cell["First we set up X and Y", "Text",
 CellChangeTimes->{{3.859578962159771*^9, 
  3.859578968548805*^9}},ExpressionUUID->"08c40abc-9d21-4470-948b-\
133323c204bd"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"X", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"-", "y"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"y", ",", "x"}], "}"}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"Y", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"v", ",", 
      RowBox[{"-", "w"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"w", ",", "v"}], "}"}]}], "}"}]}]}], "Input",
 CellChangeTimes->{{3.8595403100269036`*^9, 3.85954035659334*^9}, {
  3.859578557445512*^9, 3.8595785610920515`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"8ca82b7f-93f6-42ce-93c0-85a47e300c50"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "y"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "x"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.859540335933501*^9, 3.859540358361742*^9}, 
   3.8595786279097185`*^9, 3.8595851519922123`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"811e5211-7174-4a3f-9bf9-4b8a81c23ac9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"v", ",", 
     RowBox[{"-", "w"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"w", ",", "v"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.859540335933501*^9, 3.859540358361742*^9}, 
   3.8595786279097185`*^9, 3.859585151998211*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"71ee264c-3478-4e5a-9cab-5127fe0a3aa8"]
}, Open  ]],

Cell["Then we set up the equation and let Mathematica calculate it", "Text",
 CellChangeTimes->{{3.8595789793733425`*^9, 
  3.859579001051757*^9}},ExpressionUUID->"fbeee1e8-6eeb-451d-adf7-\
93b92590f144"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MatrixForm", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ".", "X"}], "]"}], "+", 
   RowBox[{"MatrixForm", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], ".", "Y"}], "]"}]}], 
  "\[Equal]", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "2"}], "}"}]}], "}"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MatrixForm", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ".", "X"}], "]"}], 
   "+", 
   RowBox[{"MatrixForm", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ".", "Y"}], "]"}]}], 
  "\[Equal]", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.859540383073013*^9, 3.8595404558868246`*^9}, {
   3.8595405537476907`*^9, 3.859540578613698*^9}, {3.859540992843703*^9, 
   3.8595410576405487`*^9}, {3.85954189732204*^9, 3.8595419434512844`*^9}, {
   3.8595780737922907`*^9, 3.85957813900651*^9}, {3.8595784878821125`*^9, 
   3.8595785313979907`*^9}, 3.8595785652497225`*^9},
 CellLabel->"In[11]:=",ExpressionUUID->"8e15a36f-d5c8-4c4d-99f9-995aad908ad0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"w", "v"},
       {
        RowBox[{"-", "v"}], "w"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], "+", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"x", 
        RowBox[{"-", "y"}]},
       {"y", "x"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "\[Equal]", 
  TagBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"2", "0"},
      {"0", "2"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]]}]], "Output",
 CellChangeTimes->{{3.8595419121438675`*^9, 3.8595419344006443`*^9}, 
   3.8595785225084662`*^9, 3.859578568306913*^9, 3.8595786328253565`*^9, 
   3.8595851559526987`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"fac61bfb-da12-4090-8fbd-9f6f6b40a6cf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"v", 
        RowBox[{"-", "w"}]},
       {"w", "v"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], "+", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"x", "+", "y"}], 
        RowBox[{"x", "-", "y"}]},
       {
        RowBox[{
         RowBox[{"-", "x"}], "+", "y"}], 
        RowBox[{"x", "+", "y"}]}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "\[Equal]", 
  TagBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"1", "0"},
      {"0", "1"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]]}]], "Output",
 CellChangeTimes->{{3.8595419121438675`*^9, 3.8595419344006443`*^9}, 
   3.8595785225084662`*^9, 3.859578568306913*^9, 3.8595786328253565`*^9, 
   3.859585155955705*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"6d1b0f22-40cb-416d-b4b7-6fcdddf8048b"]
}, Open  ]],

Cell["Using Solve function to solve it", "Text",
 CellChangeTimes->{{3.85957900636304*^9, 
  3.859579016371035*^9}},ExpressionUUID->"b188d4de-0d8b-46aa-b0e8-\
cdbc38faa3b6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"w", "+", "x"}], " ", "==", "2"}], "&&", 
    RowBox[{
     RowBox[{"v", "-", "y"}], "==", "0"}], "&&", 
    RowBox[{
     RowBox[{"v", "+", "x", "+", "y"}], "==", "1"}], "&&", 
    RowBox[{
     RowBox[{"w", "-", "x", "+", "y"}], "==", "0"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "v", ",", "w"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8595787685909376`*^9, 3.8595787739103575`*^9}, {
  3.8595788449506454`*^9, 3.8595789325395126`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"859a2bea-0534-4d3e-9bed-c5e7ad42018e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"x", "\[Rule]", "1"}], ",", 
    RowBox[{"y", "\[Rule]", "0"}], ",", 
    RowBox[{"v", "\[Rule]", "0"}], ",", 
    RowBox[{"w", "\[Rule]", "1"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.859578934608426*^9, 3.859585159046714*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"3b7f674a-7fa0-440d-b1b4-1691e2f3fbfe"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["C.  Find the funny funny number I and inverse", "Subsection",
 CellChangeTimes->{
  3.859579230095186*^9, {3.8596065450867033`*^9, 3.859606545252263*^9}, {
   3.860097777857485*^9, 3.860097798272054*^9}, {3.8600978352193766`*^9, 
   3.860097852129848*^9}},ExpressionUUID->"1bfb4bd3-df4a-475d-810f-\
44b270f4d879"],

Cell[CellGroupData[{

Cell["\<\
i) Find the funny funny number plays the role of the number 1\
\>", "Subsubsection",
 CellChangeTimes->{{3.859606484783434*^9, 3.859606499030223*^9}, {
   3.8596066809794135`*^9, 3.8596066828672934`*^9}, 
   3.8600977764650474`*^9},ExpressionUUID->"d7766c2e-963b-45d5-8cce-\
128472a8df48"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mat2", " ", "=", " ", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", "b"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "b"}], ",", "a"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"c", ",", "d"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "d"}], ",", "c"}], "}"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "c"}], ",", "d"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "d"}], ",", 
           RowBox[{"-", "c"}]}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", 
           RowBox[{"-", "b"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"b", ",", "a"}], "}"}]}], "}"}]}], "}"}]}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8595824607874455`*^9, 3.859582499214802*^9}, 
   3.8595825363405113`*^9, {3.859583020631817*^9, 3.8595831319898615`*^9}, {
   3.859714234115945*^9, 3.8597142352553177`*^9}, {3.859714273264516*^9, 
   3.85971428415382*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"5d5afa53-180b-4733-9ba9-ed7dd66bd250"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"a", "b"},
         {
          RowBox[{"-", "b"}], "a"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"c", "d"},
         {
          RowBox[{"-", "d"}], "c"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}]},
     {
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{"-", "c"}], "d"},
         {
          RowBox[{"-", "d"}], 
          RowBox[{"-", "c"}]}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"a", 
          RowBox[{"-", "b"}]},
         {"b", "a"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.859583133600365*^9, 3.859585162185541*^9, 
  3.859691357014059*^9, 3.859762939610881*^9},
 CellLabel->
  "Out[1]//MatrixForm=",ExpressionUUID->"92cecdd3-58f7-4e2e-b297-\
11382dc6226e"]
}, Open  ]],

Cell["\<\
As everyone know the identify matrix can play role of 1, let make up a matrix \
and try does it work\
\>", "Text",
 CellChangeTimes->{{3.8595833482455473`*^9, 3.8595833591479225`*^9}, {
  3.8595836187101297`*^9, 3.8595836245807056`*^9}, {3.8595838109547205`*^9, 
  3.8595838352800555`*^9}},ExpressionUUID->"f651d0a6-b795-43c8-9686-\
ad876de82521"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"identifyMat2", " ", "=", " ", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8595836364889936`*^9, 3.8595837025205154`*^9}, {
  3.8595837361549187`*^9, 3.859583744584979*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"4c0d5522-2e0c-4d6d-baa2-5ff25d0e5a9a"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0"},
         {"0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0"},
         {"0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}]},
     {
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0"},
         {"0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0"},
         {"0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8595837045794992`*^9, 3.8595837459890213`*^9, 
  3.8595851677644234`*^9, 3.8596913276674223`*^9},
 CellLabel->
  "Out[3]//MatrixForm=",ExpressionUUID->"43c6f1df-032e-44d6-bc5e-\
2642e0ba5268"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mat2", ".", "identifyMat2"}]], "Input",
 CellChangeTimes->{{3.859583710981689*^9, 3.8595837150903206`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"51a0447b-9cad-4ee7-b767-0aff98a799ee"],

Cell[BoxData[
 RowBox[{
  TagBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"a", "b"},
          {
           RowBox[{"-", "b"}], "a"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}], 
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"c", "d"},
          {
           RowBox[{"-", "d"}], "c"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}]},
      {
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {
           RowBox[{"-", "c"}], "d"},
          {
           RowBox[{"-", "d"}], 
           RowBox[{"-", "c"}]}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}], 
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"a", 
           RowBox[{"-", "b"}]},
          {"b", "a"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}]}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]], ".", 
  TagBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"1", "0"},
          {"0", "1"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}], 
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"0", "0"},
          {"0", "0"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}]},
      {
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"0", "0"},
          {"0", "0"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}], 
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"1", "0"},
          {"0", "1"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}]}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]]}]], "Output",
 CellChangeTimes->{3.8595837163337936`*^9, 3.8595837748887167`*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"d2fe3696-8747-4243-9157-0dd6d708f204"]
}, Open  ]],

Cell["We create a formula with Mathematica", "Text",
 CellChangeTimes->{{3.859605749394419*^9, 
  3.859605769028839*^9}},ExpressionUUID->"2c30f02d-b07b-42eb-890c-\
c0d14ec0d3e8"],

Cell[TextData[StyleBox["Formula",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.8596057729586573`*^9, 
  3.8596057768558455`*^9}},ExpressionUUID->"a14f1a90-3edf-41fa-95ae-\
9fa4321648b9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MatrixForm", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"a", ",", "b"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"c", ",", "d"}], "}"}]}], "}"}], "]"}], ".", 
   RowBox[{"MatrixForm", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}]}], "}"}], "]"}]}], "==", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"a", ",", "b"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"c", ",", "d"}], "}"}]}], "}"}], ".", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}]}], "}"}]}], "]"}]}]], "Input",
 CellLabel->"In[36]:=",ExpressionUUID->"2209323e-526a-41e0-8c13-866905654d39"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"a", "b"},
       {"c", "d"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ".", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"x", "y"},
       {"m", "n"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "\[Equal]", 
  TagBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {
       RowBox[{
        RowBox[{"b", " ", "m"}], "+", 
        RowBox[{"a", " ", "x"}]}], 
       RowBox[{
        RowBox[{"b", " ", "n"}], "+", 
        RowBox[{"a", " ", "y"}]}]},
      {
       RowBox[{
        RowBox[{"d", " ", "m"}], "+", 
        RowBox[{"c", " ", "x"}]}], 
       RowBox[{
        RowBox[{"d", " ", "n"}], "+", 
        RowBox[{"c", " ", "y"}]}]}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]]}]], "Output",
 CellChangeTimes->{3.8596057854526577`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"a2899632-2691-4d76-9023-451fb04b0f99"]
}, Open  ]],

Cell["Then we calculate base on it", "Text",
 CellChangeTimes->{{3.8596057908457007`*^9, 
  3.859605806533867*^9}},ExpressionUUID->"b5ea13f0-0445-4f97-8413-\
ed0289824b59"],

Cell[TextData[StyleBox["The top left:",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.8595845220162067`*^9, 
  3.8595845288347745`*^9}},ExpressionUUID->"e0b63d5f-48b8-4569-b306-\
284c484a2594"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"theTopLeft", " ", "=", " ", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "b"}], ",", "a"}], "}"}]}], "}"}], ".", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "+", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"c", ",", "d"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "d"}], ",", "c"}], "}"}]}], "}"}], ".", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8595845402159386`*^9, 3.8595845900541315`*^9}, {
  3.859584638484994*^9, 3.859584655932435*^9}, {3.8595963221277256`*^9, 
  3.859596327412981*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"ecce292a-829d-456b-9807-590b60391ba7"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"a", "b"},
     {
      RowBox[{"-", "b"}], "a"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8595846569274263`*^9, 3.8595852082753863`*^9, 
  3.859596329274514*^9, 3.859692881381605*^9},
 CellLabel->
  "Out[12]//MatrixForm=",ExpressionUUID->"c14ac93b-6c3b-46c0-a4bd-\
b96c57f6757a"]
}, Open  ]],

Cell[TextData[StyleBox["The top right:",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.859585242638616*^9, 3.859585245778036*^9}, 
   3.859596353089563*^9},ExpressionUUID->"13e0e9c7-9172-4de1-9feb-\
a48025c236d5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"theTopRight", " ", "=", " ", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"c", ",", "d"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "d"}], ",", "c"}], "}"}]}], "}"}], ".", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "+", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "b"}], ",", "a"}], "}"}]}], "}"}], ".", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.859596238309028*^9, 3.8595962412959256`*^9}, 
   3.8595962797457867`*^9, {3.859596333282481*^9, 3.8595963378490562`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"6e73e10e-9836-428a-9862-3236dcf49cd0"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"c", "d"},
     {
      RowBox[{"-", "d"}], "c"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8595962809140615`*^9, 3.8595963386901264`*^9, 
  3.8596928833423057`*^9},
 CellLabel->
  "Out[13]//MatrixForm=",ExpressionUUID->"381c4004-320a-412b-bfb6-\
93afeb9941d9"]
}, Open  ]],

Cell[TextData[StyleBox["The bottom left:",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.859596343476169*^9, 
  3.8595963506101475`*^9}},ExpressionUUID->"9526bc67-3b2e-4cd9-bfbb-\
6a8c981aeaff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"theBottomLeft", " ", "=", " ", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "c"}], ",", "d"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "d"}], ",", 
         RowBox[{"-", "c"}]}], "}"}]}], "}"}], ".", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "+", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "b"}], ",", "a"}], "}"}]}], "}"}], ".", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.85959636076122*^9, 3.8595963730999346`*^9}, {
  3.859596838373516*^9, 3.859596919634493*^9}, {3.859598927621832*^9, 
  3.859598936263241*^9}, {3.859598988848774*^9, 3.8595989962626886`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"5f017020-d4df-4453-a224-08097e2d7ba1"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", "c"}], "d"},
     {
      RowBox[{"-", "d"}], 
      RowBox[{"-", "c"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.8595968353426056`*^9, 3.859596844230109*^9}, {
   3.8595968749705486`*^9, 3.859596909229086*^9}, 3.8595989978332653`*^9, 
   3.859692885936061*^9},
 CellLabel->
  "Out[14]//MatrixForm=",ExpressionUUID->"9a628bba-378a-46d9-82ef-\
941ecc9eba9f"]
}, Open  ]],

Cell[TextData[StyleBox["The bottom right:",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.8595990065540295`*^9, 
  3.8595990123239117`*^9}},ExpressionUUID->"092f3460-a9b3-4e40-a7d4-\
3b5a61d423fa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"theBottomRight", " ", "=", " ", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", 
         RowBox[{"-", "b"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"b", ",", "a"}], "}"}]}], "}"}], ".", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "+", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "c"}], ",", "d"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "d"}], ",", 
         RowBox[{"-", "c"}]}], "}"}]}], "}"}], ".", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.859599015941414*^9, 3.859599029249664*^9}, {
  3.8596056873018055`*^9, 3.8596057184879713`*^9}, {3.8597142132182207`*^9, 
  3.859714219472667*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"361146b3-d1ae-49de-b5b2-a6f22f315007"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"a", 
      RowBox[{"-", "b"}]},
     {"b", "a"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.859605720391021*^9, 3.859692888349828*^9},
 CellLabel->
  "Out[15]//MatrixForm=",ExpressionUUID->"59c9448e-3549-4468-bab5-\
3dd13eb60e03"]
}, Open  ]],

Cell[TextData[StyleBox["Result:",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.8596058196408095`*^9, 
  3.8596058246003866`*^9}},ExpressionUUID->"9e650dbb-cae4-4bca-9dea-\
9968f4bb86f6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MatrixForm", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"theTopLeft", ",", "theTopRight"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"theBottomLeft", ",", "theBottomRight"}], "}"}]}], "}"}], "]"}],
   "==", "mat2"}]], "Input",
 CellChangeTimes->{{3.859605838743966*^9, 3.8596058520420003`*^9}, {
  3.8596063215720615`*^9, 3.859606332289749*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"8d9a125f-f9f9-4257-be07-e89e79858d98"],

Cell[BoxData[
 RowBox[{
  TagBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {
       TagBox[
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"a", "b"},
           {
            RowBox[{"-", "b"}], "a"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}],
        Function[BoxForm`e$, 
         MatrixForm[BoxForm`e$]]], 
       TagBox[
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"c", "d"},
           {
            RowBox[{"-", "d"}], "c"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}],
        Function[BoxForm`e$, 
         MatrixForm[BoxForm`e$]]]},
      {
       TagBox[
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {
            RowBox[{"-", "c"}], "d"},
           {
            RowBox[{"-", "d"}], 
            RowBox[{"-", "c"}]}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}],
        Function[BoxForm`e$, 
         MatrixForm[BoxForm`e$]]], 
       TagBox[
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"a", 
            RowBox[{"-", "b"}]},
           {"b", "a"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}],
        Function[BoxForm`e$, 
         MatrixForm[BoxForm`e$]]]}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]], "\[Equal]", 
  TagBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"a", "b"},
          {
           RowBox[{"-", "b"}], "a"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}], 
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"c", "d"},
          {
           RowBox[{"-", "d"}], "c"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}]},
      {
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {
           RowBox[{"-", "c"}], "d"},
          {
           RowBox[{"-", "d"}], 
           RowBox[{"-", "c"}]}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}], 
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"a", 
           RowBox[{"-", "b"}]},
          {"b", "a"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}]}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]]}]], "Output",
 CellChangeTimes->{3.859605852334374*^9, 3.85960633313858*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"38e70ff4-7055-453a-846c-abf32e195b37"]
}, Open  ]],

Cell["\<\
which is same as mat2, that means identifyMat2 meets the property that IF = F \
I = F\
\>", "Text",
 CellChangeTimes->{{3.8596058583939853`*^9, 3.859605859644565*^9}, {
  3.8596063543680716`*^9, 
  3.859606408476157*^9}},ExpressionUUID->"d22d26aa-891a-4848-bad9-\
c7b45d544410"]
}, Open  ]],

Cell[CellGroupData[{

Cell["ii) Which funny funny numbers have an inverse? ", "Subsubsection",
 CellChangeTimes->{{3.8597629834095135`*^9, 3.8597629864979143`*^9}, 
   3.8597665093176465`*^9},ExpressionUUID->"d2e6632c-2b2a-4814-8d6b-\
7b7f785a2269"],

Cell["Firstly set up a matrix called mat3 as the inverse of mat2", "Text",
 CellChangeTimes->{{3.859766552569479*^9, 
  3.859766572180361*^9}},ExpressionUUID->"84c7b588-0ea0-44c0-a1fe-\
05acfe03ee43"],

Cell[CellGroupData[{

Cell[BoxData[{"mat2", "\[IndentingNewLine]", 
 RowBox[{"mat3", " ", "=", " ", 
  FormBox[
   RowBox[{"MatrixForm", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"x", ",", "y"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "y"}], ",", "x"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"m", ",", "n"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "n"}], ",", "m"}], "}"}]}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "m"}], ",", "n"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "n"}], ",", 
            RowBox[{"-", "m"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"x", ",", 
            RowBox[{"-", "y"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", "x"}], "}"}]}], "}"}]}], "}"}]}], "}"}], "]"}],
   TraditionalForm]}]}], "Input",
 CellChangeTimes->{{3.8597629968863544`*^9, 3.859762999337852*^9}, {
  3.8597631201940055`*^9, 3.8597631398327184`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"0465d67d-08cb-4df7-9a54-806ec78ed1aa"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"a", "b"},
         {
          RowBox[{"-", "b"}], "a"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"c", "d"},
         {
          RowBox[{"-", "d"}], "c"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}]},
     {
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{"-", "c"}], "d"},
         {
          RowBox[{"-", "d"}], 
          RowBox[{"-", "c"}]}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"a", 
          RowBox[{"-", "b"}]},
         {"b", "a"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.859763129776539*^9, 3.8597631406006875`*^9}},
 CellLabel->
  "Out[4]//MatrixForm=",ExpressionUUID->"58e2a30a-88c7-480f-b7ae-\
ca6ee31a2c43"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"x", "y"},
         {
          RowBox[{"-", "y"}], "x"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"m", "n"},
         {
          RowBox[{"-", "n"}], "m"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}]},
     {
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{"-", "m"}], "n"},
         {
          RowBox[{"-", "n"}], 
          RowBox[{"-", "m"}]}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"x", 
          RowBox[{"-", "y"}]},
         {"y", "x"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.859763129776539*^9, 3.8597631406046934`*^9}},
 CellLabel->
  "Out[5]//MatrixForm=",ExpressionUUID->"00f87cd2-bf61-4731-a363-\
fec7007ac87c"]
}, Open  ]],

Cell["Then we multi them", "Text",
 CellChangeTimes->{{3.859766585886629*^9, 
  3.8597665947699766`*^9}},ExpressionUUID->"f231073a-af4b-401b-b8d7-\
863a0f8be142"],

Cell["mat2*mat3", "Text",
 CellChangeTimes->{{3.8597641365619297`*^9, 
  3.859764143057444*^9}},ExpressionUUID->"72b03644-9d2f-4478-aa2d-\
7b411a1fc0a4"],

Cell[TextData[StyleBox["The top left:",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{
  3.8597631743901453`*^9},ExpressionUUID->"5353afa0-5938-4c05-9562-\
da9114e75f99"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"topleft", "=", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"a", "b"},
        {
         RowBox[{"-", "b"}], "a"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}], ".", 
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"x", "y"},
        {
         RowBox[{"-", "y"}], "x"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}]}], "+", 
    RowBox[{
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {
         RowBox[{"-", "c"}], "d"},
        {
         RowBox[{"-", "d"}], 
         RowBox[{"-", "c"}]}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}], ".", 
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"m", "n"},
        {
         RowBox[{"-", "n"}], "m"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.85976312983554*^9, 3.8597631343581524`*^9}, {
   3.859764158245617*^9, 3.8597641898229403`*^9}, {3.8597642201146183`*^9, 
   3.8597642358325043`*^9}, {3.8597643057108135`*^9, 3.8597643096398325`*^9}, 
   3.8597646064133253`*^9},
 CellLabel->"In[23]:=",ExpressionUUID->"3c63288e-5445-4cd9-85c0-070bbaed1766"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{
        RowBox[{"-", "c"}], " ", "m"}], "-", 
       RowBox[{"d", " ", "n"}], "+", 
       RowBox[{"a", " ", "x"}], "-", 
       RowBox[{"b", " ", "y"}]}], 
      RowBox[{
       RowBox[{"d", " ", "m"}], "-", 
       RowBox[{"c", " ", "n"}], "+", 
       RowBox[{"b", " ", "x"}], "+", 
       RowBox[{"a", " ", "y"}]}]},
     {
      RowBox[{
       RowBox[{
        RowBox[{"-", "d"}], " ", "m"}], "+", 
       RowBox[{"c", " ", "n"}], "-", 
       RowBox[{"b", " ", "x"}], "-", 
       RowBox[{"a", " ", "y"}]}], 
      RowBox[{
       RowBox[{
        RowBox[{"-", "c"}], " ", "m"}], "-", 
       RowBox[{"d", " ", "n"}], "+", 
       RowBox[{"a", " ", "x"}], "-", 
       RowBox[{"b", " ", "y"}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.8597641908360777`*^9, {3.8597642262339883`*^9, 3.859764236485526*^9}, 
   3.8597643162828584`*^9, 3.8597646168062677`*^9, 3.8597657975721536`*^9},
 CellLabel->
  "Out[23]//MatrixForm=",ExpressionUUID->"70e26b82-abe2-479b-8099-\
57a20c3faa80"]
}, Open  ]],

Cell[TextData[StyleBox["The top right:",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{
  3.8597642521964073`*^9},ExpressionUUID->"094e19f5-8db6-44b4-a650-\
9dc86f61e668"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"topright", "=", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"c", "d"},
        {
         RowBox[{"-", "d"}], "c"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}], ".", 
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"x", "y"},
        {
         RowBox[{"-", "y"}], "x"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}]}], "+", 
    RowBox[{
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"a", 
         RowBox[{"-", "b"}]},
        {"b", "a"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}], ".", 
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"m", "n"},
        {
         RowBox[{"-", "n"}], "m"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8597642616922884`*^9, 3.8597642744580765`*^9}, 
   3.8597643342859764`*^9, 3.859764608436097*^9},
 CellLabel->"In[17]:=",ExpressionUUID->"05b3ee2e-2ba8-477d-94c0-b3106a3be783"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{"a", " ", "m"}], "+", 
       RowBox[{"b", " ", "n"}], "+", 
       RowBox[{"c", " ", "x"}], "-", 
       RowBox[{"d", " ", "y"}]}], 
      RowBox[{
       RowBox[{
        RowBox[{"-", "b"}], " ", "m"}], "+", 
       RowBox[{"a", " ", "n"}], "+", 
       RowBox[{"d", " ", "x"}], "+", 
       RowBox[{"c", " ", "y"}]}]},
     {
      RowBox[{
       RowBox[{"b", " ", "m"}], "-", 
       RowBox[{"a", " ", "n"}], "-", 
       RowBox[{"d", " ", "x"}], "-", 
       RowBox[{"c", " ", "y"}]}], 
      RowBox[{
       RowBox[{"a", " ", "m"}], "+", 
       RowBox[{"b", " ", "n"}], "+", 
       RowBox[{"c", " ", "x"}], "-", 
       RowBox[{"d", " ", "y"}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8597643361413326`*^9, 3.8597646188912086`*^9},
 CellLabel->
  "Out[17]//MatrixForm=",ExpressionUUID->"680009a7-9573-41f5-a03f-\
2cb541cccf0a"]
}, Open  ]],

Cell[TextData[StyleBox["The bottom left:",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{
  3.859764346822521*^9},ExpressionUUID->"24a29637-c7e2-4417-a3c3-\
c845983728a7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bottomleft", " ", "=", " ", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"a", "b"},
        {
         RowBox[{"-", "b"}], "a"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}], ".", 
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {
         RowBox[{"-", "m"}], "n"},
        {
         RowBox[{"-", "n"}], 
         RowBox[{"-", "m"}]}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}]}], "+", 
    RowBox[{
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {
         RowBox[{"-", "c"}], "d"},
        {
         RowBox[{"-", "d"}], 
         RowBox[{"-", "c"}]}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}], ".", 
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"x", 
         RowBox[{"-", "y"}]},
        {"y", "x"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.859764355724475*^9, 3.8597644026295795`*^9}, 
   3.8597646095217295`*^9},
 CellLabel->"In[18]:=",ExpressionUUID->"97bb5c67-b1a3-480f-81b9-83eae45a00fc"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{
        RowBox[{"-", "a"}], " ", "m"}], "-", 
       RowBox[{"b", " ", "n"}], "-", 
       RowBox[{"c", " ", "x"}], "+", 
       RowBox[{"d", " ", "y"}]}], 
      RowBox[{
       RowBox[{
        RowBox[{"-", "b"}], " ", "m"}], "+", 
       RowBox[{"a", " ", "n"}], "+", 
       RowBox[{"d", " ", "x"}], "+", 
       RowBox[{"c", " ", "y"}]}]},
     {
      RowBox[{
       RowBox[{"b", " ", "m"}], "-", 
       RowBox[{"a", " ", "n"}], "-", 
       RowBox[{"d", " ", "x"}], "-", 
       RowBox[{"c", " ", "y"}]}], 
      RowBox[{
       RowBox[{
        RowBox[{"-", "a"}], " ", "m"}], "-", 
       RowBox[{"b", " ", "n"}], "-", 
       RowBox[{"c", " ", "x"}], "+", 
       RowBox[{"d", " ", "y"}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.85976440365124*^9, 3.8597646205751925`*^9},
 CellLabel->
  "Out[18]//MatrixForm=",ExpressionUUID->"e3f62ab9-3b09-40f9-8c7e-\
57ed3ff232ad"]
}, Open  ]],

Cell[TextData[StyleBox["The bottom right:",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{
  3.859764415541984*^9},ExpressionUUID->"23410603-03fb-4010-93b8-\
1ef8182d8dcf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bottomright", " ", "=", " ", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"c", "d"},
        {
         RowBox[{"-", "d"}], "c"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}], ".", 
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {
         RowBox[{"-", "m"}], "n"},
        {
         RowBox[{"-", "n"}], 
         RowBox[{"-", "m"}]}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}]}], "+", 
    RowBox[{
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"a", 
         RowBox[{"-", "b"}]},
        {"b", "a"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}], ".", 
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"x", 
         RowBox[{"-", "y"}]},
        {"y", "x"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8597644226099005`*^9, 3.8597644234195104`*^9}, {
   3.859764521592794*^9, 3.859764527351229*^9}, 3.8597646107936554`*^9},
 CellLabel->"In[19]:=",ExpressionUUID->"6b9db27e-6169-471e-b55e-77f8f64b272f"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{
        RowBox[{"-", "c"}], " ", "m"}], "-", 
       RowBox[{"d", " ", "n"}], "+", 
       RowBox[{"a", " ", "x"}], "-", 
       RowBox[{"b", " ", "y"}]}], 
      RowBox[{
       RowBox[{
        RowBox[{"-", "d"}], " ", "m"}], "+", 
       RowBox[{"c", " ", "n"}], "-", 
       RowBox[{"b", " ", "x"}], "-", 
       RowBox[{"a", " ", "y"}]}]},
     {
      RowBox[{
       RowBox[{"d", " ", "m"}], "-", 
       RowBox[{"c", " ", "n"}], "+", 
       RowBox[{"b", " ", "x"}], "+", 
       RowBox[{"a", " ", "y"}]}], 
      RowBox[{
       RowBox[{
        RowBox[{"-", "c"}], " ", "m"}], "-", 
       RowBox[{"d", " ", "n"}], "+", 
       RowBox[{"a", " ", "x"}], "-", 
       RowBox[{"b", " ", "y"}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8597645284812555`*^9, 3.859764622394697*^9},
 CellLabel->
  "Out[19]//MatrixForm=",ExpressionUUID->"8b917aed-4d65-40e6-aa9c-\
0a929ba87d52"]
}, Open  ]],

Cell[TextData[StyleBox["Result:",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{
  3.8597645478059525`*^9},ExpressionUUID->"d4753f9d-a5f1-48ba-824b-\
fa5e3b8c458f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"topleft", ",", "topright"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"bottomleft", ",", "bottomright"}], "}"}]}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8597645335186305`*^9, 3.8597645652280397`*^9}, {
  3.859764612256171*^9, 3.859764615343528*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"c851af55-15f6-4d4d-ad5f-a174374af87b"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      TagBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {
           RowBox[{
            RowBox[{
             RowBox[{"-", "c"}], " ", "m"}], "-", 
            RowBox[{"d", " ", "n"}], "+", 
            RowBox[{"a", " ", "x"}], "-", 
            RowBox[{"b", " ", "y"}]}], 
           RowBox[{
            RowBox[{"d", " ", "m"}], "-", 
            RowBox[{"c", " ", "n"}], "+", 
            RowBox[{"b", " ", "x"}], "+", 
            RowBox[{"a", " ", "y"}]}]},
          {
           RowBox[{
            RowBox[{
             RowBox[{"-", "d"}], " ", "m"}], "+", 
            RowBox[{"c", " ", "n"}], "-", 
            RowBox[{"b", " ", "x"}], "-", 
            RowBox[{"a", " ", "y"}]}], 
           RowBox[{
            RowBox[{
             RowBox[{"-", "c"}], " ", "m"}], "-", 
            RowBox[{"d", " ", "n"}], "+", 
            RowBox[{"a", " ", "x"}], "-", 
            RowBox[{"b", " ", "y"}]}]}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]], 
      TagBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {
           RowBox[{
            RowBox[{"a", " ", "m"}], "+", 
            RowBox[{"b", " ", "n"}], "+", 
            RowBox[{"c", " ", "x"}], "-", 
            RowBox[{"d", " ", "y"}]}], 
           RowBox[{
            RowBox[{
             RowBox[{"-", "b"}], " ", "m"}], "+", 
            RowBox[{"a", " ", "n"}], "+", 
            RowBox[{"d", " ", "x"}], "+", 
            RowBox[{"c", " ", "y"}]}]},
          {
           RowBox[{
            RowBox[{"b", " ", "m"}], "-", 
            RowBox[{"a", " ", "n"}], "-", 
            RowBox[{"d", " ", "x"}], "-", 
            RowBox[{"c", " ", "y"}]}], 
           RowBox[{
            RowBox[{"a", " ", "m"}], "+", 
            RowBox[{"b", " ", "n"}], "+", 
            RowBox[{"c", " ", "x"}], "-", 
            RowBox[{"d", " ", "y"}]}]}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]]},
     {
      TagBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {
           RowBox[{
            RowBox[{
             RowBox[{"-", "a"}], " ", "m"}], "-", 
            RowBox[{"b", " ", "n"}], "-", 
            RowBox[{"c", " ", "x"}], "+", 
            RowBox[{"d", " ", "y"}]}], 
           RowBox[{
            RowBox[{
             RowBox[{"-", "b"}], " ", "m"}], "+", 
            RowBox[{"a", " ", "n"}], "+", 
            RowBox[{"d", " ", "x"}], "+", 
            RowBox[{"c", " ", "y"}]}]},
          {
           RowBox[{
            RowBox[{"b", " ", "m"}], "-", 
            RowBox[{"a", " ", "n"}], "-", 
            RowBox[{"d", " ", "x"}], "-", 
            RowBox[{"c", " ", "y"}]}], 
           RowBox[{
            RowBox[{
             RowBox[{"-", "a"}], " ", "m"}], "-", 
            RowBox[{"b", " ", "n"}], "-", 
            RowBox[{"c", " ", "x"}], "+", 
            RowBox[{"d", " ", "y"}]}]}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]], 
      TagBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {
           RowBox[{
            RowBox[{
             RowBox[{"-", "c"}], " ", "m"}], "-", 
            RowBox[{"d", " ", "n"}], "+", 
            RowBox[{"a", " ", "x"}], "-", 
            RowBox[{"b", " ", "y"}]}], 
           RowBox[{
            RowBox[{
             RowBox[{"-", "d"}], " ", "m"}], "+", 
            RowBox[{"c", " ", "n"}], "-", 
            RowBox[{"b", " ", "x"}], "-", 
            RowBox[{"a", " ", "y"}]}]},
          {
           RowBox[{
            RowBox[{"d", " ", "m"}], "-", 
            RowBox[{"c", " ", "n"}], "+", 
            RowBox[{"b", " ", "x"}], "+", 
            RowBox[{"a", " ", "y"}]}], 
           RowBox[{
            RowBox[{
             RowBox[{"-", "c"}], " ", "m"}], "-", 
            RowBox[{"d", " ", "n"}], "+", 
            RowBox[{"a", " ", "x"}], "-", 
            RowBox[{"b", " ", "y"}]}]}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8597645658727665`*^9, 3.8597646241497946`*^9},
 CellLabel->
  "Out[20]//MatrixForm=",ExpressionUUID->"e1620bd2-357c-42d1-8eba-\
ccf6bfdc3304"]
}, Open  ]],

Cell["The result is equal to the inverse of mat2. So:", "Text",
 CellChangeTimes->{{3.859766604042347*^9, 
  3.8597666407970395`*^9}},ExpressionUUID->"3b85d190-5f2f-4c61-b7de-\
6c60a9554c5e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"-", "c"}], " ", "m"}], "-", 
   RowBox[{"d", " ", "n"}], "+", 
   RowBox[{"a", " ", "x"}], "-", 
   RowBox[{"b", " ", "y"}]}], "==", "1"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"b", " ", "m"}], "-", 
   RowBox[{"a", " ", "n"}], "-", 
   RowBox[{"d", " ", "x"}], "-", 
   RowBox[{"c", " ", "y"}]}], " ", "==", " ", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"a", " ", "m"}], "+", 
   RowBox[{"b", " ", "n"}], "+", 
   RowBox[{"c", " ", "x"}], "-", 
   RowBox[{"d", " ", "y"}]}], " ", "==", "0"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"d", " ", "m"}], "-", 
   RowBox[{"c", " ", "n"}], "+", 
   RowBox[{"b", " ", "x"}], "+", 
   RowBox[{"a", " ", "y"}]}], "\[Equal]", "0"}]}], "Input",
 CellChangeTimes->{{3.8597666465901127`*^9, 3.859766738702985*^9}, {
  3.8597672863945866`*^9, 
  3.8597673187180705`*^9}},ExpressionUUID->"31a85384-e863-4b89-8cdb-\
b689aaabd82b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "c"}], " ", "m"}], "-", 
      RowBox[{"d", " ", "n"}], "+", 
      RowBox[{"a", " ", "x"}], "-", 
      RowBox[{"b", " ", "y"}]}], "==", "1"}], "&&", 
    RowBox[{
     RowBox[{
      RowBox[{"b", " ", "m"}], "-", 
      RowBox[{"a", " ", "n"}], "-", 
      RowBox[{"d", " ", "x"}], "-", 
      RowBox[{"c", " ", "y"}]}], " ", "==", " ", "0"}], "&&", 
    RowBox[{
     RowBox[{
      RowBox[{"a", " ", "m"}], "+", 
      RowBox[{"b", " ", "n"}], "+", 
      RowBox[{"c", " ", "x"}], "-", 
      RowBox[{"d", " ", "y"}]}], " ", "==", "0"}], "&&", 
    RowBox[{
     RowBox[{
      RowBox[{"d", " ", "m"}], "-", 
      RowBox[{"c", " ", "n"}], "+", 
      RowBox[{"b", " ", "x"}], "+", 
      RowBox[{"a", " ", "y"}]}], "\[Equal]", "0"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", "n", ",", "x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8597667826235037`*^9, 3.8597668019483457`*^9}, {
  3.8597668449314313`*^9, 3.8597668681848125`*^9}, {3.8597672164220543`*^9, 
  3.85976722214701*^9}, {3.8597673225573826`*^9, 3.859767352949345*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"0f13b376-3772-4000-911a-8856ee3d6276"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"m", "\[Rule]", 
     RowBox[{"-", 
      FractionBox["c", 
       RowBox[{
        SuperscriptBox["a", "2"], "+", 
        SuperscriptBox["b", "2"], "+", 
        SuperscriptBox["c", "2"], "+", 
        SuperscriptBox["d", "2"]}]]}]}], ",", 
    RowBox[{"n", "\[Rule]", 
     RowBox[{"-", 
      FractionBox["d", 
       RowBox[{
        SuperscriptBox["a", "2"], "+", 
        SuperscriptBox["b", "2"], "+", 
        SuperscriptBox["c", "2"], "+", 
        SuperscriptBox["d", "2"]}]]}]}], ",", 
    RowBox[{"x", "\[Rule]", 
     FractionBox["a", 
      RowBox[{
       SuperscriptBox["a", "2"], "+", 
       SuperscriptBox["b", "2"], "+", 
       SuperscriptBox["c", "2"], "+", 
       SuperscriptBox["d", "2"]}]]}], ",", 
    RowBox[{"y", "\[Rule]", 
     RowBox[{"-", 
      FractionBox["b", 
       RowBox[{
        SuperscriptBox["a", "2"], "+", 
        SuperscriptBox["b", "2"], "+", 
        SuperscriptBox["c", "2"], "+", 
        SuperscriptBox["d", "2"]}]]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.8597668508359013`*^9, 3.8597668685812025`*^9}, {
  3.8597672356600084`*^9, 3.8597672487575617`*^9}, {3.8597673299841776`*^9, 
  3.8597673535582495`*^9}},
 CellLabel->"Out[43]=",ExpressionUUID->"8fd5bafe-e0f6-49f4-8cf3-6ad253fc034e"]
}, Open  ]],

Cell[TextData[{
 "We notice: in this case, ",
 Cell[BoxData[
  RowBox[{
   SuperscriptBox["a", "2"], "+", 
   SuperscriptBox["b", "2"], "+", 
   SuperscriptBox["c", "2"], "+", 
   SuperscriptBox["d", "2"]}]], "Output",
  CellChangeTimes->{{3.8597668508359013`*^9, 3.8597668685812025`*^9}, {
   3.8597672356600084`*^9, 3.8597672487575617`*^9}, {3.8597673299841776`*^9, 
   3.8597673535582495`*^9}},ExpressionUUID->
  "8c60c965-d943-4aba-a4ba-409b968bec07"],
 " cannot be 0, then the funny funny number has inverse"
}], "Text",
 CellChangeTimes->{{3.859767428848685*^9, 
  3.8597675069809804`*^9}},ExpressionUUID->"d5acf192-2b16-4853-81f2-\
9f9a6398cc0f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["D. Find two funny funny numbers A and B such that AB != BA", \
"Subsection",
 CellChangeTimes->{
  3.859773302886317*^9, {3.8600978641361985`*^9, 
   3.860097868699521*^9}},ExpressionUUID->"faff6bc3-eaa8-4597-a625-\
8205835061e7"],

Cell["We replace the a and x with 0", "Text",
 CellChangeTimes->{{3.860043175988098*^9, 
  3.8600431844209547`*^9}},ExpressionUUID->"3e5058d4-7e42-4585-aea3-\
ae31b9cc9d8f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mat2", " ", "=", " ", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "b"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "b"}], ",", "0"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"c", ",", "d"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "d"}], ",", "c"}], "}"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "c"}], ",", "d"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "d"}], ",", 
           RowBox[{"-", "c"}]}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "b"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"b", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.860043009655916*^9, 3.8600430150404034`*^9}, {
  3.8600430486758623`*^9, 3.8600430532493086`*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"026341d4-031b-4324-a06f-49bc0b6e47ff"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "b"},
         {
          RowBox[{"-", "b"}], "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"c", "d"},
         {
          RowBox[{"-", "d"}], "c"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}]},
     {
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{"-", "c"}], "d"},
         {
          RowBox[{"-", "d"}], 
          RowBox[{"-", "c"}]}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", 
          RowBox[{"-", "b"}]},
         {"b", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.8600430418895807`*^9, 3.8600430542493725`*^9}},
 CellLabel->
  "Out[53]//MatrixForm=",ExpressionUUID->"f7ec9421-fcda-432f-a332-\
e216a5687a96"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mat3", " ", "=", " ", 
  FormBox[
   RowBox[{"MatrixForm", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "y"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "y"}], ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"m", ",", "n"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "n"}], ",", "m"}], "}"}]}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "m"}], ",", "n"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "n"}], ",", 
            RowBox[{"-", "m"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", "y"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], "}"}], "]"}],
   TraditionalForm]}]], "Input",
 CellChangeTimes->{{3.8600430161355762`*^9, 3.8600430237223587`*^9}, {
  3.8600430575276375`*^9, 3.860043064458433*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"c9947411-b67f-4ec5-81c4-44b84ec84e69"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "y"},
         {
          RowBox[{"-", "y"}], "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"m", "n"},
         {
          RowBox[{"-", "n"}], "m"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}]},
     {
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{"-", "m"}], "n"},
         {
          RowBox[{"-", "n"}], 
          RowBox[{"-", "m"}]}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", 
          RowBox[{"-", "y"}]},
         {"y", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8600430653297453`*^9},
 CellLabel->
  "Out[54]//MatrixForm=",ExpressionUUID->"1cee3f1b-9415-461f-afc5-\
8899dff35300"]
}, Open  ]],

Cell["and we multi mat2 and mat3", "Text",
 CellChangeTimes->{{3.8600431884804096`*^9, 
  3.8600431974644156`*^9}},ExpressionUUID->"d9588e94-324a-4610-8521-\
977daf8722d1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"0", "b"},
           {
            RowBox[{"-", "b"}], "0"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}], 
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"c", "d"},
           {
            RowBox[{"-", "d"}], "c"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}]},
       {
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {
            RowBox[{"-", "c"}], "d"},
           {
            RowBox[{"-", "d"}], 
            RowBox[{"-", "c"}]}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}], 
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"0", 
            RowBox[{"-", "b"}]},
           {"b", "0"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}]}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ".", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"0", "y"},
           {
            RowBox[{"-", "y"}], "0"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}], 
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"m", "n"},
           {
            RowBox[{"-", "n"}], "m"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}]},
       {
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {
            RowBox[{"-", "m"}], "n"},
           {
            RowBox[{"-", "n"}], 
            RowBox[{"-", "m"}]}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}], 
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"0", 
            RowBox[{"-", "y"}]},
           {"y", "0"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}]}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "]"}]], "Input",
 CellChangeTimes->{{3.8600430710508986`*^9, 3.860043083947823*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"68ff2236-87fb-4360-99bf-eb89b8187c90"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{
               RowBox[{"-", "b"}], " ", "m"}], 
              RowBox[{"b", " ", "n"}]},
             {
              RowBox[{
               RowBox[{"-", "b"}], " ", "n"}], 
              RowBox[{
               RowBox[{"-", "b"}], " ", "m"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}], 
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {"0", 
              RowBox[{
               RowBox[{"-", "b"}], " ", "y"}]},
             {
              RowBox[{"b", " ", "y"}], "0"}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}]},
         {
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {"0", 
              RowBox[{
               RowBox[{"-", "b"}], " ", "y"}]},
             {
              RowBox[{"b", " ", "y"}], "0"}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}], 
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{
               RowBox[{"-", "b"}], " ", "m"}], 
              RowBox[{
               RowBox[{"-", "b"}], " ", "n"}]},
             {
              RowBox[{"b", " ", "n"}], 
              RowBox[{
               RowBox[{"-", "b"}], " ", "m"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}]}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{
               RowBox[{"-", "d"}], " ", "m"}], 
              RowBox[{
               RowBox[{"d", " ", "n"}], "+", 
               RowBox[{"c", " ", "y"}]}]},
             {
              RowBox[{
               RowBox[{
                RowBox[{"-", "d"}], " ", "n"}], "-", 
               RowBox[{"c", " ", "y"}]}], 
              RowBox[{
               RowBox[{"-", "d"}], " ", "m"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}], 
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{"c", " ", "m"}], 
              RowBox[{
               RowBox[{"c", " ", "n"}], "-", 
               RowBox[{"d", " ", "y"}]}]},
             {
              RowBox[{
               RowBox[{
                RowBox[{"-", "c"}], " ", "n"}], "+", 
               RowBox[{"d", " ", "y"}]}], 
              RowBox[{"c", " ", "m"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}]},
         {
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{
               RowBox[{"-", "c"}], " ", "m"}], 
              RowBox[{
               RowBox[{"c", " ", "n"}], "-", 
               RowBox[{"d", " ", "y"}]}]},
             {
              RowBox[{
               RowBox[{
                RowBox[{"-", "c"}], " ", "n"}], "+", 
               RowBox[{"d", " ", "y"}]}], 
              RowBox[{
               RowBox[{"-", "c"}], " ", "m"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}], 
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{
               RowBox[{"-", "d"}], " ", "m"}], 
              RowBox[{
               RowBox[{
                RowBox[{"-", "d"}], " ", "n"}], "-", 
               RowBox[{"c", " ", "y"}]}]},
             {
              RowBox[{
               RowBox[{"d", " ", "n"}], "+", 
               RowBox[{"c", " ", "y"}]}], 
              RowBox[{
               RowBox[{"-", "d"}], " ", "m"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}]}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}]},
     {
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{
               RowBox[{"-", "d"}], " ", "m"}], 
              RowBox[{
               RowBox[{"d", " ", "n"}], "-", 
               RowBox[{"c", " ", "y"}]}]},
             {
              RowBox[{
               RowBox[{
                RowBox[{"-", "d"}], " ", "n"}], "+", 
               RowBox[{"c", " ", "y"}]}], 
              RowBox[{
               RowBox[{"-", "d"}], " ", "m"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}], 
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{
               RowBox[{"-", "c"}], " ", "m"}], 
              RowBox[{
               RowBox[{
                RowBox[{"-", "c"}], " ", "n"}], "-", 
               RowBox[{"d", " ", "y"}]}]},
             {
              RowBox[{
               RowBox[{"c", " ", "n"}], "+", 
               RowBox[{"d", " ", "y"}]}], 
              RowBox[{
               RowBox[{"-", "c"}], " ", "m"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}]},
         {
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{"c", " ", "m"}], 
              RowBox[{
               RowBox[{
                RowBox[{"-", "c"}], " ", "n"}], "-", 
               RowBox[{"d", " ", "y"}]}]},
             {
              RowBox[{
               RowBox[{"c", " ", "n"}], "+", 
               RowBox[{"d", " ", "y"}]}], 
              RowBox[{"c", " ", "m"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}], 
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{
               RowBox[{"-", "d"}], " ", "m"}], 
              RowBox[{
               RowBox[{
                RowBox[{"-", "d"}], " ", "n"}], "+", 
               RowBox[{"c", " ", "y"}]}]},
             {
              RowBox[{
               RowBox[{"d", " ", "n"}], "-", 
               RowBox[{"c", " ", "y"}]}], 
              RowBox[{
               RowBox[{"-", "d"}], " ", "m"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}]}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{"b", " ", "m"}], 
              RowBox[{
               RowBox[{"-", "b"}], " ", "n"}]},
             {
              RowBox[{"b", " ", "n"}], 
              RowBox[{"b", " ", "m"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}], 
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {"0", 
              RowBox[{"b", " ", "y"}]},
             {
              RowBox[{
               RowBox[{"-", "b"}], " ", "y"}], "0"}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}]},
         {
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {"0", 
              RowBox[{"b", " ", "y"}]},
             {
              RowBox[{
               RowBox[{"-", "b"}], " ", "y"}], "0"}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}], 
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{"b", " ", "m"}], 
              RowBox[{"b", " ", "n"}]},
             {
              RowBox[{
               RowBox[{"-", "b"}], " ", "n"}], 
              RowBox[{"b", " ", "m"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}]}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.860043074120083*^9, 3.860043084908721*^9}},
 CellLabel->
  "Out[56]//MatrixForm=",ExpressionUUID->"10d215e0-ea66-47b7-99ad-\
a8a043e4d719"]
}, Open  ]],

Cell["then we switch to mat3 multi with mat2", "Text",
 CellChangeTimes->{{3.860043206183955*^9, 
  3.860043233503072*^9}},ExpressionUUID->"f28fbc66-8a71-4aff-b301-\
134ce187b598"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"0", "y"},
           {
            RowBox[{"-", "y"}], "0"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}], 
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"m", "n"},
           {
            RowBox[{"-", "n"}], "m"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}]},
       {
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {
            RowBox[{"-", "m"}], "n"},
           {
            RowBox[{"-", "n"}], 
            RowBox[{"-", "m"}]}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}], 
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"0", 
            RowBox[{"-", "y"}]},
           {"y", "0"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}]}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ".", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"0", "b"},
           {
            RowBox[{"-", "b"}], "0"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}], 
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"c", "d"},
           {
            RowBox[{"-", "d"}], "c"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}]},
       {
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {
            RowBox[{"-", "c"}], "d"},
           {
            RowBox[{"-", "d"}], 
            RowBox[{"-", "c"}]}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}], 
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"0", 
            RowBox[{"-", "b"}]},
           {"b", "0"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}]}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "]"}]], "Input",
 CellChangeTimes->{{3.860043092146888*^9, 3.8600430967346106`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"f8977a6f-a6cf-4ab6-84ad-66f272cfff95"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{
               RowBox[{"-", "c"}], " ", "y"}], 
              RowBox[{"d", " ", "y"}]},
             {
              RowBox[{
               RowBox[{"-", "d"}], " ", "y"}], 
              RowBox[{
               RowBox[{"-", "c"}], " ", "y"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}], 
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {"0", 
              RowBox[{
               RowBox[{"-", "b"}], " ", "y"}]},
             {
              RowBox[{"b", " ", "y"}], "0"}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}]},
         {
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {"0", 
              RowBox[{
               RowBox[{"-", "b"}], " ", "y"}]},
             {
              RowBox[{"b", " ", "y"}], "0"}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}], 
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{
               RowBox[{"-", "c"}], " ", "y"}], 
              RowBox[{
               RowBox[{"-", "d"}], " ", "y"}]},
             {
              RowBox[{"d", " ", "y"}], 
              RowBox[{
               RowBox[{"-", "c"}], " ", "y"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}]}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{
               RowBox[{"-", "c"}], " ", "n"}], 
              RowBox[{
               RowBox[{"b", " ", "m"}], "+", 
               RowBox[{"d", " ", "n"}]}]},
             {
              RowBox[{
               RowBox[{
                RowBox[{"-", "b"}], " ", "m"}], "-", 
               RowBox[{"d", " ", "n"}]}], 
              RowBox[{
               RowBox[{"-", "c"}], " ", "n"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}], 
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{"c", " ", "m"}], 
              RowBox[{
               RowBox[{"d", " ", "m"}], "-", 
               RowBox[{"b", " ", "n"}]}]},
             {
              RowBox[{
               RowBox[{
                RowBox[{"-", "d"}], " ", "m"}], "+", 
               RowBox[{"b", " ", "n"}]}], 
              RowBox[{"c", " ", "m"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}]},
         {
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{
               RowBox[{"-", "c"}], " ", "m"}], 
              RowBox[{
               RowBox[{"d", " ", "m"}], "-", 
               RowBox[{"b", " ", "n"}]}]},
             {
              RowBox[{
               RowBox[{
                RowBox[{"-", "d"}], " ", "m"}], "+", 
               RowBox[{"b", " ", "n"}]}], 
              RowBox[{
               RowBox[{"-", "c"}], " ", "m"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}], 
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{
               RowBox[{"-", "c"}], " ", "n"}], 
              RowBox[{
               RowBox[{
                RowBox[{"-", "b"}], " ", "m"}], "-", 
               RowBox[{"d", " ", "n"}]}]},
             {
              RowBox[{
               RowBox[{"b", " ", "m"}], "+", 
               RowBox[{"d", " ", "n"}]}], 
              RowBox[{
               RowBox[{"-", "c"}], " ", "n"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}]}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}]},
     {
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{
               RowBox[{"-", "c"}], " ", "n"}], 
              RowBox[{
               RowBox[{
                RowBox[{"-", "b"}], " ", "m"}], "+", 
               RowBox[{"d", " ", "n"}]}]},
             {
              RowBox[{
               RowBox[{"b", " ", "m"}], "-", 
               RowBox[{"d", " ", "n"}]}], 
              RowBox[{
               RowBox[{"-", "c"}], " ", "n"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}], 
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{
               RowBox[{"-", "c"}], " ", "m"}], 
              RowBox[{
               RowBox[{
                RowBox[{"-", "d"}], " ", "m"}], "-", 
               RowBox[{"b", " ", "n"}]}]},
             {
              RowBox[{
               RowBox[{"d", " ", "m"}], "+", 
               RowBox[{"b", " ", "n"}]}], 
              RowBox[{
               RowBox[{"-", "c"}], " ", "m"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}]},
         {
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{"c", " ", "m"}], 
              RowBox[{
               RowBox[{
                RowBox[{"-", "d"}], " ", "m"}], "-", 
               RowBox[{"b", " ", "n"}]}]},
             {
              RowBox[{
               RowBox[{"d", " ", "m"}], "+", 
               RowBox[{"b", " ", "n"}]}], 
              RowBox[{"c", " ", "m"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}], 
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{
               RowBox[{"-", "c"}], " ", "n"}], 
              RowBox[{
               RowBox[{"b", " ", "m"}], "-", 
               RowBox[{"d", " ", "n"}]}]},
             {
              RowBox[{
               RowBox[{
                RowBox[{"-", "b"}], " ", "m"}], "+", 
               RowBox[{"d", " ", "n"}]}], 
              RowBox[{
               RowBox[{"-", "c"}], " ", "n"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}]}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{"c", " ", "y"}], 
              RowBox[{
               RowBox[{"-", "d"}], " ", "y"}]},
             {
              RowBox[{"d", " ", "y"}], 
              RowBox[{"c", " ", "y"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}], 
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {"0", 
              RowBox[{"b", " ", "y"}]},
             {
              RowBox[{
               RowBox[{"-", "b"}], " ", "y"}], "0"}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}]},
         {
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {"0", 
              RowBox[{"b", " ", "y"}]},
             {
              RowBox[{
               RowBox[{"-", "b"}], " ", "y"}], "0"}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}], 
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {
              RowBox[{"c", " ", "y"}], 
              RowBox[{"d", " ", "y"}]},
             {
              RowBox[{
               RowBox[{"-", "d"}], " ", "y"}], 
              RowBox[{"c", " ", "y"}]}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}]}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8600430984038277`*^9},
 CellLabel->
  "Out[57]//MatrixForm=",ExpressionUUID->"a511f5e3-0643-4670-9c3c-\
762c3681aeb8"]
}, Open  ]],

Cell["\<\
We can notice there are a strong different between these two result. So AB != \
BA\
\>", "Text",
 CellChangeTimes->{{3.860043266802916*^9, 
  3.860043337503664*^9}},ExpressionUUID->"9c84cbd3-c8a4-42ca-bcaa-\
3f1aead2a8b3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["2. What\[CloseCurlyQuote]s next?", "Section",
 CellChangeTimes->{3.859773411065158*^9, 
  3.8600976420255256`*^9},ExpressionUUID->"3de196c6-9f09-44d0-82d3-\
b32c380affa8"],

Cell[CellGroupData[{

Cell["A", "Subsection",
 CellChangeTimes->{
  3.8597815086573863`*^9},ExpressionUUID->"64a0a638-68bc-4511-b0e3-\
b859884607e5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"M", " ", "=", " ", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"a", "b"},
      {"c", "d"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}], "\[NoBreak]", ")"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8597785332925158`*^9, 3.8597785502717166`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"269c623b-fd7f-4943-a522-9b9e8871f3d8"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"a", "b"},
     {"c", "d"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.859778550869169*^9, 3.8599244632345138`*^9},
 CellLabel->
  "Out[22]//MatrixForm=",ExpressionUUID->"a474241e-5dd9-4a54-bd81-\
19ee78425d37"]
}, Open  ]],

Cell[TextData[{
 "Set x(n-1) = ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", 
    RowBox[{"n", "-", "1"}]], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "b13dc26a-b2e6-454a-bd4a-764fd4018227"],
 ", x(n-2) = ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", 
    RowBox[{"n", "-", "2"}]], TraditionalForm]],ExpressionUUID->
  "1568f617-a691-4755-ac86-b84e12e65e69"]
}], "Text",
 CellChangeTimes->{{3.859778557698679*^9, 3.8597785926040516`*^9}, {
  3.859780141034609*^9, 
  3.859780168756186*^9}},ExpressionUUID->"1b988c9e-be06-4b16-a27c-\
e0f2c6d1b50d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MwithX", "=", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"a", "b"},
       {"c", "d"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}], ".", 
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        FormBox[
         SubscriptBox["x", 
          RowBox[{"n", "-", "1"}]],
         TraditionalForm]},
       {
        FormBox[
         SubscriptBox["x", 
          RowBox[{"n", "-", "2"}]],
         TraditionalForm]}
      }], "\[NoBreak]", ")"}]}], "\[NoBreak]", "]"}]}]], "Input",
 CellChangeTimes->{{3.8597785992642956`*^9, 3.8597786922123227`*^9}, {
  3.85977914706252*^9, 3.859779162631852*^9}, {3.859780175606194*^9, 
  3.859780178508167*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"864e59c6-d0c3-4d50-bac6-aa6259e882f6"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{"b", " ", 
        SubscriptBox["x", 
         RowBox[{
          RowBox[{"-", "2"}], "+", "n"}]]}], "+", 
       RowBox[{"a", " ", 
        SubscriptBox["x", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "n"}]]}]}]},
     {
      RowBox[{
       RowBox[{"d", " ", 
        SubscriptBox["x", 
         RowBox[{
          RowBox[{"-", "2"}], "+", "n"}]]}], "+", 
       RowBox[{"c", " ", 
        SubscriptBox["x", 
         RowBox[{
          RowBox[{"-", "1"}], "+", "n"}]]}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8597801795111647`*^9, 3.859924465219515*^9},
 CellLabel->
  "Out[23]//MatrixForm=",ExpressionUUID->"e5160b70-1e95-4ada-9686-\
81083236b1da"]
}, Open  ]],

Cell["Then we get:", "Text",
 CellChangeTimes->{{3.8597808097935934`*^9, 
  3.8597808132649603`*^9}},ExpressionUUID->"dda022db-bd47-499a-bb4e-\
b651e3ff4933"],

Cell[BoxData[
 RowBox[{
  RowBox[{"M", " ", "=", " ", 
   RowBox[{"MatrixForm", "[", 
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"5", 
        RowBox[{"-", "6"}]},
       {"1", "0"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8597808039387255`*^9, 3.859780842234336*^9}, 
   3.859925132022552*^9},
 CellLabel->"In[29]:=",ExpressionUUID->"b173a24d-43a2-4874-9817-1b9f9f2e8d3a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["B", "Subsection",
 CellChangeTimes->{
  3.8599253857509427`*^9},ExpressionUUID->"23fae68a-716a-4770-9c99-\
6d2dc09a7a54"],

Cell[CellGroupData[{

Cell["{{5,-6},{1,0}}", "WolframAlphaLong",
 CellChangeTimes->{{3.859879109216572*^9, 3.859879138200883*^9}, {
  3.8598802844487*^9, 3.859880289915104*^9}, {3.859925149882576*^9, 
  3.8599251506225348`*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"42fe7143-2f55-404b-80da-c56889711dd8"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "{{5,-6},{1,0}}", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"{{5, -6}, {1, 0}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TemplateBox[{
               GridBox[{{"5", 
                  RowBox[{"-", "6"}]}, {"1", "0"}}, RowSpacings -> 1, 
                ColumnSpacings -> 1, RowAlignments -> Baseline, 
                ColumnAlignments -> Center]}, "Matrix", 
              DisplayFunction -> (
               RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
              InterpretationFunction -> (#& )], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Dimensions", "scanner" -> "List", "id" -> "Dimensions",
      "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Dimensions[{{5, -6}, {1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"2", 
              StyleBox["\" (rows)\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              TemplateBox[{"\" \[Times] \"", "2"}, "RowDefault"], 
              StyleBox["\" (columns)\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Matrix plot", "scanner" -> "List", "id" -> 
     "MatrixPlot", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"MatrixPlot[{{5, -6}, {1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[
             
             RasterBox[{{{0.9060890457118026, 0.7593201983554408, 
              0.40123210964656925`}, {1., 1., 1.}}, {{1., 0.4312504768444343, 
              0.}, {0.24083974502091848`, 0.3723794736356778, 
              0.8634301100284343}}}, {{0, 0}, {2, 2}}, {0, 1}], AxesStyle -> 
             Directive[
               AbsoluteThickness[0.2]], BaseStyle -> Automatic, Frame -> True,
              FrameLabel -> {None, None}, FrameStyle -> Directive[
               AbsoluteThickness[0.2]], FrameTicks -> {{{{1.5, 
                  FormBox["1", TraditionalForm]}, {0.5, 
                  FormBox["2", TraditionalForm]}}, {{1.5, 
                  FormBox["1", TraditionalForm]}, {0.5, 
                  FormBox["2", TraditionalForm]}}}, {{{0.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}}, {{0.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}}}}, GridLinesStyle -> 
             Automatic, ImageSize -> 75, 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Trace", "scanner" -> "List", "id" -> "Trace", 
     "position" -> "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Tr[{{5, -6}, {1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["5", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Trace__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Determinant", "scanner" -> "List", "id" -> 
     "Determinant", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Det[{{5, -6}, {1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["6", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Determinant__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Inverse", "scanner" -> "List", "id" -> "Inverse", 
     "position" -> "600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Inverse[{{5, -6}, {1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              StyleBox[
               FractionBox["1", "6"], ScriptLevel -> 1], 
              TemplateBox[{
                GridBox[{{"0", "6"}, {
                   RowBox[{"-", "1"}], "5"}}, RowSpacings -> 1, 
                 ColumnSpacings -> 1, RowAlignments -> Baseline, 
                 ColumnAlignments -> Center]}, "Matrix", 
               DisplayFunction -> (
                RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
               InterpretationFunction -> (#& )]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Inverse__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Inverse__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Characteristic polynomial", "scanner" -> "Eigen", "id" -> 
     "CharacteristicPolynomial", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "CharacteristicPolynomial[{{5, -6}, {1, 0}}, \[Lambda]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               SuperscriptBox["\[Lambda]", "2"], "-", 
               RowBox[{"5", " ", "\[Lambda]"}], "+", "6"}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "CharacteristicPolynomial__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://mathworld.wolfram.com/CharacteristicPolynomial.html", 
           "text" -> "Characteristic polynomial"}, {}]}]}]}], Typeset`pod8$$ =
    XMLElement[
   "pod", {"title" -> "Eigenvalues", "scanner" -> "Eigen", "id" -> 
     "Eigenvalues", "position" -> "800", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Eigenvalues[{{5, -6}, {1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "1"], "\[LongEqual]", "3"}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Eigenvalues[{{5, -6}, {1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "2"], "\[LongEqual]", "2"}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Eigenvalues__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Eigenvectors", "scanner" -> "Eigen", "id" -> 
     "Eigenvectors", "position" -> "900", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Eigenvectors[{{5, -6}, {1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "1"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox["3", HoldForm], 
                    TagBox["1", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Eigenvectors[{{5, -6}, {1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "2"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox["2", HoldForm], 
                    TagBox["1", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Eigenvectors__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Diagonalization", "scanner" -> "Eigen", "id" -> 
     "Diagonalization", "position" -> "1000", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"JordanDecomposition[{{5, -6}, {1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                RowBox[{"M", "\[LongEqual]", 
                  TagBox[
                   RowBox[{"S", ".", "J", ".", 
                    
                    TemplateBox[{"S"}, "Inverse", SyntaxForm -> 
                    SuperscriptBox]}], HoldForm]}]}, {
                StyleBox["\"where\"", {
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}, {
                RowBox[{"M", "\[LongEqual]", 
                  TagBox[
                   TemplateBox[{
                    GridBox[{{"5", 
                    RowBox[{"-", "6"}]}, {"1", "0"}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )], Identity]}]}, {
                RowBox[{"S", "\[LongEqual]", 
                  TagBox[
                   TemplateBox[{
                    
                    GridBox[{{"2", "3"}, {"1", "1"}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )], Identity]}]}, {
                RowBox[{"J", "\[LongEqual]", 
                  TagBox[
                   TemplateBox[{
                    
                    GridBox[{{"2", "0"}, {"0", "3"}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )], Identity]}]}, {
                RowBox[{
                  TemplateBox[{"S"}, "Inverse", SyntaxForm -> SuperscriptBox],
                   "\[LongEqual]", 
                  TagBox[
                   TemplateBox[{
                    GridBox[{{
                    RowBox[{"-", "1"}], "3"}, {"1", 
                    RowBox[{"-", "2"}]}}, RowSpacings -> 1, ColumnSpacings -> 
                    1, RowAlignments -> Baseline, ColumnAlignments -> 
                    Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )], Identity]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{1}}}], "Column"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Condition number", "scanner" -> "List", "id" -> 
     "ConditionNumber", "position" -> "1100", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["11", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False, False}, True}, Typeset`aux9$$ = {
   True, False, {False, False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "11", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.775", "parsetiming" -> "0.162", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP9361cg50g0ag75f553000005g655h17c3ae159g", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "19", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa9371cg50g0ag75f5530000029b5hi732e16i56g7179915770051379692", "version" -> 
    "2.6", "inputstring" -> "{{5,-6},{1,0}}"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 10., 
    "Date" -> {2022, 4, 26, 11, 25, 54.1436242`9.486122164556129}, "Line" -> 
    30, "SessionID" -> 22256508117983546102}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11}, Typeset`failedpods$$ = {}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "{{5,-6},{1,0}}"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{865., {589., 595.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.859925154166586*^9},ExpressionUUID->"41649053-d675-4b95-a868-\
92dcc7bac8fa"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"S", " ", "=", " ", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"2", "3"},
      {"1", "1"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}], "\[NoBreak]", ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"J", " ", "=", " ", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"2", "0"},
      {"0", "3"}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}], "\[NoBreak]", ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   TemplateBox[{"S"},
    "Inverse"], " ", "=", " ", 
   TemplateBox[{
     GridBox[{{
        RowBox[{"-", "1"}], "3"}, {"1", 
        RowBox[{"-", "2"}]}}, RowSpacings -> 1, ColumnSpacings -> 1, 
      RowAlignments -> Baseline, ColumnAlignments -> Center]},
    "Matrix",
    DisplayFunction->(RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ),
    InterpretationFunction->(#& )]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8598803090150757`*^9, 3.85988036454597*^9}, {
  3.859925162697955*^9, 3.8599251701673937`*^9}, {3.8601376660077324`*^9, 
  3.8601377268043566`*^9}},
 CellLabel->"",ExpressionUUID->"25b14c38-ec1e-49b1-9ab2-5f0247289004"],

Cell[TextData[{
 "Eigenvalues:\n",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Lambda]", "1"], TraditionalForm]], "Print", 
  "WolframAlphaFullOutput",
  GeneratedCell->False,
  CellAutoOverwrite->False,
  CellChangeTimes->{3.859925154166586*^9},ExpressionUUID->
  "5e697ec8-4547-4387-880b-712d23dc6f9e"],
 "=3\n",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Lambda]", "2"], TraditionalForm]], "Print", 
  "WolframAlphaFullOutput",
  GeneratedCell->False,
  CellAutoOverwrite->False,
  CellChangeTimes->{3.859925154166586*^9},ExpressionUUID->
  "2332431a-6bc7-40cf-b764-3aec020d4e73"],
 "=2"
}], "Text",
 CellChangeTimes->{{3.86013777397878*^9, 
  3.860137810323151*^9}},ExpressionUUID->"6f715f98-0475-451c-a834-\
6952d247e0c0"],

Cell["Eigenvectors:", "Text",
 CellChangeTimes->{{3.8601377055216966`*^9, 
  3.8601377299158897`*^9}},ExpressionUUID->"7d2ce8cf-3731-4996-bc1e-\
2de0143a850b"],

Cell[BoxData[
 PaneBox[
  RowBox[{
   RowBox[{
    RowBox[{
     SubscriptBox["v", "1"], "\[LongEqual]", 
     FormBox[
      TemplateBox[{"\"\[VeryThinSpace]\"", 
        RowBox[{"(", "\[NoBreak]", 
          TemplateBox[{",", "\",\"", 
            TagBox["3", HoldForm], 
            TagBox["1", HoldForm]}, "RowWithSeparators"], "\[NoBreak]", ")"}],
         "\"\[VeryThinSpace]\""},
       "RowDefault"],
      TraditionalForm]}], ";"}], "\[IndentingNewLine]", 
   PaneBox[
    RowBox[{
     RowBox[{
      SubscriptBox["v", "2"], "\[LongEqual]", 
      FormBox[
       TemplateBox[{"\"\[VeryThinSpace]\"", 
         RowBox[{"(", "\[NoBreak]", 
           TemplateBox[{",", "\",\"", 
             TagBox["2", HoldForm], 
             TagBox["1", HoldForm]}, "RowWithSeparators"], "\[NoBreak]", 
           ")"}], "\"\[VeryThinSpace]\""},
        "RowDefault"],
       TraditionalForm]}], ";"}],
    BaselinePosition->Baseline,
    ImageSize->550]}],
  BaselinePosition->Baseline,
  ImageSize->550]], "Input",
 CellChangeTimes->{3.8601377565618706`*^9, 
  3.8601378373777256`*^9},ExpressionUUID->"791ca3cf-956e-4d43-ba67-\
39f725ce687a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["C", "Subsection",
 CellChangeTimes->{
  3.8599253980003395`*^9},ExpressionUUID->"295fb6f7-b42d-4e68-a264-\
fa289aae500e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"S", ".", 
   RowBox[{"MatrixPower", "[", 
    RowBox[{"J", ",", "n"}], "]"}], ".", 
   RowBox[{"Inverse", "[", "S", "]"}], ".", 
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], "}"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8598803679759045`*^9, 3.859880384774538*^9}, {
  3.859880454288036*^9, 3.859880470725916*^9}, {3.8598805061031556`*^9, 
  3.8598805217404146`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"cc40ee84-3409-4d20-b348-8b2c00dbf091"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{"-", 
        SuperscriptBox["2", 
         RowBox[{"1", "+", "n"}]]}], "+", 
       SuperscriptBox["3", 
        RowBox[{"1", "+", "n"}]]}]},
     {
      RowBox[{
       RowBox[{"-", 
        SuperscriptBox["2", "n"]}], "+", 
       SuperscriptBox["3", "n"]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8598805229694138`*^9, 3.8599251782479353`*^9},
 CellLabel->
  "Out[33]//MatrixForm=",ExpressionUUID->"d97a0b11-d2f8-4d4e-9326-\
ce847142af00"]
}, Open  ]],

Cell[TextData[StyleBox["Result:",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{
  3.8599253253370895`*^9},ExpressionUUID->"62cb2fc3-8f48-466b-9765-\
64c5decbac17"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "n_", "]"}], " ", "=", 
  RowBox[{
   RowBox[{"-", 
    SuperscriptBox["2", "n"]}], "+", 
   SuperscriptBox["3", "n"]}]}]], "Input",
 CellChangeTimes->{{3.8598817568746476`*^9, 3.85988178966041*^9}, 
   3.859881848334915*^9, {3.8599251985263944`*^9, 3.8599252004289517`*^9}, 
   3.859925434498977*^9},
 CellLabel->"In[41]:=",ExpressionUUID->"6e0e01b8-795a-4165-8ebc-64c73f0af16c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox["2", "n"]}], "+", 
  SuperscriptBox["3", "n"]}]], "Output",
 CellChangeTimes->{
  3.859881763266604*^9, {3.859881823379332*^9, 3.8598818510903883`*^9}, 
   3.8599252015673733`*^9, 3.859925435905282*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"31efe28f-4f8d-486b-97ea-239226ce7d2e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"N", "[", 
  RowBox[{"f", "[", "2", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"N", "[", 
  RowBox[{"f", "[", "3", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"N", "[", 
  RowBox[{"f", "[", "4", "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8598817707157383`*^9, 3.859881771656083*^9}, {
  3.8598818261070566`*^9, 3.8598818602059326`*^9}, {3.859924388467491*^9, 
  3.859924388731057*^9}, {3.8599252071911254`*^9, 3.859925207791464*^9}, {
  3.8599254037298665`*^9, 3.859925410916012*^9}, {3.8599254467155113`*^9, 
  3.859925449206801*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"b4f9627f-145e-4896-aa0c-09865562140f"],

Cell[BoxData["5.`"], "Output",
 CellChangeTimes->{
  3.859881772430316*^9, {3.859881829559515*^9, 3.8598818605351863`*^9}, 
   3.859924389303265*^9, {3.859925204304533*^9, 3.8599252085539904`*^9}, {
   3.8599254088119774`*^9, 3.8599254499145727`*^9}},
 CellLabel->"Out[46]=",ExpressionUUID->"c38bd2ac-7320-4159-ad67-26259393b5bd"],

Cell[BoxData["19.`"], "Output",
 CellChangeTimes->{
  3.859881772430316*^9, {3.859881829559515*^9, 3.8598818605351863`*^9}, 
   3.859924389303265*^9, {3.859925204304533*^9, 3.8599252085539904`*^9}, {
   3.8599254088119774`*^9, 3.859925449916561*^9}},
 CellLabel->"Out[47]=",ExpressionUUID->"f555dbbf-e768-49e7-8e78-50319c3cf439"],

Cell[BoxData["65.`"], "Output",
 CellChangeTimes->{
  3.859881772430316*^9, {3.859881829559515*^9, 3.8598818605351863`*^9}, 
   3.859924389303265*^9, {3.859925204304533*^9, 3.8599252085539904`*^9}, {
   3.8599254088119774`*^9, 3.859925449917564*^9}},
 CellLabel->"Out[48]=",ExpressionUUID->"4be8d9a1-6c7b-4450-8b15-31eda11a626d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["3. Matrices of Graphs", "Section",
 CellChangeTimes->{3.859925491807459*^9, 
  3.860097639087145*^9},ExpressionUUID->"8f4e43e4-44a3-44d1-9fbf-\
0a3f46528203"],

Cell[CellGroupData[{

Cell["\<\
A. The trace of a matrix, tr(A), is the sum of all the entries on the main \
diagonal. Explain\
\>", "Subsection",
 CellChangeTimes->{
  3.86009728903461*^9, {3.860100214489003*^9, 
   3.860100219737318*^9}},ExpressionUUID->"4f2313db-2385-4426-910b-\
410cb7ff7d33"],

Cell[CellGroupData[{

Cell["1) tr(A) = 0", "Subsubsection",
 CellChangeTimes->{{3.860097305175799*^9, 3.8600973065794764`*^9}, {
  3.860097586589213*^9, 
  3.8600975879245777`*^9}},ExpressionUUID->"62fa6ffe-808b-4b24-a468-\
00796bedd784"],

Cell["\<\
In A, point to point itself with one step no need to depend on other points, \
and they cannot go to other point and come back, that will be 2 steps. So in \
the diagonal of matrix, all the numbers are 0, so the sum of them are 0\
\>", "Text",
 CellChangeTimes->{{3.860097276409767*^9, 3.8600972772056303`*^9}, {
  3.8600973874445486`*^9, 3.860097392764852*^9}, {3.860097427933956*^9, 
  3.860097564260654*^9}},ExpressionUUID->"ebdf6ba5-d037-495e-97c2-\
89ba6e847270"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "2) ",
 Cell[BoxData[
  FormBox[
   RowBox[{"tr", "(", "A"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "7c16168a-de17-41aa-b3d5-2610765d093c"],
 "^2) = 2 \[Times] the number of edges of the graph"
}], "Subsubsection",
 CellChangeTimes->{{3.860097575129403*^9, 
  3.860097619107871*^9}},ExpressionUUID->"3a418828-c306-47e3-bf50-\
8aa4bff38fb8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"0", "1", "0", "1"},
      {"1", "0", "2", "1"},
      {"0", "2", "0", "0"},
      {"1", "1", "0", "0"}
     }], "\[NoBreak]", ")"}], ".", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"0", "1", "0", "1"},
      {"1", "0", "2", "1"},
      {"0", "2", "0", "0"},
      {"1", "1", "0", "0"}
     }], "\[NoBreak]", ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8601162826533403`*^9, 3.860116350718732*^9}, 
   3.860116430732069*^9},
 CellLabel->"In[66]:=",ExpressionUUID->"7dcfd81c-d837-410f-82a4-d16c75adfeb1"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"2", "1", "2", "1"},
     {"1", "6", "0", "1"},
     {"2", "0", "4", "2"},
     {"1", "1", "2", "2"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.860116330057888*^9, 3.860116431247328*^9},
 CellLabel->
  "Out[66]//MatrixForm=",ExpressionUUID->"d56087ac-8533-46ee-a936-\
3a0f8574d2fc"]
}, Open  ]],

Cell[TextData[{
 "In A^2, two points and one edge can make a line. We set up point A and \
point B and they have relationship\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
cvm6tas3rF+7ZfPGrVs2bd+2ZeeObbt2bt+9a4cgqpJ9e3cL+/ftObB/78ED
+4RDB/cfPnRAOHL44G9HDolHQXlHEJ8KYjIxvZhLzLt3zy6xHGWBYsk7tm8V
K9q8aYNYqVi1KIAohiiMKJIo2OxZM0Qhp0yeOGH8WFHmUUkjhg9LHDJ44MD4
/v1/jesb27v3Lz16dOvaObpTRLjY3GCx1f42P9+2Pl6e7soOIdEEtCbiHy3+
6eLgsG3r5kUL54tQlv84AAANy17dKkJ0bZbpU1lJSHDH48d+U1s0KTfQiRid
2hktUh2aatR13nrN1SJIbU5a2ZY66DvIiW6F6v5RTW2Bajz2ent5iBOon8ND
u8d06f9r3NDEhHFjR8+YPlWcWK1etWL7ti0HD+w7dfL45Uu/37l98/HD+y+f
Z2RnZRYX5ht2yuckbatX7ZuK+izZ3lpqu9jaTl8q9kjuR7Fn3r159eLZ0/S0
Rw8f3BN77OqVS+fOnj529Mj+fXvEzly/bo2oN8Wp6/RpU8aPSx45YmjCoPh+
cbE9e8REdYr4MSRYfBdtfLycqTFrnqbx/2K1GLzPyb+GgyW0siNGM1b/gK0V
hHzt/NoeOrhfO8xN7scPMV2jTS8YAABfAxFNa1suXbxwTry5aeN6tV4WdbR4
f/SokaYXFXDAXocwrYlpp6V2FlttCLB6b1edv7KGus2q/j1Cy91TO9iZNWWc
vDwrckeRET/90qt7wqD4cWNHz5k9c9XK5Tt3bDt29MiVyxdT/7zzPONJdlZm
WUlRrRJBtc3VGI5G2iBZqQbJDv2tue/bmU+llzUmsupT8qKCvA/v34mv6eH9
1Fs3Uy7+fv7UyePizFd8iRvWr12+bMm8ubOnTJ44JjkpcUjCr3F9enTrGtUp
IiS4Y0B7W9s23o5+hI67T28yTg5KWKcl1P9mxi/z1qov6GaVDXOy53ztE31n
+A6ONjX2ZtYSVW5UTNfoN69e6I8Gr148q+MPAwAAOC06KlKKvUeOGNo5utON
lGtS1Tx/3hzTSwvYVT20lhMXmhMW5XTMoB9jw4DczhDqjjMS9Rww3Zmsi2G/
yjWuV78V+mG8HIwR77i0zo8yr3+s7b5yMK92oxyMZ+3M7rW3fOe/HT0Pd9eA
9raI8DAlfTRh/Nh5c2evX7dm755dp04eT7l+9eGDe5lvX5cUFeizFuo7+ryK
dmLxqTKBfjLHM+rf1GeZDPNOysUI/ZvaKR0Uxl4iyPB9w5ySUqpaZajUayuG
n2rLoD7Xz2K41fpN0JbZcI2GuS9lo4oL8z+8f/fyeYb4Ydy+dePSxQsnTxw7
eGDf9m1b1q1dvWTxwtmzZohf0YjhifED+okflZKnau9v8/bycPBTdNxzuzP/
0Bq7dv/CqG+uzwdh/Wm+04lru2upD4uL2zd2ilQTd0u91+4cR9+pUVaqzger
Fi2ma3Rhfq69P2lkxE/aXWR6aQEAaH3mzpmlrX/zcz8umD9XGntOqak3blhn
emkBQwYJJaPsULXpNckop5rT2Dv90fdpbNWcT+nmEpOJE0Dftj4227eBAf5B
QYHirFDpGyc6KrJL56juMV169oiJ7d2zb2zvX+P6DOgfN2jggMEJA4cmJgwb
OmTkiKGjR40ck5w0buxoYfy45IkTxk2aOF6YMnni1CmThOnTpggzpk8VZs6Y
Js5DFbNmTlep74hpxMRiLjH75EkTxBmrWGzy6CSxouHDEsVKxaoHxvcXJRFF
Ujq3EUX9UdO5jaeHm7zhWvZ3o+WbL3up5p1vOGa99E5tb+GRymz4o9JvjrRq
i4vYA2JXiO9R7Byxl8QeGztm1JzZM1evWqG0Prp08ULq3T9ePs8QB1gHWR0p
4aBPVihTGuZb1LvVlPellIiUKnE+D2OYvdGmQf75+1ONC5GeSzfWOUjCSHfh
adcr7Y2/NRkwx+2XpImVyk5fBnW71AIY5rK0e7vGPWDva5U2Tb+x9vakvQ1U
JygvLc79+OHNqxdpjx7cuX1TSVLt37dny+aNq1Yunz9vjvjLJ40cLo4w4ncr
Dj7iQBTQ3tbGx8vgtjg7GXi7f3PD1jIOGkZWPflycNYeHKo/OlMdODr42zmG
O1hgPZtc1ou2LnO8PzV7SWrfK++B6vvWhI1qZJ0iw8UvX/3D6v+GI4YnVtuT
AACgoZ0+dUIbneZkZ9k7QTiwf6/ppQXsspNZshefO9WQpnrLKPHo59smKCgw
MuKnnj1i+v8aN3xY4oTxY2fPmrFs6eJ1a1dv37ZF/E2OH/vtwvmzKdeupN79
Q5zfPc948u7Nq+yszML83NLiQntn1tpzasdtLRyfdTo+ta+xSYa+dx39QpTo
XaFG8mLT8sThI/PtqxfP0tMe3U+9e/vWjatXLp0/d0ac2x4+dGDP7p1i/2za
uH7N6pUrli9duGDe3DmzZkyfqmS3lNTWsKFDhgwe+J/Kfpv7xcX2ie31S6/u
Ylf36Na1W9fO4kQ4qlPEvyMjxEmE8HN4qBAW+oMQGhL8Y6WQ4I4/BAcFd/zu
+6AOgviyBOW5eFN8JIjJxPRiXrEQsUCx2Jiu0WIVvX/pIVYq1i7KIAozJjlp
0sTxooSinKLAGzesE5vw25FD586eFl+u2MBnT9PF9qrfqWFCRt9hkZRKMswk
SAuUvjXDr0/KtzjZkKbGT/XZFeV5WUlRUUGeIM7mBPHFi13x9vXL1y+fK148
eyr2j5DxJE14mv5Y/CoU4k8hPH54X0u883mCxw/Fo5hFzCv+O2I5L59niB+V
sljxVxIrEqsTvzWxXvGfKi7MF1+BssmGWS/Df5O9M1A1haXP+DnIudVqrxp+
j/ZWoc+n6afXb4j0vetJe8CwAVtBXk7m29fiW0j9807K9aviZ3/0t8PiL7B5
04ZVK5cvmD93+rQp48aOFsdA8ZcRf9XuMV3EfzMsNET842y2b328PZ1p6qk9
Plc7OOuOvTUkpe3ktJ1JI9Q8jS5v1pSMG27ps0naCyj6zJLRbnGUZWqZ2Sdl
u8TPTxw0tL9nfTI2cUhCi95SAACaPxFJGkan0omGeHLm9EnTSwsYcnx7iOPz
COVWpp/DQ3v17Kb0hDN3zqw1q1eKU6rjx35Te8IRZ7Wfykrs3dQjcXBW6OC2
IMO0gL0mLnXrNkffmsKZ5h+GM+q3yN7E+hkNy2B4z5HjDanDt+C4nIY7xF7L
E8Nbw+y9U6s2RY53RY1fvTbzILVpEb/n06dOHD50YNfO7RvWr12xfKn4tU+d
Mil5dNKwoUPE739A/7g+sb169ohRmq6FhgT/EBz0XeC/2vtXdBnk5ekh/i+1
/YtJEzjIP9TqJkfpfTdXq7ubVZRQlNPPt42/zU9qMSi2SMkoxvbu+Wtcn4Hx
/cXJ5sgRQ9UB9cSuWLxowfJlS8Tff/OmDTu2b923d7fYV6dOHr944VzK9at3
79wWu1Gcw2Zlvi3IyxH71sm/W43fndQgTT+LYbLRQXMpewcQJ48bhj9d/ac1
Hi6U/PP7d2/EThO7ThxLb9+6cf3q5Yu/nxcRxbGjRw4d3L93zy6xq8UOX79u
zepVK5YtXbxwwbw5s2dOmzp58qQJytCBQxMTBg0cED+gn/jixO9TfIPiJyq+
TfGddooMDw8LFT/U4I7fBXUIEAdzm+3bdn5tfdv6tPHx8vJ0F79Y8cMQP4/6
1C+mt3upxS3G9lqj6VuEtq72POoxJOXaFekHWVyY//HDe+07/eJiTS8wAACt
klIjfx/UwfGpijakvJFyreY7XIAm5/g3Kc44xGmmODEZPixxxvSp4sx6545t
J08cu3nj+tP0x+Ic3JnTLv3/om6czw7VLY/U4BtS42T2stN1K1KDb7UzZ9aG
LVXsbY4zCS5pxhrbpznYjfobxwrzc1+/fH7/3p9XLl88fuy3Pbt3itPzxYsW
TJ82ZfSokeJk/Jde3f8dWdFLjzjd9vL0cOag7eA82t59RrW+/6ghmg3U4aan
+h9AHE/v6eEmjjDfBf4rNCRY7PbuMV3i+sYmDIoflTRiyuSJc2bPXLpkkfiC
du3cfujgfnHYuXzp99u3biij/n14/66oIM/wZ+Agg6T/WdY5Ien8T9HBP8Lx
jIZ58vpzJh1t2FBQeb+8tLispKi0uFAoLswXCgvzxXdRUCm/qOJR/NEMFVRN
pqfMWFDZ0k95bBDFlWUTq87P/ai2Hnzz6oX4CWU8SRO/pfupd0V4dvHCuRPH
jx7Yv3frlk0rVywTv70J48cOTUzoFxfbObpTUFCg0meXvd98qwntRC0v/VDF
d/2f+P5vX7/U/jBEVGB6UQEAaMWGDR3iZFynnAN+aWwMNA8iPLa1842M+OnX
uD7jxo4WZ9w7tm89e+ZU6t0/RCiujMZVz+xQPc+SHN8+00LVYW80duqsMTi4
VUranPp8oeK0V5w8pqc9un3rxrmzpw8d3L9l88bly5aIM6bk0UkD4/v37BET
HhYa0N6mtCaqz0mis1PWqrerOq+l2bLXw1gjcHO1tm3jHRjYPjQkODoq8pde
3Qf0jxuamDB2zKjp06YsXDBv9aoV4vewb+9u5Z7cGynX7qfezXiSlvn2dUFe
To3pHXu/agfT1PYOwYbVGAcKe+VviQel+igqyHv14tmdP26J48zePbvET2vW
zOmjkkb0i4uN6hQhfoQVR5jqPQqa/2esjfb+trycbGmrp06Z1M6vrfRdq2m3
FreNAAC0COKsvFZRSu7HD4EB/tzS3so5/H6darFfG072oSF+eF27RA1OGDht
6uQ1q1cePnTg+tXLzzOeFBfm13g24eRJRxOocdX28hjNXMsqbdP4VFaSnZX5
7Gn6nds3L144J36x27ZuXrli2cwZ00aPGhk/oF+3rp1Dgjv6+bYx/y+PlqX6
kdbH21McHkNDgpW+6AfG9x+VNGLypAnz5s4Wv7fNmzbs27v7xPGjF38/rzSm
evPqhTgZV4f8qP+ft2GPqPZ6kKtVY8LGKFjzVLevz8FO/vjhffrjhynXrpw6
eXzP7p3r1q6eP2/OuLGjxe+qe0yXsNCQwMD2Fd3F2/lxOr77tW4pced7LBcF
lnZLWUnR9GlTRgxP1G7pi2dPnVy1QZlp2A8AgKHqlfX+fXschyL6GEZEreZv
BWqjFn07VE3g6BYVh32iGgaEDqJE6aN2fm3/HRkhAlo1m3Qj5drL5xlSXyj1
P32oVR9HjpskKTdeKT3hKH3n3k+9e+tmyqWLF86cPnn0t8PiX7Zr5/Ytmzeu
X7dmxfKlixctUDvBHj8uOXl0koiBhwyuGNltQP+4X+P69I3trfSA3a1r565d
oqKjIpWOr0Mre7oOCgr8LvBf4ryyvb/N3+Zns32rdEji59vGt62PQpwFeHt5
iNNP8ejlKbhreXq4CcpzMYGYWMwilmBr5ysWVdGzTWD7oA4BYl0/hgSHhf6g
DIcX0zVaFEmULX5Av4RB8cOHJYqST5wwTsTw4nx2yeKFq1et2Lhh3fZtW8RZ
7ZHDB0+eOHbh/NnrVy/fuX3z/r0/09MevXrxTOyfnOyswvxcEfw77ubF8IYX
w3th9Df52jsR03av5PiblRYiSqvt5ujypd/FKZgyvrz4lSpDdymDy4tdJL4s
8R2JXWrwg9fddMYJC+rM+LhavSdt/afal+LvL44kYaEh4jjTJ7aXesef+Emv
Wrlc1PV79+wSRzDxR75547r4Fz/PeJKV+Va53c/J7qeM/91lFcfMf8o/v/w/
n5w9nus7RnMwpb2/s70/futmeA+jM1+Z9u5d7V3G4nleTrY4qj+8n5py7Yr4
kYijojjyi+P/tq2bN6xfK2qE5cuWLFu6WFR5CxfMWzB/rvhdibpPIWoNlXhf
UCZQiZdaixbOFwtRlqM80RJviuWI1YmK2LD84nerfVMcuuW/kr0/mr3RSAEA
gB1KXSnO4msbrhTk5XAJvjWr3keo8U06Du+XkQeq1n3k4+0pTm36xvZOHp0k
QtBdO7efP3dGnMKLn5YayjruMtewd1xtnCz1ZGvv3MRB78052VnPnqbfvXP7
0sULx44eEYVcu2aViGaV0cD/E9//l17dozpF/BAc5G/z8/J0t3u7QVVuwXCw
aWeHT9Lt5NrO5Tx5pCd7KzLKN+rnMrgqrdl2sd+UTpsD2tuCggLFzgwL/SEi
PEw7Elyvnt1ie/cUZ8H94mIH9I8Te14YGN9fnBQPThgoDBk8MHFIwtDEz4YN
HSIMH5YojBhe8SheKh+JyQQxo6AMbBfXN1YsXDuk3c/hoRXZvA4BolSibKKE
ch/CDr47x+NSac797Q0OBTip4c92jfqLdrAWcRhv728Tf5ZOkeHdY7qIf6j4
T4n/2pjkJHGQnDN7pji2r1q5XEk+79+35+hvh8+cPnnx9/Mp167cvn3zfurd
tLRHz549zXz7+v2HzPzcj8WF+cqdzvp+yOvQlslegqU+i2okzvQ3Zbg5jqfR
Vnz2ajp9BarvFE5Pe+ullOf/r/0RNmu1IfpRM2r84mpsDKzNks2cMe1zo6xa
NU/icA0AgHNE9aodcs5JoqaeMX2q6YVHfRg3Sq9xMGgHIZku+eDh7vp9UAdx
Cj9yxND58+Zs27r53NnTDx/cy8nOstfPrdTgxDDjpA0mnQmV9e8U5ue+ePZU
6aTiwP6969aunjtn1tgxoxIGxYvShoWG+Nv8pNyCcdZF08Sr2qjc1m/sJp30
izLa545eNlC/MfpckH70cPUdJ1OL8mRSQqay5NX2T02/OkcLt7MrHJ8yOJne
0X472okNvwh5Ynv7VrN26R8H1FPNP3vtj9/OLNX+F+q/VT9+mcroz16rA5S7
5XMx3Ktfm1BaWtps3wYGtheVSFjoD50iwztHdxLHZ2XEwL6xvfvFxcYP6Ddo
4IAhgwcOTawYOjB5dNKE8WOnTJ44bepkEaLMmjl9zuyZ4tiutIdZvGjBksUL
ly5ZtGzp4uXLlqxYvnTlimXCqpXLV69aIaxZvXLtmlUKUSmoz50n5qqD9evW
bFi/ViW9lGzetEHUpNu3bdm9a8e+vbsPHdx/7OiR06dOiLrs+tXL91PvPk1/
/O7NK7XnLrXi01+UcdyYU6p8DTv1steyVJvSkabRLkEduLPGpJC6KO0TPQch
q2ExxOP7d29upFwTu1T8bMTvSlT9ym+YSwAAANSNGnCKs2l78YYDonaWWh2j
Rfhyhmv/1ja7p9V23vFt6/NzeKjaC/fOHdvOnjklwt2szLeGQamDDjccJI4M
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
XWx6W71Mkj3VJxbUt3Z0MwDV+9F6Y03+u3TzdOnSDx180AHHfOrIU//l5LP/
9ayvXnzht791xY03/ODHd6566Oc/+9Wzz7z8+xddJ5dW87XWRTR9HKUf/P/+
3r+O5eQX8v7eLxOptxWLP7dqVnrZfrvu1w8/tNp1czv/vHNPPumEFYcerD/X
1JUwW/2jJw67bf/KAAAAdgOHHHzQexve8XvJFccq+qBl/G8HH3xgddRx2CcO
nfKodeW5Z0/dlKHZleNjBx/4vWu+88afXtdHbmedecacfyEAAMx/bt/qAk3b
VyxxyZIPhFO2RA9nbnCZFwKq5zy9GpjtbKLqSlYrr6nfy13s6P858KP6u/qX
U0768tlnff3Sr33n6m/f/B83/uTuux5+aPWza57+/Ysv/PXNP/9tbLQ3+ONi
OFUkZ/od3P5uJ/57vxlO+cL/3VrHmlqdhTdvev/Vl196+qkn9MJff9339Wf5
0llfPP64Y/Xh3LRCSdP+yfqPMZyq+dHO/BMAAADz2b7LP7L2V2v+pyfvWh/k
fPGM09w0+ojiG//+9ckPWfXLb7n5pnrO3oFf3+uVjSPYBVVrFACA+eCTh318
O0JMbpedJpGbSTHKzPYZ+dBeS5YtW/rRfZcffNABrrfIYZ84VL/LkZ887Oij
Pvmpo4845lNHVo495qjp+/SxR2vHHXuMpu8cf9yxJxx/7GeO/7S7PfEzx2sn
nXj8ySed8NmTTzzF+pdTTvrcqad8/nOnnPb5U79w+uf1MclZZ57x5bPPOm/l
Of/2lfMuuvDfLvv6JVde8c3vf++7N/zw+ttvu+Wen/znz1f/9OmnnvjNb55/
7ZXfr//vt/72t7H/8YoX9Y3ITRSma41um85L/sdLLvrfrePVrf+qVhml1qHX
ls2b3vjDa2vXPvvQgw/cduvN13z7Wxde8JXTTztVf/n6R1m8R3eiSuYTNa+f
8PJf35BRv/BdI77X874AAACT0AeB995ztz7CqY52xt5/Tx9tuiOKbp6+t+Gd
KQ9c9QHedDOaeiZoXznlSAYAgEkduP9Hty/Q9Lex0d+98F+vv/bKX9/88/vv
rh/fsnn6sZQpn50lffuJbNME2/cu2/qS3nIE1eMb3nn75d+/+Mwvn3zwgftu
veU/rr7qWxdfdMEZXzhNH4Pt/9F991y8yP2srdJSTm8JqYlMPc3kOWyTvKTv
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
RawJAAAAAABg2yQShBL8rpOM2vQeG+3J1wRZrDqu+rebLFY7OqzsE0paNcCv
0G8uwZ6hulql73tRppc7aRTObo0ml7z0SqdYHhfjuk6l1QQ7/nkBAAAAAAB2
Q4eZythJOXLNZBxdWI6bayU+7ciItjNVWM3fvddpXv3tpRLeoNJXR7JHVXag
SSzaGXGeG1RRo8ndrgts8XP3wUOZ7eF7AAAAAAAAC1o5HMyEcqqhYTeHjWZz
mwaTvWTSUWNqe8aUXaGSKmPKvdFh1fi4do+5nRBlMm/xGRWXlckTF2pbppLm
FwUAAAAAAIAJlJ3mfH+2/dds9zcTCHpYsvKpmQz4rBIX0smrjKal7fjSztZV
snEo8YNs56oiycrvxwcAAAAAAID+pFPHTyTY34xoKwqAbx4yt2dL7J6d2bFj
T6quC+ZUEa05HJtWvfWjqqhP7upHPVCOGSwCTXMdCgMAAAAAAJj/yhpEslJi
P6VHW27HzZkYy4wWSvrTSO5qbo8NmqjOH0eyGZz5dvtqWEeZtPcG06wYNhiU
USaqggMAAAAAAEymaOsmwb0qHy/qFJnbPw/nZXwpmMHWb10lLpLjokz6zppg
XgSaDpTILY8LgunbTzXrUyUkNQEAAAAAAEwlEZO29NZwWqb0mNyeO1XqQisz
O67tABW7SE7lPpkXgSbtjyNZuVS5dpFKvM9OOhMAAAAAAMBETOSkqtH0MRW1
4j8rywJNM+skSVzGlOs6NzaYXjs7b7QdVqvGN3CrpMVTMzpyEAAAAAAAYBfj
tVEzUZQLVOxKc1f2V7E/wUy5SCVjg414zgVqXgSaEgmvUY0qVU+qzK8HTrgJ
AAAAAACgr3JQWODiJz8KGlGmv4zks/S+N9qa236s6aSZKwC1Y1+FOqcZaHpr
OO2dBgAAAAAAABMIXAjl+SCrGq5pvyjrJkUzUQHbj9I8LFnVcs5VQzrI1COf
yy/BJXfp28MlbPXdW1p+fP2slwMGAAAAAACAvoJEgo1DmYv82HBT/gNJ3LMz
G12JJHxlpIjh6DcaM4P18j1kLvOF7FsXY+L2DFUr0HQkneYAAAAAAACmJwpF
JDhIFQW6y6Sm5NyibtL2VyWqIlR+qCoT2TxUj5vTd94eni8t57RYyRsjjUDT
+WXADQAAAAAAABPxk4i+qMQOZ6vDTUcHVSbPTFbAPkC1x6Y9E2QzMjpvhxUf
8wnpeouXf1dFdvGC+bGQAAAAAAAA85dLN7rGZDTlXoAlWexFonYwxuJnNH1W
RX6UaXwwuyuMZzaWtZ0LaT+jvv2pqQdefxU3qHRW3xcAAAAAAGAX87AkVSXw
8YH0jRlqOefG5fmPXBrErYymb9sxevOgzrbLWQruFj/glt9WDJ0LQjXnSwgA
AAAAADB/lTlLwesjJsq0ebCIsTymEhN1kZlJNPL7td2hEtdyrqoH9aW5zmhK
mh/zNmnkXN0tMxNzAwAAAAAA2B0kokYH60Fz+vYm8caLSeD3ZZu+vgPu1gZ+
vpApBv6JeZAp5Jerul7MN1BFw1YzdA4AAAAAAGAqSZlltEzC8apokr29QhrR
lZkY12biVJGEG4azVqBpsZr7r8J3tQ00VTG3x1TddU5mKMVr55jOrzYPRizu
mvzQZfFVl0XA5nzZsHsyf+zbuwVjvQWA3UHj6GVBHfQCAOaho4KwCjFpWwey
syXa8dnqvVUZxyhati0LpYgvDWQujPPnkWzOP37LldJsiqfm3RJuk1j1OU4g
6LGT6T+n+r/uyG2BH7/VIcryg1SrkztM1f/tE20jsDlH3FBo/09+8j9/99tt
Ry5rn9nq9/V+d2+/YKe393tXJyvwF8anN2vVzqXnVf0+xQL/cwOAnax3+9k6
dGSHDgCY0pkqbBXoPk7NQKDJsLunInVKgpNs+aPxMpdJ3z46P8I45f7ULK2X
0WQ8pRbN+eJtr+a5VXWqZc/77Ilnpz5gIOg0s6RI4YtCe0bsf9XFsZnscl+7
/WO3n6hvgKIdUsDO/Gmkk5h1rhOVW2N/gj4/ih0xXeZw9v8pe+M/Yb9fuc6k
0rcTBXzcnqKcoR8e90JeE0p6lt+Es9w50cRrHasiAPRlj4e9q0X9LgEAADCl
b6pGJ7jxgfSAmchoChtlwM2O6RIVbR6qyx9tHciul2RG3mgGlJfdV3ld58YH
s3vdEi7MC+L1l29OG+uPoM83kyK9YUF+rvmpGllZ5GyY//rXAeuvWj8bT7s0
mX+KrU+o9X/N7eyfI7t3cW83neltClNYfnCpY2j1iqefDaM6EoVZl3oDk8VV
21MS9uSbSSMEVMV83CYxaP2UE48gLp5NvF/fXQ2voj1+lLUPs4QuOmTzr8xp
TlgWCSximJXGaqnsilrHctvxWz/o1HicWBMANNlrZI0UZXHHkHZLu2tdIAMA
zK5bpRFl2jyU7hEE07mOPLneS8l32RiOy2VyLefOk1jvv/oO79p5pBEBeDho
JHfdHKbFmc5CizVFNkrg7if1bxGEZY5BstA+0Tznf+Huv/7ptj1yE3drHowm
zO4ohp555+bV6fncVAlrDn0K+20W/FyUZpAtaJ7js8rNuok22kmx/lRjzbzt
XnNFrQM7XjhamtvJsCePKCkfdO/irTPNjKZyg29DQ4X2bKXj8gAnGj1Xh5Im
yLmyOBsCgO0xSdpqWIT9Ay4YAQCm9LA0CnRvGKqHs81ILKI8ZQ6fa8ZwtKOC
eXMuUH7SXwd51YNvfDD7lkoaZ9kLNDjTEyso1ePp5n4hF6ZtONaqv+TtKsvc
JzNkFlXv0r+ItPQ/yOwbUNqRMtSYQVXwsxUUnfQljR/OD7nXoacql89GmfyM
pup9m/enWHvt4pmsJpfaNGFgs89TZSA9nGiL13wjLs0DQKU5irkvSi4AAKbv
xU5dlWjzUPpCkLYSM2bkXfQ8Nw41IlqbB/O9pE/BkLn1xxF/IfOVEhffwwLe
pTYu+mciezRzZuZ68XY1fSOTk18f9E00zRyEa8pElClXFT8LK+wNYsynP/Bd
XmOspZcsNMmP0tjg9xR1n+h3ryYITSabpErlgdLblsVKLQllbyksDcOlSpZK
6OyjjGVSW27/u1zEivStnkzvGpYotVgCPcOuEr3Vag6dq8dj9l02V/y8OSUA
YEfUG1XSmQAA0/H2cCP+85iasbpJfj2W/aRRcnxsMH1rOK8nnh+nonqBqxJS
zqlloGnBCtw514pQfizZn8sw2nNBtq/sjMSYXV51Yt6V4AP2HPkjEu0n8UFK
DpHwcBUdFYTHSHSCCk9W0edU9AUJz1Thl1W0UuLzJL5QooslvkTFl6tMu0Il
V0r6bRVfJYl2tSTfVZF2jYq/r+JrxbguTK6XRN/OCDfPXtWz12gq/o7EV0tk
JXrx9HJ+U8Vfl1Qv/IUq+YokK1Vyjoq/KMnnVXyiij6lwiNU+Akl+nvQf/tL
w3BxaMIFc/577fLqAbOiFgVqbxvAOUhF+rc4WsLPqPC0ID5Txfr3usj8iGZl
07/v9RLfKumdKr1XpQ9K+gvJHlfp0ypbGyS/DtIXO8mrney1TvbHkezNkVzv
MtYPZ+8OpRuHstHBYjT0TpHrd9Rv/dZw+sZI/vpI9krHLNu6wCzqQyq7R6W3
SfIDSfUf0SV6nZT4dJET7KroVsLu/NjRAMC85V+YODoI9fHJFWF8saRnS3S0
qGUSEWUCAExHHvrxH5PadI+audCKd1R/SrPkuPakbTk355lCfrBlme2L59Nn
KN7EC/UkRZ9wjfacDD4eJOGkGQvzR9+uWBP9KNWwmmnOfJFNn9An44eIOSE9
QcWnSfIlFV2g4sskvcqGdPTZ692SrlbpYyp7WiXPBdkLQfpKJ3tjONMn3e+Z
VL18vOyouB2q8KarXeafWe+sU/jZ02jjuGnIRJj/MJKtC7I1Kn1YsvtUukrS
G1R6tST6C9dfu/7y9ebiaBUdGpr8lr0kXDTt2ul9V4kp/3KTHdgKTbwFqx9v
rsD9U4kmWDD1AZFlEh6kIrdyni7xuSq+SCWXq+QaiW8MkztVer8kj6psjV0t
X+uYOIxNH61XHreC6bXLrWDTX1F7Vsh5x/8sdmnz5n/b0+u/1jdG8t8Fmd4B
3afMF/itMD1f4s+r+KjAxKP2nODX6VNL3LaV7Fm7ZnE3sV3b6oW62wIwJ9ym
LxO5W/pscscG002D2a872e0q1ceWi1Xjtdt0SF8drU20ZZtsblP2TgUAzLWl
jUCTcXM4K53grpR4bKBx2H/r/Gk5Z+n91GnS+jaSvWXBjy/T5036qEB/+eOD
qVGenb07lH5RomMk0uewSyXsKvFHSBUnUEUVlKCqHjzVV7H9JzU9c/YqGrkJ
WjGxqsJw+Yhe1A+K2jcMD5HwUzaD6AwV6wOhS0SfS5p40SrJ71fZo5I8H2Sv
jqT6fPz9IfNVjA1n4+2TVj/C0wiVbB7Mx9sTtMNB9rw+cXfG7R19ztsv8SNp
PVJOkzT/O+H0O4e/GFPGKMb730/sTJLWd+VCAfr7b2USjpuulP4LTeTkLzaD
5blO/rRKHlLZ3ZLfJpn+Wa8IzU98vsRnSfR5FZ2okqNFrwMmjceNw1oSilm9
24WDqiZl4peknjBE6Y2CrNZDW9c6aM65auhW/O3o28WhmGCmivZX4aFKjhE5
RZml1ct8qURXSfLDMDMrp40XrQ2SFzvJGyP5u16PzupXqH4L/RWNDmbVN9wb
Se63TvZZkSYKPY3ZzcUEa2B7PdTvvtWb20Qrz8TLM+Fk1QzL6f23TnrnMz5Y
T+Oeql443nxr70++WCfHhosHNw12Xx/JnlX5apXeYkOgX7GpekeoWG9eumXn
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
AAAAlOpkZuCqWJfj12aIukdlZZHSSFq3YPKlTTfpxIg6TsmmaFfz0PkbdnSa
h9fqFk91GPX6aP5cL/ulyu5SZqPKviPZ1Sq9SJK1Eq9Qyae0XqRkrtvUehCc
VO2Yhj7wbpQknVGEdP8GAAAAAADYS2agX1PYaru4xDUA982asrA3eOFelc1w
I9QukXjrWF6FRSaMmIZmSj5E2sP0KQi4hmrqrF4fzV8Zz57ppb/pmUej7EGV
3aPS28XcImnxKP5V0utVeq1Kv6ayK8RcopILlTlPxWepeLWKV6nkNDHLVXJi
pI8TfZToTyi9QGSu6DkixcNM1b5/sQAAAAAAAD7srlbJxMjwtOfJKJ3nGm4f
LJEdSdckSKYuf2rfJB9cyWDV00DoZAZvFW5Pcb9Dw6td51d7prXB20azLWPZ
K+P5872seOy/itIHlblHpbdJ+iPJbpLsBpVeL8kGMVdJcqkyFyqzTulVKlmh
kpNEH6vio0QvVnq+loNFZknZomoPB+h1RgI2/53q5sGseeHyg125Phjv7B6l
Fz60D35rAQAAAADA++Qcpd8asb3BJ5sEqRzg9sp4fnw1bG2N0q+Opb71dzvh
KZOit2wi1CRLYVjkVp7WfZyqZcpe4kOzpoEqKTN4j++Ef2imiqdMNbPe8MBq
F3VWzQN0WxWGYK2J+arFto1mm8eyP47nT/Wyx6P0IcnuUdkdKvW1WN9T5pti
rlbpxSo5TydnqHiZxEfr+DCb78lMFc6dVxqMZcpwqVqy0yndzdA3ZZLTNFEP
Vj54p1OJXZv3egq/qTY1HO2YqNa2tZa3//WjO2mfBQAAAADAh9WJkX7Vjo/L
qzof40bJ2RTlrZHsfJX6xeZqfbfYiefKQiO3pE9UitOto+n5rtf32WK+Lskt
kjwk2cvjeRXp1KflvbhYpjwfxjWT7r/1aL7B0qNgO/N2KNQtqapXO9n8198q
vPd6Y0yn/qpVxDWSta/tLhwaWmrVdEpvF2gV27Z9xF7oTwdXvmUse2k8e7KX
u5Aq/Q+V3uCe4UskPlfiM9yQwCVKDlVqRllD1Wu/vrZHeqLshaaeZa+e+E9a
/21Pw9epyHJz9jVT9ZWXDOmyXkVMLl/SLoPS4fpd1mTbs9uQqpU1ReGkgQAA
AAAA4EPHH9QvEPVUZCZd5OJrlnzosWPEpjE3qNxEZfhwThRvGSvrkd52s8s1
ZTxj2aUqMc2scJERbXR0qMTHKTlTxZcrc51KbnYdlh5T5sXxdNuoqSqLTN36
qcqOmqv8tdtd5VWnoim4ZLDSqalc6lQ0+Uqq6rScYq94yD4jqnIe+9i32/P5
RJkC+Q0on5Z2tGXKlCzIvsqFR32gZNwoxb47zf38fZPV4y0emr13tyWT03zu
VKZbLtPrF6dvT8t8yldwz7ypg0G/ScU63xpNXxnvPxWlj0T9e1R2i+Tflexr
Kr5IzFkqXi7mGJFPSHyQ1pmUIU+V6ujOW6JOe8LYp5wNUIlr8+Uvl1b6FPZg
1+IzJS29ekyfP2OaHu9Rvf5E2VW5eIqKJgAAAAAAPsRireeIflh1S24my1gj
fVjyuUpctiALJXkiylyyNGSU2Q0qTVQk1ZpNlVqYdk+hOl7IRM/V+ogoOTFK
VklyrjKXKPN119/7h5L+WJm7lHkwyh+Nst9F/ed6tkpqy1i2fWS6r1CanBbW
Yrm8qIy/wjKqtLoqbBuV13VTLljzV5m6nqp+HmwSVY0ZnLTPRlbHVlXsU5VO
uVDIL+bONxnUjpE8GG1XZ2h2k+xVPoAKki6fNU2MtSqp/Hl7+Ui5hroOarKs
Q/M92/P62jpPcxFimdT5LXx91PxprP/bKHlAZT/WyY2SXq2SL4tZK7JcxceK
LFJqjojRUfnaSaSDFNHHQeFQuGKB8FWWqktVp+VUFTpFRqLBiqaBMicAAAAA
APAh0oyEykQ2qrKyqJOlFP99eTw/SexIqEIm+nsqsZFL00DJ1JHLfyvTV0mx
mK9O8bmBETd0y6sGZwUNeZoLq9FYUesqtza/wnIBZRtuzxAbhsyzXbijxUov
0XK0khOVnKTiU5WsUMlKkVUqWSPxWZJ8QeILdXKxitfbzkjJNdpWWF0v8Q90
ulFlt0p2uyQ/jcyDyjwaJU/28ufGsz+P5VvG+ttG+0GRUj44Pi6MsCarsK7T
tcnXTdVPb32TyaqqaqJqclVGUq5sqSyIqlKv7UG1VX25u9VUIw3D0Xx1Fpf7
RM4lTnl7mTQM7vyFW8ay53r9R6OseHJuVtm3lPmKSs5X6Wliiud5iYrniu6r
IEh00xp69YV1LVP13yFpUlwFWUNH5AEAAAAAgA+FuBzlZM9fqoxPMybGssl2
cFFcfo02qVI+Ajpdxa65U2eYmE2cnlBmtgrX3x2fpcPmz922Qu9w48sgqyyd
qnOt3RbG+DZBwSWRa53tqm7Koh0VZmKZyAxRB4ssEFmi4uNEL5NkpU2xzDqV
XKCSiyS5TJKrdLZB0m8rc4NKbxJTFmWp/BGVbopyX5S1ecy8NZp3sqBO+6ZO
Z3U/qjGosxocJ9hpUV5f0s2d6ptMtvIl017VYE7Vud+yhqq+ZOtY9mwvezSy
QyM3umGS61V8vkrPVPFSpQ9Xeq6S6f4FCqfka8+sFyRR+/5zAQAAAAAA9o4f
suTDmWViE6SBKMMHI+aXKptfZTjFmU1RN+7wCz8dpfMHop5dT4LWInvbqGev
b2hFInu2ee/Jc+4KgQ4WOUz0cZIss8294/Ps4MHkKsmvFfM9ZTbaWerMAyp7
IrIxzuaxrErzzMBzPqWB2QCDWrVqvN57JYi5hm/YG6PZi+NZ8bZ5UGX/pdLv
S7pBzBViviDJKpWcrNRRIvO1zGIAHQAAAAAAfyvmi/51lLWjg8bWsfxCSXwq
NUPUXZK222iXXhzPDmv1lK568ryrLOijy7fdLp7DA0WKF+hIJSeJXqWS81R8
qTIbxNZQ3SLpPSp9NMqejNKXx9NtIwPJ0ruNkvLdrqdzVT2QsDuvXzebSutW
6nUv+s2uSuqJKLtfpbeLuUmy72jzNWWKx1s86jNVvEzio5VeKHHxnOyiCKoa
xzfFG6/9hqyy0F29S995I6khAebQ0DVY83vwMemMQ6RgDAAAAADwwfOHupnI
zWowRjBVF+70AZUtdPU/xfIbxFRdqZv0wHd2Otx27xE9xbE5B7x78dIMfSbD
Od3cJZGpksAylXLJjEul0q9L+l1JfCr1mMqf6aWvjXX6Sg2fxW+ydbkJRurt
rtIpOBPOx7ezu8LO6eAgwTToW2WqNlblZrw+mr80nj0dpY+o7Odii8E2quy7
YjZIul7M+a5b1wqVHCd6sdJzRc9U7SfTJU5Dnl6X74WXD33fDgZHg73Nw1ew
lb7W99ukXuLHnLbGeO4upN2TD1RrokAAAAAAAD4QPrhYK/Ffx8JuQnkYHbwx
ml2tkkzsFPafk7j4bzVfm6njplfG8yMkabc8wrsWNFoPLglevoG0pI4g6pzB
2CijnkjOTiF3iNKHif6U1itUUrz0F0pylY2kzC2S36uyX0Xp8+P915t2UvUc
f9bb5fm8mrmvSYTqufyqd05et1UfTJCKy7e7vui+t/xk2SB9irjJ3enEaL/O
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
+YpKNqjkJsnukP7DKvt9lG0e67s2U/0qv82DCqU6zs3rfMl/6Drz5fl8qboq
r0e/7hjpdimfLPtKNa2lgh5TeXBtf7IaoPebKH9AzEaVfVuZy1VytsTLJD5c
4gNcEmVbwZfPW695Vt2XSfXsDZ7pPOfDW5C5hvNNPZX/MqnOD6+z8hGTSBS3
Y6h2K7OgKRkAAAAA4H00eBhojwHn6/gWsWmSO561JRkTI81E84PTyhen3yoO
+GxcReUA9iNBs/QgUCreqHUi4TqfD87xZ4pFJKh3kl4Vj+gwa6rvpVinnzMu
btp0u+Xd1H7lkkEOk4nMFXW00p9R+hylrxDzbZVsVOZelT4emRfHs22jvsO5
m0SvzJqMT5bq3GmySpZsRlTWLJmwJspfu70qZwqKnZrJ+OraqokRt/KRPCyd
mmwVU9lAbPtI9vJ4/mQvf1Alt6v0u5J9TZmLJFml46UqWSjxrGpQXhyc6b40
aiBHKmO9akCfEvtM2lPxFU1le/wgSkpUVGd99WJ1cuizpup153sJAAAAAN53
bmCLHnreT17/CYn/SyWdNuA2cSprKspu4X5kUHGIeoGKje5OZAbsH3wQNDA1
Wxl01IOwykobkSh1eVQZaGhdlTC5rKkKLmI/kV8whkuXMwCW14q4u1OtOw3H
lFXbU3dM0mWWpfVsLYtVskySs8Wst0mUuUXy+yTfFOUvj+dv2arCfvjZrEuk
fIXSRDkM1hQL7KLNlI+SqkDJ1HVTQcmii6HGsskgsPLT+W0faYqjJso42n4V
vD5qXhjPHuuZn7r07FqJL4vis0ROVXKEiuaKTtsVTfWLItUzWadMrpDMPsMm
qGiqysxsjlS/XmFFUxVA9VrTLDIrHwAAAAC8z8ICgPrUVXGUlRjFf48SuU+y
qojCTAw0cZqsBuBsG82W2UNDigew3xk6WV5VRdNd2F8uVVXM4HoC7oOjpLx8
4M1fRSLRYPqaqF73Ju3AavBOw3spNvLAKPqE0idLvFaSS5XZoJKbVfwzZX7X
S/80nrfbNDUVTUGrqKYIqrgwyJCbiiaXHfUHb+hH0brl8/raap6+PJjFMq+H
8rXvN98ylj3Tyx9V+d2S3iRmg5jLtTlbzEpljlb60EhPr56QVo+mgZdJS5NZ
DUZJQxtMAQAAAADeL1UZQNjHu57C3p/37XlXKO2mpSs7NZWzujdlEjaAKi4s
Dh6X2JFJ+/pxAbvQyny6wU7dz8cP1wr6/PjIYiC18HlUPeZOht1XeBpoVfVM
Ncpsl4akZGUVkEuiRBYpOTHSq1VyoSRXq+QGld+hzP+o/Jme/bS24+Jhzcb9
uLnyk97tXl71OR9kpjjfNTEy5WLFxrw+mj7Xyx638+hlt0p2vXsIF0my1vWM
Okr0PFEzyic/CsvSmiekVUtGpSUAAAAAfAC6DWfadD1WpfDPtk94Fhwhdo8N
iwtfHM/mCENUsH/pBDJDS5tKu4yDprrk3Rpso+2Gfcn7PAp1upIFIscqWamS
81S8XsfX2bKo7B6VPhrZz/Kbo2YXw+6GjMJr5c9Drh0aZ3WEtU8TU2ZZTTxV
fCm9PJ5vitJfqPR2lX5f0m+4HuznKn26ik+K9BIl85Se8Z6/agAAAACAvVUf
iR8hyVO9XZUoFB5WWRZkTVMNUAKwnwp6bs8SWSjqJNFrxFyi4g1ivi+JL4t6
MkpfHdujDKqTIO02awon3dttWdTUK8wHb/7KePZULyu+o+5S5bR6V4i5UJnV
th2WrZI6VKmPDS0tmzr0833gOxcGkxI2t911n6hdfEnu6ffn1NV6DCEE3mut
j5hpfcTaXwjS/TAO/TzGQRfBvespF94qvItOTzy+DQAAwH6jmstJ675Ed0k4
hXo5y5WfD8tXINyoTdV8ZnjbGQAfLnUL7nCePn/5IUofLrJM4nUquUQl14rZ
qIwvi3q2l78x2q9To2rWvLIxVKdyqW5FvnN4ZZTvEdcJnXwDc9MJlOr/Tg65
Kh9adlUPCp6YZs+8OpY+1TMPq+xOMT+UtHhQl+rkHJWsUPoYkfniS6QGBuv5
/wbHla0DRlVOsbcnB3p1f3g/O8OQtQWX1P3n6yLVYAHthoJyaAm898IGgIOT
TdTnh3wAh1TP7uJD2v1c12sIBm4P39dyzQYj9zWyq452AAAA+5KU3Y+Lw66d
0+rJ0JvcqT5UPDFipifgQ873OJLgGKcp0Qkn2quvbbVDr6t6Zrh+Sm6MnjlH
6fVifBh1t6SPKNsV3DWMyoMypPA0rabSc4GVPfX9xvPqfB1PNcvvtC2kMpcy
lavyX1YTNvUyVXepMDC3+VKxku0j4aR74crDTCz3odlbI/0Xe9lvetm9Kr1F
0utsfVR8dhSvUMkSJQeL2Jbvdl7CXvVE+aZeUTVZYfCU1pl8ddWwMZvNMj6t
Cg5yy5X449mhXeuDMGpfv6+AD6UpfjUbnvCE1YxR8DHf1fr9Z9k0NaVRfdr+
dq0jo+CrWMqpOU05larS9VQU0mvVSjE1MAAA2M/4fRV/ulbr1+3Rn/HTqYfj
XIpLfi5ZcEP2aoAPn6Hz5bk0o5kMzl8y7Lbld0UcHPX4Y6ihA8GMjuYqWaJs
ZdRZoi9W5uuib1Dpj5V5QGVPRMb1jCprkybG6szHFke9PS3bPmKqIMj4q94u
B+slVXBUlzblb49W5VUjuZ8sr1CsJJxEr164SpZyW1IV9IyaLOOv3C/svwZ9
nLXd3nvf51quf1R+n+S3Sv86ZS6TdI3EJ6l4gcR+iLF7isqiozoF8jmS/a+r
HzNVL3ofLhVLmnYe5VZiK079bIlaSVXFVNZQcWgJ7J0wmw1Ht5UJvP+EVjOn
1J+4gv0wVqlO8Dm1Ziq9WCXHKvtVcFqUfE6SNWLWSlycWSXJcpUUl9uRvFoO
lGqKimDNpqlj1OH6/Uyp1QY3SRfhEgAA2J/F9iimOOSJJHL/FX2USp7r9X21
wMRIPTglLw7ZXhq3QROtmYAPoXbRSzU9ZXOJsrFGrKeML5rimaA9UTU9XzO/
XhhcdzKWZplqBJm/drrEc7VeouIT3EHZ+ZG5UmXXKbNR8ju0Hen2ZC//83j/
rZF+UBbly5mMT37qEb4+faqzo/rMpK2VClpFVbnThE2ibJBVLFldmG8fMVXd
lM+djMu4+sVirj6qGbhnL6mm6quDrM1j6aYoe0BlG1WyQelLlDlTxScq+biK
0sH4zpY0RO7QshcGffXYOtG96imNBl8OKpqAvVMVDQ5J3e2p/ZaToNqzXNgH
9X2Jjlb6XIk3SHy7Sn4bJZvHzMCEm6aeK6G4qviuKL4o3Bhee+2bo+YPxbdE
ZMfwXqyS4vthevWRtzWT7kw4X/CQ7XTf4SJDHwIAAMC+Vu2llAc4rpB7lsh/
K1O3QPF1TcXe0S8i0+lFyQEO8KHi86Xe4FVx2TBkyDGLHx3WvVBHVXzUHhQ2
vHl1fTQUnLovn9aduon5mpvX2+nP2PF6kY+kbM2Atgd6l9gqqeRGVyV1v8p+
FaXPjWdu1F455rceFmeP+6oSzTqYqmKo/lT9oOogK+z7VLacmtZ/27V+6rSH
ChbOO0P/Cn8Z7/86yu4W2/XuKknXuY7lh4me0e6RpasOMO7J7w3tAUXmD7xL
gx+rOjAPG6nN1nKCxJcqc4vkv4v6b46WA3tdaWW/M2K3M5GBa0PXGtXr5uvs
2/RprP7qsKOGn47SO23GnlwoyWlijhEpvuuKL4dFOl6o9Xwts32F1UBFEw0N
AADA/qiqbfDl2fX06+eo5Jles7P017H8qGaXrNOKBMB+rxkV0q1uqk5tac0U
g+BabYJaEx4NS5v3MAPpdLqe6nCpPaav+7VT31c5xMx9OxUHiQeKFMdoxcHa
qUqtEX2hssHOd3RxqJjeawfuZc+Np683ncyrmGgkr8Ki+kxTAbVzoKV53W98
KlXzqKlm2TP1kemWsWxTlP1cso0qu1bMBbZLefIJJTNc1lQ+zM5cVxxgAu8l
F5trWaRkrcTFx/Aelb04nlUfVT95QZ1Ut6Y/CM+H3w+DF/qbBylTlT6NtGZG
mKxGDYfh1faR4osrK7bqa8ocv2dzEAAAAOxDzcQlzXQn1nIlxdHZepXMD/dn
yJeAv3V7dAgjQT3k7tcWdMFt2dUUbEPrqd7xAxlcQxW49ZXMFX2kayS1RuKL
VFIcwd2g0tskfVCZJ6N081heTl0XBEq7CJfCeoaJIS3Kze4WHlIW9ZrNoGw+
dqOkX5XsPElPFlvk0C8bNxE3AXvBfi0covRSpT8fmw1i7hSzKcq2jWZhQDQ0
QZoqROpUME7uZrHWTAThzdsll0Nu6CPxZ3vZFWJmUNwIAAAAAB8SPuZKJZor
+ijRK5Q+T8XrVXq9JLeKbcS0KcpfHct3cSC5FwaPK4fmWn7wzp/H8sejtDhA
vkHZXwTWuKPmeWqwMq0bRnWCxD3PFYfN4e6v7ek9LGbjp4rd2cXT+I6GTJYD
rKZ+wv0vSp111pcMyzDfYU3dvnit6/7exbt6hqjiw+unJFit4i9JssHOj2lL
B5+O0jdGwxQo75yvBtU2sdLQzKfOkzeP9X8f2WrJB8T8tzK3i7lTZXep7B5l
51J5WGW/jvJneumrbuIDN1XB4NqaEb7DEqrhhZEvj+fF99LQAbYAAAAAgP1W
3EwLFR4+2zOZyDxlh+mtdv1ViiPZm92gm+KQ85XxvH00aqY4ijTtxYaHTtWs
fEOOOsMVFsewO0bTF8ezX0b928TGYherZI1kx4meJ3Uj8SjeZZ1qGD6EsUM5
fV51vllM7SZzqErL6sHaYWf4AcWSvl5rj4+dq06Dkd+YPcpAhsUgnRuG/e3D
x1K3wW8eXbfdvepcG95dN+gL1u/Oyzuq5aunLasHxtZbEsxZ1pJM/XqFT3u7
2nk32xM2ry62xIc8h7mQ9njRyyQ+XcVrJf6C2MBnvZgrJb1G21Ki72hzg9jO
2BuV+bEyt6v0DpXepYoPUXqP6t/rcqHaAyp7UGW/UOnDyqY3/6PyR1T2mEo3
RemTUfrsuH3nF5+7LWP9sBZxoDCp/mCaYfGR2Tnwaa3avtkL3xqxzdY2SnqV
JKtUskTJzCFt1pp24uH8CLGOMtELxGZfxfNQPOrHI/OWuwv/ya22tmyVWX20
TbAN9sLqEZVTJGyUPHgt2q3zAAAAAAAfJuVRpDvS92MJozqdKI71EmULoo5V
UhyQFseV14q5VbKHVP5ML39jtNPiKZ8Y88N28vYRbj8osciby8vO5LmbNa+c
WW/CHatOVnPwVYFVMBnfWPbyeF4c294h2Q2RWe8mYT9JxQuUzkSqzu1hV/ZO
Uz53rU1pek1391aH+SbAMX5OvfDpqmagSFSv2y4s4A/Jm2KbPYlc6hm4pJwd
bKrFut3GpOcn8DL29YravesjXUdkwfr9BGSmWmBgdrCpUrvB9vjFVZ0MauD5
H3yY4cbUD7zMNHrtS9pLlmNXBzrzd7e2Xlt5XzNEzdeyxPUF+ozYsOhCZb5i
p12zpXS3Sv8uZR5U5onIPB2lL9vuZ/n2kVbRzsRoP6zEc2/O3Hc/c5M5Dole
3dvYz/xY1xqZOjiaCFYedP5vPjXuQ2HqwqQ6pHUdvOsJJU2V6uR+w3aM5MEH
0J+349S2jfZ/KXnxYM9XyVGic9fOzkzdO66+JPGZZ/2JKGdRifzrXq9huvuK
WKeSDVF6m+QPK1sc9dJ4tnksL7w6lm8Zs2P62uGSfWj2UZSzZ6YLpVwbw2kB
AAAAYD8XHFG2ptWrq2jKGoYqHvHH+6Lt6RQHfVGibFgxx84tJctVcq5KrpLk
Rm3uEvN4ZF4Zz9+uJkN3pyY4jnZlGCNNldTb9lC66VT89t+VrYaLBXznYX98
Wp+pkqjcHYOXB+/uJvkr4/3fRv2fSnaL5N/Q5kJJPifxMRLPLYsx7L+y3MVV
HFWN4nVTvFFV0RSPTkRM1e/dlT+5q9xBuq+G8gtXRVbVk9PUgeiy8EkPa7TV
Vt6pr7ayR/f2fosnuVUaVNWWdBra2y0J67VqVXt8066/CpcpbytRvapOU/3O
o4u1rkuGTFUmFN67W6x5ivx/i0dkqvsKi8H843XlScWTLbFuipGq50HKp7F8
7La111ytD5PkWCWfkWStpMWrfIWYayX7rmQ/kuwOZR6U9Imo/9x49texfhUB
5UF06SOavJ6UdmJaFhQO2eTTFueMNHlIu3W2f68Wpz5lMq6pfquoz6dD9s08
rT9QjGTvbjIITuusqc5XXZ2Sj7Zyu/5p5efFr6q4pDhTbN7bdva3ZLKqa/KL
2dRrWvrCePYzZaut1riirOptWWaM/r/FB7x+yeqPuX+fVy+9fd6b6eFalw/J
ck31/vQS1auSw3I6gOkqWqLic5RsVMnmsWxyWmKTsWmJS9X6n1BBAdsUA10B
AAAAAPuJeLBMZSCyCBb2mUCrWCUcwRT7I1B33uYDVULijxPdcagNBA6T5CQV
r7MZVPp9nd6jisP/zHWFst4uuxb7Q+m8GmuTbS8ur2qZ3rY1D3VFR2uMnp/l
ytZQufCqNVbIHYz7o++w5upPvWIDzM9UutHNw75eTHHMu8ING5wverqNzqTq
924rYYzNmqK4VcnjT6NwsfppDI/Zy6qkzuAjPfWYuLKAp1dWNKlyKFnztE95
6B25NKBXb1t4VXV3nfqfVsmTq4lqHlSiykdUTYNYzocYNrOq1zNQ0RQuUyYb
ier1JZqp1ByRuaIOc+Fk8ZwvVXqZyGm2xCg5V+kvSfIVpa9WyXUusbxFbPOu
+1X6aJT8rpe8OJ69NubTHhtaBhlmPULTvB3MdDZRJZl1grSjmqXRBZV9vx5X
INSviutMlQ75uKb8b7HOHSO+wXVTy+Tewz4j8iV5YclTHTd1KprSqtDIVjRN
lnVNQ8a+hdGrO583SdRI5kqtiktM8SYvrt0ylv6+1y+eq+uUOU/pT+t4hnvt
fEBXZaFlIuprFN1V4uLHaNj7KiwhU7q6Yf0+lLqSrXyP+dTRlf9JZII809hv
kjK5kmp2YL+q4vvhq9J/3SVmxYO6027OwMQKBE0AAAAAsF/qdjQqRdVAmHaF
TDWGbljEVA/paobSNEs2Q6KaCpyqIKfMLvzxY1+ihXF8kqhzlL5S0u9LereY
39g58sp2LsWxp48FbLWJL9KoRts1Y4jKg/3hTZ+q6pR6sfK8L1npHPjXN982
kv95PH8ySh+S7G7XcudGbb4pdi6/yyS5UKXnKNvTZqVKlklygsRH63iJTg5z
LWvma5mn5WCRg5SarWWWSHG8783UMl3Z/xYH11OZ7jo/F0vO1GqmW8MckdlK
FSsszhxsIxrbJv1QiRdIXNzjYpUcLvERoo8Wc4xIsTFLlZwsdsM+o8xpYlaq
eJUyq13QVzhPJxcp8yVJLnGP5SvKVgFdJek/K/N1Sb6hkuuUuV6lNyrzA8lu
VtYtkt4q2Y+V+YnrC108Ib4v9IOuuVDhV1H2hDK/69nmQk/1zDO9/Lnx7I+2
xVD/tbFsy1j25qid0b41jjIY2BWOohp4UapBatXyQfOf1IUz/c6tBrtP17VM
VT3S0GbUNibyo7fCXkZBE6E0nEbNjZULzge50MDGmCpl6tyvqfsX+TN1xhXk
qKa+i+Ku3xoxL4/nxfNcPPO3Sfptba5wAwCPk2Ruqw+YjQrtIEp7Ku2Bh+0c
yX1gparf00ElUqtxmSVh2hN8XQTFS+6D3+qCVa7Qboy/Ix0UTYXfEsX2XyTJ
GSox3fsFAAAAAOy/qkbWu12yWcaWPbRbQw+2ZXalL00YtevOKuUYqIF206Zp
Z2SPNGcqtVjpU5Wcr2y8c5Nk96rs9730L+OtGMFXpEy2BjSF1zanO9uNlF3x
SWdhVxszllWNpLqVUYNJSLjC7dWApjpI6Uz1vrPdkGcqU8/NF8ZoQzamvUkm
bAQUZi9D1x8kHq176TyBOwfSkk6BWRX9mfZ2hr2gW/VFg7edIgUy7QbynS3f
zVNab7kbBGcGn7Sdw+Kp+qEVD//10fSV8fz5Xvb7yM659pBk99su3zbt2ajM
v6vku2LTuQ0S/7Oy4c9lYvuYFS60saT5giRfkPhcic9ROmBzv7NcX3FLmTVK
r1bJKvEBZnxipI9V8VFuyNtc15N86m5g1acvWMD4qiE9kBK3c+O4VZI0dGht
88ltXRJ8k5h6nXU6Xbdwr24VFvsN3YDqzEBAraloAgAAAID9177sr7vLGepb
i+1ya/1YvJMlPlvi4qD+Bjex1+NR+qfxpiRp6ATudZgwNJX6YA3JOj4AQ5+W
/cy7emYG8yKvLg3aMpY938ue7Nkp3u51SdEPJb1epVeq+GLbYcysUsnJSh+n
5BPKVo7NknoQ5R56nyKR4T26d/95H6hUDC9/n0xVkiThNre3f6oWcO/fRgIA
AAAAMKh1SCtRJjJfmRMjvUbiS1VyrcS3SPqAyp6M0tfGdlNN1C1wmiKyqLXH
cE2Z4exdttNZ+UBs8h5EOrt9gHvrnSVF7/T5CZd/ayR7dSx9ppc+GqX3K3O7
Sm9W2fXKDgO8TNLzVHyGiv/RTa+2QOmZVZ/zff6mBQAAAAAA+7khNRtVz5m6
jqKvZIHSS5VeI/pSlV4r5mYxP43Mo1H2TC/dWk37FQwHMwP5hqkb8ky2g6BO
YPKeFE1NTrGeqkVVzVQVO2ZgLFvTBDtcw8RYFg702+M8qjVEsZoEsDWOr2pt
1L67kfBMOZLu9dH01bH8xfHs6SjfFGXFq/CgMveo9Cdi86LvS3qdGzV5qTLn
q3SNxCtUUrx2S1RcvIgHKdvga8gr7s+E47O6pTIUyQAAAAAAgN0ZNpKo09+4
UrU+bubLK2+buVbbS5Rtj7PK5hu2V/a1tjN2erOY28XcJ9kjKtsUpc+NZy+P
56+N9beOZa7zTzfGCXpc59VcZlMGUE1ZVLmkT2xyN3N9GX+9XU1ntnOKiqbt
o/mbo+kbo7b/9uax/ivjebGFL45nL4znz/Ty30fFZme/jrJfRenDqv8LlReP
5eeS/TQydylzhzK3SfpjZad4u0myH2hzg8q/o5JvSnKNNl+X9GvKNgy/QsxX
VHqZpF8Sc6EkxfNzjkrOFrNG4lUqOV3FK1Wy3DVIX6r0p7SdxW+JG4N2mOj5
oovndrYWPxXawOsVtPlys5vpTuPochm3gJvNsH7duxmjRANpUnvEFg1/AAAA
AADAgDphmHqaKjfXle4N3CoKz4R9zv0E7tUKfdbhF+5M+27zjXLN0kslmq6i
A0XNETlIq7+P9KFaFkq8WMT7hJLDxVqiSoc7zX/dtcVidnmlF6ni5rJIqfla
FojMEzXX0nOV+OnnDlDRTGVnsuu7ycWKh5ConpsarFdvYbPBPm2rH0JwJm7P
JuZvG04c1m4QHYXPSfkctqYybJYp5xYc7LjloqEyTSo7ybdeAvuKVSGhv7lf
Jniho933TZJyG5jCDAAAAAAA7KFu1tSOg/yFxs38HgYmrYmuwgmzOg2Kq1mx
3Hq0rmbcK/6bKLuw0dplNdprbhVHxk+5Vd11p6rKBiBaTBW2NPfoloyr22od
DgHrNhcqV24X1i54sVmTX8z4TWoW6FZ2lQ8tuDzc/npiQXuqyodcr82frzfA
P6Xl8xPeo1bNystLyohJu2dPxG+PlGuoUq8kLvMr9xT59ZfbVtWeSfWiKPda
RPVrPcA/iUHcVK6BoiYAAAAAADDcsAZNur5KBkdX6bAIp1qDjyCGjNjyC9TR
hF+srGWydyS9zsI2htJ1oBHJng/XkkiCzZiqbifIxFz5kNsA07pJL9yAYgHT
rWhqFSyFs9KHD9PWSulw4+vH3h6MpiQO766KffzK68qx4N5VuMH1qyNBhVUd
Vem6oil4ZgbXNkzwSoWXkDIBAAAAAIA9VucSZdFLVZ9TCVKmqWOKgawpKC6q
KnnMsJTJC6OtdzR6K4xoptywIY2nytvK1HOrNb2yfd3U1HcxdLPrQqahS7b6
b3cWGxyy19Q4TX2PZdxUVV61loyGtGbas+eWWecAAAAAAMCUguqXKZOHqdOk
4XPV7cU20F/6w6Tu0AUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
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
EIkSFX3y8Jk3/vsxf3ljdfmjz861YQlTcf6ZP51+/8OnfH/jMVdeuWj1WfNX
njb3lFMP+vQJHzvmmAMWL5q+eNHHiv2NYmfjCxccesXVC799w1HFwq++WaZM
fu9i2/Z1Ppv6+S+WrTt7XprZH9EGq5SHTUeLvXjRpZ4KsI71YjcvcHHVJZct
fqP6AbF4uX90x/EHzzbFjtzWiXW/3nQ6P+cBALBP+Q5FUVggZP86q2ZmlsE/
1sVirYnbfDW79AbXn6iej1lSE8+bmx+xZNbJJx342c/+/ee/uPCyKxZ+47oj
/u2mY2+7c+nPHjjxfx5b/tvfnfaHF1a9svnMLTvOKncOq4ojf/rWjrVNNOSD
I/fjo/sh0s7pVpz63xz9zbe6mxTniwtf+OOqJ3674p77Tv7Bj46+9ptLLrl8
8TnnHnrKPx60+JMz58xJs1S3HmbYCLSbszX123b/tj0bnd/jLadL1kNXWD6B
dP8GAGDXqr+kYcpUTgjr/4wWuxki0cqVh9zz85PKXQL3R3/HW+XOwEOPnHr1
NUuWLp39sTytf96Kyyk/lK6CCz+NbL0nYC9xC/RTfdzxB15++cJiX+Uvr/mf
rla/7uqdin2Mp184Y/XqecWWiO7pstRqyL4Q3jGJhhSuV69Omqmbbv7Utu2r
t02cXZy+tmXNeecv8K/X75+zBU73PXwq4xYBANiH6oqj4kzzs5Ed8uZnWomC
6vSB29rFmiwlz+IFC2acePKBa9fNX7/+8Ouu/+SPbjv2/odPefL3p/35Lz72
WVf/yGh31Xas8ymQrzuqf3Z8fWczwM3uQkycXSy5tSxcP6uqSlrn65fe2HFm
cdVLr63a9PRpD/3ylNt/etK/3/Tpb1135GVXLDrn3ENXLD/kiCWz5sxJ3dZG
dRduX3Vv9zNd4FPtWEZ1TGS0/W3ULjmwn6Or3yhd2lalTFIX8AfPVTl+MIzp
onA4IQAA2K3W/B1lLmT/khZ/pj/72UOffHJV+ZNTVav8wiurvn/z0tWr533s
QBPr+hexyP0G5HOqIA6y57VI63e3egE/vaw/zbNk7Tnz7n3gFL9b4n8CK/ZD
7r1/2eGLDii2SsRuKD8kvYcGq8JmzzYPPXKq3RWcOO/NidVPPnP64Ud/rN77
+sMz9s3w03tPpe8lAAD7SvtPsI9ZmhJlU+wpKXFxSvXDX7XfdfAh+QlLDzz7
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
YA61JIVZk8M+s+ky0iKzs8PRWrugwFBUFFVij+IsXoxVNUaHw1hba6yrwxYv
zvoEd4OpoTG+qcHU2IThDVdmNCeIjVWapsejjbxxCyrZMAPv62qMc7njseWM
M77GiWuuro6vqDKWlceUlhnspfjoBUURuXmGnJyIrKzItNTwVJs+xapLtoSa
k0JRsyebQoxxIXExwQaDFhEZqQ0P1+r1Wp1OgzqI7mWI4CBVcDAdHEQHaYeD
VkORfdErgyokmKk5VIUOoder0UHRoaOjg+KNwXGmULM5DLXQlhaRnhWZnx9Z
XGJA3UFdczfFfz7XPH/hlKUrkr5usW7YlLbzh5y9h3KOHS88fb748vWym3cr
/m5z/PfaxRresDd9J+vPJXreRArI7HM6+92doqxnHsFWxyWr4d2IfMeGrN7w
x3o/UQv1Tuggag/fJHG4pEBtZt6/7Wts73K1vaq587Di8g378VPFPx3M3LIt
e9kqa/MsMzopGRm6eCOaTlHirx7/5ZVkwfswv0UAAAAAAAAfHsFPSksrt+3O
5KdYR48XvuysQ/+ieeONe+VoThtgkfhecyGROTeuRxesPnvRTiarm7akCeE0
hxe3MwBl02I7u91kPrx2faqGj2hND2r1PYHBgUCZcKBfrbTgOXM/K8cJYa8m
ZC45bNRHSwUNvGyn3mV1E3jjEMbHfxJtIRESLRwCvw7RviVgLI5J0mrxdj4j
EtETOKtFkhFbQf4lOZJ8Gi8XoMTBu8RqlYaLjsJ+tTmh23fc+LzbQrVchX5c
NbnLkq9wIJmFt7byEXz8n4uRv96ELFfC14rBV12Xa1MSqWfo8ZMpLmeWdDsa
iuAgVVS4NtYYbE7SWVPDc3IMxcUxFRXYm6lpegJRKhZ9lbRslaVlre2bDWkb
N2ds35n1w970fYdz0c3ixOnCs+dLL14tvX6zovV2xZ/3K+49rHr4pObps+pn
b5ztXXXtPbyVrJMXLsTrdLENrdzVqLehu9fd1VOPU7dzJVlBoMdJKnzb40Rl
EOhTBHrD/ILxmgOpkEkH38/U0M8WQHWK9BPpcZkyeHu/T9u4ZpP4zH71Cl9d
4m1f4+AVD1SYbxg/IAGdsHw1kJ56oe/ij+RjQrY4+S0dopaLD4dG2MNsf/3W
2fbScf+Ro/Xu1D9aS9Et+7ez+Ud+LUBXws69WZt3Zq3fktqyzrbm68+WLE9a
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
M3buzvhxX8ahI7k/nyg6eabo98t2bF90t+L+I0fbSwf25/IxHPI1uQm8BZsh
8e89fTihVYfX+fxl7cMnNehb0Hq3/MrNsotXS8+eL0VH/+VU4ZHjuQeO5u49
lLNnfy66IHftIZF7s5mAvThmL2rzxu3pA4AKIFD5nT/k7Nyd/cNPuJ7d+3J+
Opi97zCqvACN/9ETecdP5mPbpN8Lz1zAvUZtuHQNJxNH7bl6q+z6nYrrd+w3
7kxDQ4G4db/81v1K9Mr8iz7FoJKXr6PGl527ZD99Hps5HTuRjxq/5wBu56Yt
aeibtXQF9tVqbDY7HMZCe2xWVmQilo80RNT1ydMNAAAAAAAAAAAAAAyi9Cgk
b1SyRfeqvZaoK/MWJJHgDwUFBpIlGestrHTwzsilBGIk46vP0BouZKtYueJC
hvLSE2v+pPGX2gZx8GiOl8lnvXiFhevOSI5PTm4kSYft8brQyEwwWekdMGfh
+KkCEk7neUeNyRjCnxSx4sSGRpEKhnxKen5jpE6dmRlR44z7cmnSpi2ph4/m
Xbhi/+tBxdNXNR0kpReJ+UzUISwTBbbYIRF+xDoSm4XcyScfJymx2PD1XCwg
viT69OkzZ+vd8nOX7Id/yd+1J2f996krVmKvLneDqaLSmFegt1n1pslBBoM2
NFSlVkki5YqDw/BjQvNWYcLgsF8ufy4nvs5ECjbSL4lzJbY2ZL90tOi9kv+U
zRMnThjHN0b8jVBSvBGjNMSWgo3iq5TIhnwSOknoG1GrBogGD/5rAAAAAAAA
AAAAny78WpKRj46fKnjb19jVXXfyVCG/WrSXRuEsRT31M2cnkC1Y+WFXpgNV
zkUW9R9jWSPOaCMLJMukVOaXyayNjSCLsUvgkGDNH62lOBW416VWyet/b/Cx
duzM8vY40Zj8djZf3ruJpTuREK8aLvc02lJQFMEoPzgvWMvaVHG6HFqisSj4
jELseVRSWq0iM8PQND1h/cbUM+eK/v63iihCOClYTx0+Zf1M8nQ+eRbJkMUk
W/eI/b+4qNHtXQ3P253/vsZxkJ4+q370uO7B31V371W03q64fMN+7lLRibNF
R48X7j9cuHtP7tbtmes22Fatsi1YnIwuWmcDjo1cWGCwWXVxpuCwUC0vnpDE
2WxCKErIhcRnUJJEx2WkGKw5qRT8hapic3wrSEJwopSS7xQjkKKyWE1lvmI0
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
ACYi/NpcSfFqwNmLdqIhzJgVP/otHHqPVDQVFxP8+i3r3pWWyQZo0sgVDIXI
UEcRHRn86HlVZ7/75JkiOpAz1yCYVsFaUq1dnyoZ4QkB70S5e08udqBjUhN6
+lxrvrVq1BQf1J2iJ5ERRuU1rCiEhxTrQvgE0YzlUqD6hZhg3I4KtVIsQLFh
oLDupFIQ0yn6vaO4AwAAAAAAAAAAAAAwUoitbu7+Xentc3X1OsvKpZYqo93I
AaH5jqiVim+/T3/bg1Wmy62l7462pCRKiMJeGtnZ7fb2OecvnDLMYWSsfdDo
dfQ6v26xjflBG2YfsdSjUvx4IJdcJ1099d39TbfulDdNT9SoKWxuxPiysSWV
WF/ilSXx6ZCcGoqXj7gDEW84ipWYeAsopn6KMZeitUolakl4qDo42DesPQAA
AAAAAAAAAAAAo46iw0u8opyptnB++7jQTIhcFhWlfd7uxMY2Pc5aVzzNSxYB
d1FosL6BtZGNm1M9fQ2vvC5rcthw2kApapxxxKJp1aq0CSl9aIh2RFNaWrlx
cwbqaWe/u6u3rhNHCHc+fFLz3bpUm1VP816NA8a8koVg4i8z0XZuRzZIOy4Q
bwwumxa7eNmU/UdyHvxd5e13P35RbTSGjPrgAAAAAAAAAAAAAADAgRfyUVFa
opMgwsNVo92kQSAVczSU8vAvBUQou31vWqC9xBZcYg0tOEh16065t7fhys0y
tWo4MhHJOve2x7VkucXHWW8CIEnJh96UO4xP/qth89AxnnTEY/GfZ9U/Hcz+
YkFCfn6kTqcR7JQoP6ZNovOokP6r1Gpo0+SQgqKIWZ8nbtqSduZCET4cf6ye
enSiu3qd6Ii5eYbRHhwAAAAAAAAAAAAAACRKS2ZmBJtQzOOUlxzD9jl8MHCX
O560/22Pq7Qshv2Ud6zzl86Mg+2dLU3v8eIahudAN29BEmnAvC8T3+21NyEI
D9d83WL993UtL1H6gj5tvVt+6vfCQ0dyd+zKXrc+bdVa64o11iXLLYjlK5KW
rbKu/Dpl7frUTVvSdu3JOX6y6PrNsn+eVXb01ndxgcf5N2L+eVb984miz+ea
R30cAAAAAAAAAAAAAAAg8EKNw2Ek6/c7DytGvVUBWxsg7HOCOfTpK1bu2LEr
+x31BNTNFGvXpxJtJFKn9T1oIGsowp79bLa7wsJPy8AmPFTdPMt89nypSA7y
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
Psfh7ZpsybpFX1lcDQlxplAN0Wo4syhxTEV+x8EYTY0WqMGLlyUz0cud7V11
KdYIIb2IMOuA6QcAAAAAAMA4RDBbwlPTz+eaGcN+17+va6dVQOYXAAAAABgZ
CgsNfGK4lLTwgQvzepHEqmdgS2OKNW2S/jtGSbWFY6e53gZPv3PFyiRJywEA
AAAAAIDxjGyyqqGUR08WkGlwR2/9lm0Zer2WAosmAAAAAHgP0N02SEu/8Tjf
9jSgO+yCRZZ37xXg5iuWngQ9ih5PyWENes3dvyux7NbbcLW1TKMWpiJj2QoL
AAAAAAAAGCpkjhoSrD78Sz6fK/mfZ9XTZ5hU6tFvHgAAAACMa3CYJkZdOXmm
CN1zJ7yoIg5mruF0MI2aOnm2GEcy73O99jhtVv2otxMAAAAAxgjDf2w0OOMQ
v772zO6T2EoCPeca0N9fPKUhWT+GtPtgB2cEKvHXO1GXSSq092/q+5+pUR2l
9zr0wNfwgkWWl511vNzUere8pkbkScfmofNTlU+/mGFU+u2sItC+0dFBJfao
ufMTd+zKPv9HafPMySppMArUgAk/PwcAAAAmDERmWbLc4u3FCeM6eptiYoNl
ZcaRSdLgIVoTm8SW2bJhU1pnv5vERa+vnzzqLQQAAACAMYQ/FcJXOnjnWljj
t56AMw1cmKIniTOCkfLsgQapYpFwi34KKwK8f0c3B9/+gSZRpD341ScEAd9U
Xl6g/DYVv1GrlMFBKp1OExmpjTEGxZlCzeaQKcmhNqsuLTMiJze8oCiixB5V
Ni22ospYUxNb545vaIxvmh4/c3bCnHnmeQuSFixJWvSVZfny5GWrrF+32FrW
2r75NuXb72zfrUtdv9624fuM779P27gpa+PmjE1bUjdvTUds2YbI4Nm4w4ZA
GzftQP+mb9yOy6DCaBe0O6oK1blqdfJXKz9Dx5o7P7F55uTGJlNtrdE+1ZCR
E55s0aH5Z3Cwz1jhXguD7zuYeCJH0RJVRxgoSjZisovTpzZFnCn4518KPf3Y
jc5D5KbbZaiRNJsXRiG/SAa6/KQiofRw6Eyhk/L5vMlorM5dsj9+UY199/BU
nJW5bt6tkMY7BVc+AAAAYPyB5iTtvbVve1yd/e4lSyzo1iwNwcRFVZqYHut4
8tA0PYHc2dG8YsMm22g3CQAAAADGByQJiESKoVizDRXNCynSXSjyipftXDAc
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
p6z9JnX1upS161PXf5+6YVPapi1pW7ZlILbtyERs35m148fMH3bn7dqDs4P9
dDB7/5GcQ8fyfj6BE4edPFt8+nzxxctTL9+wt7ZWtN4pvXsPJxr73+OqR88d
z144n7c727t4KyBxMBmn6FVuYsSmTZdaVnRKbZA6hBA07Cu/i/jfZ2/qGIuj
0vN/lKIG7zuMhaPv1ltR9+fPS3Q3xE6riM3Pj7RZdXGmYJyQ3Y/GqPQru1H+
g/YEFOjA/AMYe/iLoUQpSI5F9DPVPHPyzt3Zt+6W8RHCSdAnkhqPfMXQ6z/P
qtH3a89P2ctXp6FdKiuNmZkRMbGhGiFeE/vL7/dbAwAAAABjFfmCZcHiZCbq
Jn4QM+fLROYjmnNzGFf3OOnz9FAd/cupQv6B7GuPE82QyafwkAgAgI8Ct1gm
v05KSvIRpRAF4pCEwOVW2WKJSUEJz7vZBE98aifGpW4Ss7v0oTwToY7bUSHR
f7BwhOqnRB8xh6YVIcHq8HCV0RiWZMY5s9LSwvJzokvsOEm6wxHjrE9obDbN
/mLygiVJi1ckrl5tW/Otdd16nIpr+84stM7aezD/4M95x34tPn6q+OTZ4nPn
Sy5esV++Xnbt9rRbd8rvPKy497jy4ZOaRy+r/31d+6qdZJKqkyRvIvniuUTh
6DdcHEGFz0HPGuFInbOE9R2jt7BJoNCbfkZpYV6ZrOX4FR0Xh/btEYX/7akj
n8pgFR6mpNAMXycyXt4hYYfRvz1OLx9MmLFz4DKgsXnQ5D5opAbmVYgYw2XX
8nCSEVGi2G4ymdTQK7rNPfkP+6bdvjftamvZ75ft6BQcPJrzw0/YQ+3b72wr
V3w2b0HSrJmT6+ri0A2xsMBgS9NPMeuio4NCQ1XcIpc8jWKvIq2ST8KO9UAN
I4Fq2CdWfJRjcr1xy2S5PZ40vLPYqg1fhAqfb4eC1U4Hb2ECACMBf9Xx116g
K5D78VQwdkcKmt2FVfh1weqc3MjZXyTt2Jl14Yr9eTv3yyb9URIc7ph/33Q3
/N3muH6n8twl++Ff8rf/kPn5LLMGFFcAAABg/CCJF8GE+vxfWzmaXaPb3NNn
1Xq9lg58bx27UOR2j1dJQRSdYo24e7cKP8btq0PT7/89rkpPjYBnQwAAjAri
dEt89FcVLQRcktlvcPGBJXGAmefdtIZEduJslvh8RoxmxaQpV9Ph4RqzKSzV
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
9VK8C7UtVesFFUtFjFBAvz/jm93ZmZ1NNgqftXjK75zf4Syb3dndeWd3Zp55
3ufpGt/TM375RY0Xr25ae8mkn151zrprWq79xbnX/3LKTTe13XzztI2bfnLr
be233zHtttvbb7sjuD11063TNt3aesvGtg0bWq+7oWXddZOvuvrcy382afWl
k4LlXHjhWQs764PD1ClTxzZMHD12bEV5WTqOgFWEYaLoADWMuUWZSyVRFlNJ
tlFUSf4j5GJK8SpNVYRXY9O5BmfZUEw684Cy/IpKBkAqEis/8zZyG0Mq/s7G
jdHjkc0tpzSajZuJ7w2ZHZlZTkV+Canwv7nvfj4gFsq3xMoFjgpjetl3mM6N
bFlJtHLC18qsjeDTZQN06WCVtrXWdnefednPJgfD8fCjs194ufPdj3q+Oroi
mtE2cPT4imQHt7ApW/zX/V8O7H67+ze/X7Bly4zrbmhddXFD58L61pbRUaug
zPoPNrOqVKogqS87TKlUbnQyAcz8NlwyrE9Z9L0LA3RC6ACnQPKSx6h8M8fw
Kk929xr3oSsvKx1Y2bDr9UVHjq8OJ8eFu5I//eWCdesm19dWZ/bgmWePCnev
qfhiUz79+CQKCADAj1ywcwx2dsEJb9ThaGWwZ3zp1UUTx1dXlmYekDkDKmya
871PeRKzhAqykUuiq0LRXru05Nzmcdt+dX7ywlDwb3BKePvd02pqyuOciszM
mswN52I/oOS4BwdUb/3pwrC6V7DN/PW97nvvndnXP6GurjIOEWRHJxWGR+Ih
rgjDFOnSiuIzs/IT0+K/RrGg3P35jKZoUfFp+ND231EyTxwPqcg+KheWiWJN
wV1V1WVNzZlslqVLGy6/7Jz168+9/Y5p92+f+dQzs178Y+eeP1/43r6lnx7s
P3SsP2z7lYs5ROHZsDV8rmJYoi981sovjw8EMp2L49lVUe+wTCuxr6NtO1pa
XMAn7ji//4uBd/ddsOfPS57748LHnpp3/7aZt9429dprJ69d09h9wcSOWXWT
m0fX1VUNmYdYEGvKrqswOyuKaZSk0qPiA93y0lGZ1VWaSqY8xVdps0Gq/GaQ
712eKpaElv25iLulx0Hj5KXb+EA9nhOXLitJpldFwb14Ml3y8DtOk8v3eQ9u
h79X4TF8TW1ZW2smDLj20sk339Qa/Ibs/MP83Xt7PjuUr5uUmXWbWdUDQ4om
hfcfOrz8r+/0Pv/iggcennnjptZLr2juWjJhauvYTOivtCBcVpZJ9BtyXpCL
dCXDmNngUnYlh5MEowZGiW9HqtgvWJR85Xo3wH9c7mJNdGmjMIU4TFItra+t
vP6XUz76eFnuQPrrZZmGzkf7tu/oyNYOzV1xy1zKKYvyWvMLLw2XdrJdOAHg
Ry93mrbxjrZkvtC+A70Ll9T/cK878i41c745urq8b2Xj0zvnHjq2Itd0Kdva
e/DI8vvuP39i45iKwsK/cpn+Y8KBG1tTefh4/5df92ejf/nASHDC/uaerjvu
bO/pGR8MU5ToUjBHLKf4iXO6IB39u1qlJwMg6XyuS5El19dXtk4bt6Rrwpq1
Tdfd0HL35hmPPNnx/MuL/vxO94GD/fktP8pyHwy7fYWxzeMrD4cRiex/M1ku
wY3wT4m+YJnHfLMi+OuXRwYODg58dmjg04P9wffow896P9i/NPDRP5buO9Dz
6We9+w/0/uNgX/CYL44mQxwDuZWZXXJYNm1oqZ9shCoTtoqiWHGQJBiO4KU/
/rR3z96uF15e9MQzHVsfmLHpzmlXX9+y9pJJy5ZNmLegrr29trlxdG1tZVnh
3MPMMMWTH4tdS41n6uUzmkrDuWmJGk0FwZChgZfknSNtCfE14jjAlY5Sp9Lp
dDyFNvju155R2Tx5TMescRf2Trj0iuYbbppy75a2R5+Zs+u1zr+93/PPwwPx
aA5GE9yyo1PQxC2486ujK97bt/TFVzofemzmbbe3Xf6zSd09DW0z6sbXV0Xv
c2hdjmyULJljVhoVm8rP3Qs/bPj+858ljHAWdsRODSkdNlx+HqVAE8CpUfAr
nTjGmNwyNjgoPfBVb/JgINjX37hpyvgJ1XHWdLz3zE/6zu9z41fxIw/Af5V4
ykawQwzO2j492Jc/vf1mxc4/dC7qGj+kmMwP+GbKSoOXe2jHjH98Gb2HXP2T
gcEjyzdvO//sxur846MTtIpc2oySuT+wwjPidz9eGgzNq7sXXXpZy+NPz/7k
876v/regHvLhYxd99M/e53d13nvf9HXXtPT1NcycOa6xYUx1VXk6vzkl0tvi
hZ9gu7fUqDBnaczoioaGMdPaxs2df0Zf/4Qrrpx0001t994347GnZr/wWuc7
H/Z+eWQgkx2UL60TRcaOFW8oHzx+3ye9u/f2vLSr88ln5m57sOOue6ZvuGVa
8CnWXjIpeImuJROC15o5s35qa83ZjTXB8WRtbWXNmIKmYEOy9eJ1OPyDBM+q
qi4fN64y+BRTWmrPm3bG3Ln1XUvOXL7i7EuvaL5mfcumW1s3bznvwUfP/90f
Zr+2+4J3P+o5ODgQ1xctePPJ8Fciwyr4+Lm0qyjG8tmhgfc/XrZnb/eu1xft
fH5BMILbH5mxZeuMO++adtOtbdfd0HLlusmXXN508eqm5csbe5Y1dHdP6Fx8
1rx59bNm1583s7atvbaltWbylDHNzTWTGmvObqgOVsJZZ1XV11fW11cE/9bV
VQafKFgtdXVV2RvlwY3wT4GGhtHBepvSMnZq69hgUcGGMWdO3cLO+u6ehuDl
1qxt+tm6pmt/2bJxU9sd97Tfv316MAovvNy5Z29XcAA/+PXKMAfs6PEVwY3g
M4YhvswV5GGlucM7P9m/9M09XU89M/eu+8679hfnrlg5sWNufdPEMRXlRcLd
xaLWueyjosXPh9SDrchHycJ00FGFg14QbTvRCLl0JoBTasiP//Tp45749ewj
xwbCo+Vwn/vmX7pWr2murspPck9HBwNDKyIKKwHw3ys5NSmu8dI4afSrby0J
T8bjKiVvvL3kotWNwUnZ9+pfP/wp0Y3R1eXzF9ffvbn9g/1LC0/5M/GBwSPL
798+s6l57JDlRPvxgiCY3ON/u5HCd48/PTuslBVPkgqOu66+vuXZ5+Z/MXhR
0bhHnH7zz68u+vu+3t17L3jlza5nX+r8zbPzHv/NzEee7Hj48Y4HHp657cGO
wK8emhWMe3Bj+47M/Y/+etaTz8wNHvncSwtefmNxcDj3zoeZZKHBIyfUOz77
BqIslyPLP/ho6StvdT79u/lbt2UmRl1xZfOyZRPmzKlrah5TU1Oe/5hRIZ0R
24GdfNu1ghU7wten6MuVFeYFVVdlwmtT28d1Ljpz+cqmn151zoZbpt5133mP
PTHn2RczPdHe27f00OGhKyGMyRRfP/8RI45O4Re/4L/Hhw7xcJ983rdnb3em
CvfjHf9zd/s161tWrGycO/+Mxsk1wTH/Sf0snOyApv6dUaARyqH/MF9tAL5F
sqVIfOfs+fW/e25efj+Vvabz253zg31x/olFdjpDO1xUJPOBHb4CcBqoqkzf
vXVGZu95bCCZ8vH+x8u2PThjzdqm4GQ8fUL7xIJklSG1gquryhZ21gfn+C++
0hmc+A8/cwxe+q/vdd+4se3sxprhC+SUC8buX8cyB1phZKagdnR5qq39jEsu
b9q8ZfqzL877YP+FQzu/f3cg4lvDEVGo5HBUYycZPAm2nM8P9f3t/e5dr3c9
+czcu7d2rN/wk1VrGzsXnzVl6ti6uspTvup+WIVxj9HV5RMbx7ROq507/4wL
eyesXtN41dXn3rKx7a57pm97sOOJX8/e+Yf5L7+x+O13uv++r/fTg/1DSu7/
G3y/uNYXgwMf7F+6e+8FL7zc+fjTs7duy8xxW3dNy+o1zUu6J8ycWR98uuqq
fKlwADgp8Yy2offHQaFs9umirvEvvrI4Di796+tVB/81sPWBGVNahl4JBQCG
C8v2Tm0ft+PRjq+OrsrFmgqTCt7bt/TBR2YFZ6x9fQ0dHbVnN1SXl5UW7f5W
kU5VVaabm2sWLKwPTnJvurn1/u0zd72y+NDh/uQCMxVpopfYd6B3y5aOWbOz
FaJGnMzOKbbmsubD2WJBE5PzGWMF1Zsz0ctzJ49Z2HnmylWTrvz5OcFmcPfm
ab966PxHnpzz253zn3tpwUuvLnrlza5Xdi964+0lb/6lK+n1P3UFf/rja13P
7+p87oWFT/1+zo4nZm17sGPz5ukb7/zJ+vXnXnJ5U7AdBgtvb689u7G6uqos
fgMVhcGHRBLR6bstjdwBMB2ut+C7PGZ0Zo7bpGh224wZZwTfx7nzz+hcPH5J
94SenoZlAxMvumjSyjVNa9Y2XXJF85U/nxwM65XrMh30fn5tpvXeuusmX319
yzXrW4J/A+uunRLcE9wfPOCqq1uCxwejtnpN8/KVTf39E5csHd+15MwFC+s6
ZtW1tdae0zQmePXRwY9KYTQ7roAUd5FOiy8BcJJOZseR2en0LGt4/a0lg4mr
YAcHB+66Z/rEibXpYUcaAMC3CPfCkxpH33XPtIODvWFIIWzSdPh4fz7nJNdi
Y9VXR1e8+9Gy1/Z07d695K2/LPnzO917P+x5/+Nl+w70ZJ51bCCZr5LrxvV1
/5GoTu9X36z45+G+HU/PvqC3oTpTOKVINyt5xT8qPUvPHvwmM5qZa3mF9ZwT
wquEBf3jkiGCOHSQ70qW7+eSXUK2hHJZ1D8unWs3FnUfS1yCjAtWx5cmh7yZ
snzLuVO/9n5o2Tl96eTKjPsyJx5WtGR3QU5UWPE7eWdU2jQ7CsXW57DvaVQQ
fsTZAalcjfFUfvnf+rlSqWjObBHKGQFwMirSYXuLqOdFdk8UljDt7mnY/XZ3
tglI9gj2+Mr9h3pvuWNKfX1F9rm6xQHASajINS5PZ5s9petrK6++7ifPvbDw
0GCmVPjXx1Z8eXzg6PFV2WlKA4kavIlJN9nu4WFkKXjMYFy4OFOzN2wQ3x8s
YfDI8pdeXbThlqnz5tZXl5fFnb4LTzaT57/OIn8spk8fF4YZm5trijwgFfeb
S1dErbVSuQa+uQ4s5aWjhj8xelay031GGFvIHgpmup5VZI8J8/2/MsKNJx0s
Nm55X+QtleZjVv/louLtiSoTxWcHhOs597DSqEh7Pkg1QiipNFXYCq2kLDdw
+S9sWWGQKp14QFgaLhqI5HDkXi44yE/UYRtxclxyWu6wjQcAiijWSC66hpW9
c96Cul1vLMgVLP0mc9z7j4N9N25sq6urCju3hjupsmj/dZpcxgKA7ylxyhYY
lTs3rEzPmVN33YYpO59f8PmhvrjpVbb3U3/YbP1IsplXrln8yjgYNXhk+d4P
e557sfPO/zl/UfdZo8dUJF60JJXORR5SqVT2WtJ3Z1xwCl3583MuvaK56J/K
CmKGycOwkop8VKEg7hFePcz19ko8PXsgVxLGE7KPSYdN4cOn5x+ZjVqEPeWz
9wyJNcVhk9Nj48lEmdJhjK5I18jCQtO5FRXdmaxuXV6WzhxLZwPOiau9mSh0
WTajKTnisXQ+/lOSD2HFOWlxlC/KcarIvcOSeDMYUoK1IplklXv6sB6FfhYA
OAHJHWK4t8plNGX+N2r69HG/fXbuv46tzCQyZa+QfvJ53y9vbhtbm6vxmKjp
ZL8DAP9PFak4aSQxtyV7cnfmmZXt7bXdPQ2XXTnp5tvaHnxo5pPPzH3sqVk7
npi1fUfHA9s77r1v+t2b29dvaFu5pmnu3LMaJo4uL8tFG4LTycwJZjodBgcy
u/gw9SXfRa7k+7T04j8g2jC+JTsojB0lp2LFDy6piGZLDZvVVXDklpxVV5br
HZ8uy2U0JaNJ+WuRZSNM1DpdNqcoGSn/eaNwUzqK5BQqCATF+YRRSauSfNZQ
MjeptGBKY2IISuKA0vBpdENeenhGU9EuP8mXzv5WjDiOp8sQA/B9FLs20Th5
dHAEe+hYtrDDN5lEpv1f9N+4MRtiGvb47FHr6ZEgDQD/JtHJWjSJJprqkv7W
OUfF2nyPWEclChHEhV/iwjulYQxqhPwEF49+NL4zgSQqlJQvypQd5aFpLfGf
cuGRofPpwnjj0KhjdkpXmPYWF1XIKI3DFCVFMpriZZ4G4YghV2y/bezyYajv
/n5VJOtfJZ6VCyulRhjfZJWtwsBUXHSrWM3/VBiDKgiOnT5paQD8MJJXT4Ld
UH195eYt0wePrMzVgjg28MXgwB13toedasMLrMWOHOQ1AcDJSOZCFDNC46r8
04vfztdzLr7w4VGskeJap0Og4MdvhFEoGeF29ikndu3vhMbXVKkTX4GncF2d
+Euf5Jss8nPhZwGAExDvL6qrKjbc2PLZl8vi4g+DR5Zv2Tpj/IQhHXW/cw/l
mAQAAADgv9LQ8gtFr3OturjxvX1LwxBT2AT5scfnN08eEy7hVH8EAAAAAH4s
KnI9KeJ78rGmjll1r+2+IG5bE9j5/ILp08clKoWe+vcPAAAAwCmX7CtRlkqX
l6bixqkNDWMe3jErG1waCENMb+7p6lxcn06VVGRa1QgxAQAAADCSXL+J6qqy
X9zY+vmhvnCW3JGvl7/3955VFzeUp8vK0umygsreJd9RjBQAAACA00J+ilxY
munSK5oPDg7sP9CbqfWdqfg9sO9A77p1zZVV6ahZbab7arJPLgAAAAAM0bm4
fjA7RS70+aG+DZvaamrKCx4Wtj3VzRYAAACAkW3Zen5YkWnwaN99958/fkJ1
cKeZcQAAAACcrNYpNb/+7bx77j2vubkmd2cqV7VpeHc5U+cAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABOrf8DbYns
ug==
     "], {{0, 971.}, {1571., 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->72],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{271.54545454545445`, Automatic},
   ImageSizeRaw->{1571., 971.},
   PlotRange->{{0, 1571.}, {0, 971.}}]], "Input",ExpressionUUID->
  "dc5a9a7a-7964-445d-8005-8af715e663f4"],
 "\nEach time we count the paths of point to point itself, the action always \
from point itself to other point and then from other point back to itself. \
Therefore, the count of A^2 it actually counting the number of edge. \n\nThen \
we notice point A on edge AB, also B on edge AB too. The B to B itself also \
have to go though edge AB again, which means the edge AB will be counted \
twice.\n\nTherefore, The trace of A^2 is 2 * number of edges of the graph"
}], "Text",
 CellChangeTimes->{{3.8600993230289035`*^9, 3.8600994140693007`*^9}, {
  3.860099462119308*^9, 3.8600994862495008`*^9}, {3.8600996660223618`*^9, 
  3.8600998792322717`*^9}},ExpressionUUID->"6fac33eb-e7d6-4f1a-8418-\
24715178b18c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "3) ",
 Cell[BoxData[
  FormBox[
   RowBox[{"tr", "(", "A"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "725749cc-01f6-49b8-874d-2a4e67e554f9"],
 "^3) = 6\[Times]the number of triangles in the graph"
}], "Subsubsection",
 CellChangeTimes->{{3.8601000047893844`*^9, 
  3.8601000227696557`*^9}},ExpressionUUID->"f7affd16-c3eb-44df-b7f4-\
bed205bedb75"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"0", "1", "0", "1"},
      {"1", "0", "2", "1"},
      {"0", "2", "0", "0"},
      {"1", "1", "0", "0"}
     }], "\[NoBreak]", ")"}], ".", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"0", "1", "0", "1"},
      {"1", "0", "2", "1"},
      {"0", "2", "0", "0"},
      {"1", "1", "0", "0"}
     }], "\[NoBreak]", ")"}], ".", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"0", "1", "0", "1"},
      {"1", "0", "2", "1"},
      {"0", "2", "0", "0"},
      {"1", "1", "0", "0"}
     }], "\[NoBreak]", ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8601162826533403`*^9, 3.860116350718732*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"dac2eb41-6103-4863-a6ed-d6252f6cd5a2"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"2", "7", "2", "3"},
     {"7", "2", "12", "7"},
     {"2", "12", "0", "2"},
     {"3", "7", "2", "2"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.860116330057888*^9, 3.8601164194646454`*^9},
 CellLabel->
  "Out[65]//MatrixForm=",ExpressionUUID->"880db87f-de5d-4000-8bf6-\
851d2ceb5c99"]
}, Open  ]],

Cell[TextData[{
 "We start with focus on one point. The path should go though 3 edges and \
back on itself, so this path always creates a triangle.\n\nWhile drawing a \
triangle, we can in clockwise order and counter clockwise order. \n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
x9EKp+tdgf6f50plI8aqb7ZO865pmffIN/TmGzwhzZ9JMuEBVyjpms4bsiua
l0Uj/ObQd9uabQlyqXQtKEfJa87tZezlu71ya6MkaWxLKQAAAMDGFmu/fWmH
a+W3SxLvZBwlHU748rWBuTAEUSgeOKq0suJzMh8vhvnb46a+g3q34x0qd/Xb
ndY+x+JrMg83TobaK79OuVvqg103Byfpu1iGQZl+aKldxfh7rcklAAAAAACc
nKTDBrka7wlpcDdm8ZEq6W3jxsVebJ1dVgnYegi7/cn/6ZtbVHaBcqFps7h6
hULNmOndSTIZ/h5WNK/3h0TCDcdca1Xf/vUU10k1353livp0oqi9fKs/rBtR
yvE1mkAjFAAAANiw4lyVarS6uoCKN/tmsTuMRQULHT3ybU/e7ptLXDQlFPbN
HUMznL6lKsD2+WfNMeqVS9iZ6IW8tH2DziE11w3NZ2Iq+8iM2dsvZ3kajqJY
vROXM/+XpH8S+p1eWpyjfd9vlxK3V6b/cgEAAADANLhccStBTa7VySeUfkS6
jPGRmaHfeMgxZHnEj4/hcNT+hK/Md/SLsvi6zLWq+3Jr301xGusFV9f9dWma
A9/d5b8m/QaPNWV+FaIBv5J3UbYY1mWa3xeX2LfvyIz5pSw2hbVAshJBiQsA
AABARfth65tI7O2PtYZ2idbyQM+cywXGY/lVYBNH8/yjdPnqVqn25XSs1Hd8
YVsP+Cu5iZPerUf7e8qTOwpf8aL8e+pWHPaHpVLfkPpQ1yTdDt37+5JYs0sA
AAAAADhZXDURx/24WmjpgsadRM8IM98J1RpHqlkzo9hko74+PDIz/HdZ2gWC
SRpu1BlvElNIvfrU/eOu8qSMtSLcJ+S2KvV9vBGZq5PwDdjVo3J4uFMuVpNG
eUOofS9sbP8TPwNIc/n3UcaDAgAAAGw8dZeMP5P0Rn82NsRImuPpff0yZGt9
BLU2I8YVlLw+/0oTpv9ctLTOe1kzdt2i1P6e8csQwyXfnAN/RZT+9uljpgU8
fF1sktnnZPYvUs/7LijPiiH3rtHNjo4AAAAAsI7FxiBh+6ePIc+V6p9UfrAb
p6Vz725XEhN2HVZbCK0DPXMn5buUG5ieSzebhgsw0t/CZRUuqb6yTae3K5rr
mrQPuf0r7HJmJz/DtbmKqQJ1cRbRGwPNyXyf8Q5tDO3l+71qf66k5h3X5J8M
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
lUef27DwjmbT6VjvbUOjX8rCD38ZIPhZdt9u9iT5cKbc1zfL8sixJfsTvuP3
aMZ1+U5nu/9E5qFoh1btTCIAAAAAOC3qwF7SDW7AfckZ0aTXt35xUHyNslk/
38cuB5JwcQ3US5AaXOOKQMJf5P86vegqn8vbq1YnGwgJQ/SoDAu9Vvb7T/1y
C5fE+Dfa3yWcQZj+MwcAAAA4cT5w5cDGRX53uCioTEIgHXfA/ZsfiZjmRREC
nbr4Gt5OetRIfRd7Bsa+2qf4Ioeqfh+4fpqyhW5Z1XvreGrjnV5xFpEKVTEo
5gcAAADYoLYo9VbfLQQWOoVPDvtM+MxwsTtc7BTv9spLm7Hiql4OkHBpbxJn
Z262o/1zFqpkvuvlMlO81zMflWrjVH3wm0U+pz2U9GbfxEXfYpgEpO0r84Qc
xkmmYVOwXzBO/fkDAAAAnJjQ3Duc0M+l+LGr9w550bTMw0aGz4rhpnqT47Sf
+frCgeU91G48uFuUp/7gsZabPSK5jL9sZL875gekubPfqt+4CgAAAADLyYZ/
9n9Vla/4tiyqFnkcK9oFgvZl0i6MfKvf6Iy9+oNG+9f9WvLSRqcVzoe65hNK
aR54tK4XOFlzqL1/+4QmdbNvbjOaGY6qXoiLPWOvz3X15ROK4dfzSwQAAADr
UaOfs1bq+5QvdGZjt41RXfVdPC7NbHLjVV3dsWb989iw9WfkqfX6JtHKe1uf
VlnV6iTU8/MbPdc15/miF1Khmw3KvwEAAAA2iGbMKf6bzHy6OwSlR2aGnBRd
nHGtv/+zb45Na2Q6zLdkHgqbezHv7WLg+7jwQ9Lqz96fovDmjqX3tRL/SvZt
HfrVgUkaXZZv9cttPN0pHhjr+uwAAAAArD+txOZtlLeaYIw6hgu/n5LGhLJw
d/p/TYS4a0iMJx+XppX6foyqXt8nHmrqeBdK5xC56y+IpJF7Xc9T/Mz/unUf
/AMAAADAmBg6DvxkH/EZyv/YNz4pqrlwgq8vdMzZFDcJitVcEmOf4U6i/T3T
avdn/W8Rwuys+sM3Zgx8EcmFRq/vMva6/KHS1Uu0et9iAAAAgKX4ntTz3XKU
hDoxPnxZFGfQUbc0ahQGL5/nxqq+f0X6FB+z0Zjdb3W0sesOUoe6dYgbO9vY
Y+AcvKEAAAAAG8zRsr6bZPZ5Ui+JMAmRL+8lN/1nTdQAn6myvf2yNUyHfUpu
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
HwBUp5O6uRmajm50uewVqw851f40RVnftnUbpVK+u5t8MVEaTuECjTYVImvi
hPE6zVtHuf/2ysv6FjMMPuun5/7x4QfzmeFnnzWdV/12AgAAAGhgthj1UYss
aRKN02gIp0vJ3lryVQm7SsHvLslLQYe7hf3/I6PfYXNz+ef2kj+Ec50u7jba
kA8AAACgUalokllrLrVA+OdPzp2xa/uO/ZWe//buP9C7T0W/P9uwvq01qPv2
AzQ2S0W8KaziyI26Ja4MgFvxFOYQ5i83MUdX+Y5mTAVvVDwVClfYELMh9a3S
3n6c/Oowkr3/vuyVC+fMrlrue8+uHTribWaDL335xYaL6gMAAAAcFKM4t0EO
CM9nfL0Vp3M3yd7lKrit4tvidjWuU8O83ia/u+SrZcSflzPukh46IiUAAAAA
4BAQ07mp2UFUW1DW9Qq+PbAvTsjsPtC7b8L4cRh0AdSQL+tt3mLrYDjr7+dI
LHxPuuCJin4Pt1LPUn/GZvxlyZPqkJnwn882DB82ZNZPz63d8tLM+hZXPvzX
P+u/RwAAAACH63RGLzO3q9DWVVTV6sQQLgh5OW5c0S4Kiavr71qyCYpam06l
AAAAAIDabE4njGyfMnni5EknjzphRK6vJX/8sUer9qQTzpx+OkfKAcDBpKvo
Wz5nI8g+gXFXp2cfSrz6RZZMiJStpTJv4E+i6/Dbbr157furX3j+ubEnjhbb
OeeC86o2u+yrBvjKFW/XfS8AAAAADkM753eS01lo1afspTu2qBvD4ifhLRV9
bzoALiyULS7liYQo9w0AAADQT7/8xYJdO7b17usWdu/c/utrFpr3/uqXCyo9
XVXj3nt37xzRPqzu2w/Q4HRE2iY+iznLmPdls7e15G8tuR9Z3vFEB20vm/Fl
c1BJZwets4JGSfZO77I2bGjbinfe2r51i/DW8jduuvH6fKy7hhuuv7buOwUA
AABwqOaSs6Xk51O7Ze530suySu63CnrHQ74oP/wB2Sim/jsFAAAA0MjMqNRl
8+f17us2Q0ziz0vnzRV3TZ926uLf36vL85pJmOqWJ594zLHR4/KYkopnHtqJ
ltUCs/3PUraJpyqH9L1Y7Wc8DGI3q25nH9tTbTeJz2b2Ego2tviZKY+Yxbxv
eW5u/TVe2znMzk2OgmXMa7jzXpOenmzMD074fOOn5vdMT1fHQcPdqkCKuPLG
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
ZEWiXGiu5oOPMK/yP244o5HD6e2l8hjicXZKmEwVroHHWf1cVaHh3OM8sMX8
0W4jPoE5c7hzC/OfJHcFC74pBeZ8MH1Kqc7kkU8qFuttKsfpPdGZqt0lLwlu
m5k8xtvJnMSJOU6ceZWZ1qmZbJKbtKUU3MZdj0WvIUbXAABwLFv/8Yf9jHv/
8eEH5UPqfbw4VV4vFI5YjIP1XNY8IUoWGEVsNrN/x5y/MXcVcz5r8beVwjh2
OELoLqh4aVw/OR6yqmFJbxjv1anXvXHCsLpXV8OIRi8FdW8SjDWj6MYhfp0/
rLO+nXTANsmvVmMYNfLpbPaq1fSoUqmjEnGTHPU+yq3E0VQ1ygqMlANXh/rj
J3WN6153sawXqMQPV4O6zkIq9Voso8aBcrxXVHelNzW1bbplZDl8QaJ17im2
ft1cFv9366xgFfPfYP6LzH2aeQ9TcB+54j/3euZeyZyfk3MROedzdyY5M5h9
Brenc3cqt4XJsnw6TeKOPM+RbHE5jugkki07xxKpy7Fkq8sx3BrN7VGM2jkf
xu0hsssnV2Vz1BBavdlkxk50nZtnwpI6pzWczqgRdZXijXFVE4e1GO/n6IrY
to8s420ZvZjiLSev/6c5OJFsVeSw7h/JfiHL95zf3nZLJtk78+dnG9a3Dx/a
CN8zAAAAAPGQj7nGSXwPkTxVs7skh7g6E6YSn3sYDnqDNy1PDCntOBeCGyUy
whWaIW4rHFtWOfsPNIdZvyZ3DXM/stx3Le9R8n4uo9DhQJqHySdGCoo60TIX
7LU+sfzukszP6SoE6j/ui+bgeKJWzk6wZCGUMxnNJfsacu+VCdv2q8x5h/ni
Sf/d4m5uliUlO+MEHjNfSM0K9e3mHE0t0Bmm9KhkHnVur0pPCoVzyUL2sd1J
l6XAqP0o519qjqYnUN0FneZUjjcvUFMGcbm5FEzn9hH5LwAAABhgjLDS6ndX
9if0vb/Sc/ddiwLfrf/GG1RNCaOqiXUCk50iL5OxUP4sBWutpD9jGDwMdI50
OOSI8r2NMhqecSTdNcKwUaQ6Ol5fTKVGq+GuCurqQUs+1Fwt6zsTiK5RriQw
IsaBsaogySgopFLN9ZaYYfn8llRSG+PG4zS9bW4Yfi+rMZiZdr6nGHzd7H/a
4osXeSXzXyP3ZXKfI+8Jch9j3gPk3M2c28i7gZyrybmc0XzmXMr5z8kRQ8o5
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
msPVthJvJ3sao0e5+00pMALaZaNuSaqOt7pRXYY53t7uor+52b+P+cPDBO/+
xbcxKIVGoT9rN990Q19fJhlPPP7ng6wW0y4AOMoyB9fMP3HcDQAAAAAAYKC4
+KIL+hOMynj9tb9PGD+u7hufaTjuc/ZpS6CrZOeyqeVZft1N/pfNwbuWTJ8+
ncg99NaQtc/4G0V8Ltl/Im81Cz5r9o3y42EF8uwmBWYR71QkvOC/a/lXMHss
kV/v1xngOxo+bEjHnl1Va3rn/e2Vl+u+wQAwaNSKVIflwji1xNdrnMCVeVT9
9wsAAAAAAAAO6vrrfnNIQe9KT9eVv7rCnCHWSz5z2yV2Kdkqg1rFkyvZOLNq
f+nqW3YX/Y8t/zXynyD3Lu7ezJwrmH0R4zPJPpM5pzM6hfhEopM5icspjKYy
PpXTWcQvIHs+c65mzm3kPcrdVyx3nZUKdJsBbaOtjGc8e5Ta3V1w9cJbmv2X
mH8NOeMomX2jvB4MdGdMO61G44BMMaWXXnw+83DkWALAkWFErcPWG+S7Xvuw
4aNGjRw39sQzp59+8UUXXLHgskvnzb1wzuwpkyf+cMwPRo5oL/u+Xl5+HSH0
DQAAAAAAMEDcd+/dNYru5v192Su8ASNRxjz0QeZ0FKMekd0FVfAkUFVEwsLa
ri6vLa7IG42S2uFlNkCt1qPLkqiW6GGZbl+t1ryuIupqbeLG6N6mILwrCJ8u
LPEd9rVUS3YUW79uDpYz/xLmpKLcthUW3Guwlxrg0J191nTx9dK/6HfPHxbf
x9WXDOJLAHDUTBg/7pE/PvTZho+3b/2qq2OP/mpSX1bKvu7O3Tu3/+ez9U8+
8dj4cWP1YxtuFAQAAAAAAADViHlf/1O+v/zi82FD2xp7xicbWS5itkylbnK7
SzK+rYts51pJBkZuthtGts1GmeIWVwe9jdLcrs4nD59CFldR9xprC+KHyKdQ
7SzD2Lsfr0es2d1V9B4h9xSi4TLiLU+7trn6J/fFJW6jajcMCu3tx1V6ur49
0JuJe2f+lLVQeveffdb0um8wAAwe6iCauFRtOMr+r365YNU/3hHfP+pLSVdh
yn8jRbfIrt+9+7o7X3rx+bPOmFb/PQIAAAAAAID+efKJx1Jxp5qh7/Nmncuz
nRYbLzZLltjCBcz/ojnobvJ7jGi2ilertO1KnPUdlhzxZAQ7jFHLtPCkGWWg
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

     "], {{0, 804.}, {1961., 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->72],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{401.5454545454544, Automatic},
   ImageSizeRaw->{1961., 804.},
   PlotRange->{{0, 1961.}, {0, 804.}}]], "Input",ExpressionUUID->
  "7d9644f1-b905-43d6-a9fc-dbef9145e19f"],
 "\nThat means each one triangle can be count twice time, while we just focus \
on one point.\n\nA triangle is form by three points. That means the triangle \
will be counted 3 times while we calculate the trace\nTherefore, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"tr", "(", "A"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "2f914f2d-1ef8-432a-9a69-aa0184755ac2"],
 "^3) = 2\[Times]3\[Times]the number of triangles in the graph = 6\[Times]the \
number of triangles in the graph"
}], "Text",
 CellChangeTimes->{
  3.860099997919303*^9, {3.8601009447296*^9, 3.8601010308783383`*^9}, {
   3.860101297136637*^9, 3.8601013233483047`*^9}, {3.860101355215962*^9, 
   3.8601014334010873`*^9}, {3.860101511605548*^9, 3.860101547835681*^9}, {
   3.860102053621403*^9, 3.8601020880224047`*^9}, {3.860102118090418*^9, 
   3.8601021395834403`*^9}},ExpressionUUID->"f0680c42-277a-4d46-bb38-\
9c4c50f24928"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
B. Show that a graph cannot be two-coloured if the trace of any of the odd \
powers of A differs from 0\
\>", "Subsection",
 CellChangeTimes->{{3.8601048423767786`*^9, 
  3.8601048561951413`*^9}},ExpressionUUID->"f3b867fa-1fc2-41d7-b19f-\
a6c49c769253"],

Cell[TextData[{
 "We firstly set up the even power: A^4 in a square. And all initial colour \
are set as while, other colour set as red. \n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
5+os4hX3P2j94ONWR7CHRL8zXEOif9D16COrcszmOYh+AACAC5oczaTKLwoM
x2mzclXdWxZ/+l2z3d/jDLS4Aw1ylb/e4+/Yd6i7b8MCa84clp52590Zb+2q
c4Z6XSN17tG6IW/joGvbijWIfgAAgAuecq6fY0SB5gX1/MX0K7tWDIV6Hf5O
V7DVHaiTLucP1rv8PR9/2rxyTb5RvJKiLrvpVtNr/6iWo7/Wc7je7m/eP9C7
fFWGyZQgctK5fmV0IIU0f943EwAAABTKkD60zmjU5hbo1tSXfba/YSjU4vS3
e/1tUuiHaqRR+/zrX/j7QzfcxDHMND017aolzN/fWEOin1T5ScXf7m3ee7Br
2f08z85ANz8AAIALmnzpPU1pBVG1eKnpN399cCjUYw/VeXytfp8S/bVuUhLw
bXniyVtLylIoahpvnDlvse6vLz8yHOxxjtaSBwx7Wvbs77jvPpLyVyL6AQAA
Lmhy9JuMrCVDtaK29PN9fcOhDmeQRH+Ln6R/qNEXbvSE27/e09LauojjprHM
TME0o7gy6Q8vPDQU6HaM1DiDNcOepv37O++/j+PZK2LO9UeG9EGDPwAAwAVE
upafpmlVcYXh2T8vs4/usAdbSfT7/c2SUKN/pMU30vXeByseWFaYblFx7CwS
/Xm2mb/9y/2D/q7h0Dp7sNrha+nv71ux3CLyMyZGP2r9AAAAPw2D7BQeKUW/
gRPUdz9o+3h3h+eHjY5Ai9vf5A00BgJNvmBDYLTVP9r757/des1VIs+mCHwC
if6s/OnP/+m+fm/HYGDNcGCdM9g27Nyydm2OxRR/jB7+539vAAAAXLJIeUAf
KRhEc5nTFJeLPVtvHghucx3pJNHvka7lbyS57w01+ELtw+7Ox59cXJCfSuuT
WS5FMMZn5F7x6z8tGwh0DYTWDvrXukLtLu+22tqcDMuUi/vO/yYDAABcYsYj
2MBxWo5Tk6wnBQCDjiJVfppOZfn42+8u/O/XO+zhre7RDmegRR7Gp1ESanL6
O7/b397TuyDdnMzo0xhGI4jJpowZT//2vsFgz0BwXb9Xin63f1NLa35ONkbz
AwAAON8mRL+G41USTkuinyeLuZS8wpQN228Z9PzKObLJGWz1BFoj0R9qcvub
nL6e9z+sXf5wvsglc5SBprS8oBZMV+z45Z2HvN2Doep+b7Uz2Obyr+/ps1nz
khH9AAAAFwQpf+Xol2r9aqn6L5/lN6cn3Xyn+a0Pm+2hHe7wBqc/Onhvoy/c
7A22+ULb//bC8oXz9TydzNMUiX6pzd80Y+uOm/fbO+yhhkFvDYl+d2DDtm1z
bUWaKdHPI/oBAADOvSnd/CLRr5XTX8uxepNoFEVdVt6sdc1FBz07XIe3uILd
3mB7tLWfRL8r2Orwbn3i8dtzMxMERiUwBoaWop83Xtm76drdA22OcOOQr54U
GNyBvqeeWlxRTiH6AQAALhgGntcRSqnAKPIUPbvqqqSX3n5kwLfJHu4mCe7y
NX9/aHn/0KqB4dXBo12uUPvXe9tbmhcL3GyTmMZzBpbRkehnhektnQv+t7fB
GWp2+BsdvhZPcP1zv7lxbhWLBn8AAIALhoFkN89Ryo/SoP3GmQ+vy9pj3zgY
7HGE2uzeZqe78Zvd9/7nkxvtnhpPuN070rfrX2vvuSufo+eYRT0pNkjRz6pY
4cq1daWff1vnCrc4A03OAIn+vj/99Y4F83lEPwAAwHlw3MCV6vs8y5Epy6ba
yrS/f+l+e3jrULDdEWhxepuHHXX/+s8N7+5a7A+3DbmbA4e3/eVv91aW6Xk6
xSQoLQZ68kSGm7F8VeFHX1Y7w23OUCOp+HtCXS+/dt/VVxsFVkvehWWR+wAA
AD+hE2eu9Cs9wybceHv6l99vGAr12oMtjmCT09M6ZG94+dX5//z3jaQiT6L/
4FD3zseX5OekmHmDkdcLgl6OdRL9s+55MO+DT9e6Rjrk6K/3jXS9s2v59deb
BU4tFw/o8dH8zvveAAAA+Bk7SdpG+v6R+LYWqjftuOWAc8tBT9OQXzpr7/H3
vPbG0h2PZ+w7UBP6oXvQ1fT51/V19YUCN1OflsJxWiX6Sd2fZmfdclfGOx+u
dIW7XOEmacz/cPt/Pq2+5dZ0gUtmGR1J/YnRf8qjCwIAAMBpOXn0S0iVf9F1
hn/+t90e3HLQW28PNXhHuw4e6njuuQWPP5Hn9HR6R9ocvrY333nk9tsFjp5F
61NJ9Eu9BKWuAnqaib/mBv6Vdx50hrqV6HcFG7/d13L3vVkCnyhfQUBHb98T
877ne+cAAAD8zB0zcKVL/CyZCXXtpfuGNw6HOgZ86zyjTQ5/93/+3dTXVfin
Py8KhHucgQanr/v55+6sKEnmDbMZg5pl0wSeMoq8HP1JVQv1f3tlmTPY5x5p
lm7sG6izuzc8+LBV4BPk0QIR/QAAAD+9YwaunuWSKuZrX3jz4X5fz5C/Ydhf
4xltOTDQ9qffPVC9MuOTT1cGRrpcwea9B5o29F6dkz6bpRI4Wi1X+Q2iwJHX
JNFfWpn2h7/d4wisd4+0ukI1Ln+1N7hl+YoCgY8n0T/W4I/oBwAAOMdO2ODP
MnqKSjGnJ62qLd89sGEw0OYINpAKvifQ9vnnNS21JQ1rCwYGu5yBJleg7d8f
r3rkocIMYxLHJJMqP8tIAwII0uC/BqMpLSNnxq9/f2u/q5tEvztc6wxWu4Ob
6xvnpVtSlFq/QPM8xZGVYRlqQvTjoj8AAICz6ESRKuWvTj+roDj52T8+OODb
NBRqcYWbfKF2p7P7lb/ffdv12kc3XTvo7CTR7w70vvH28muu4o18inQhvzwA
IKnDCxyvRD8jxO18+rrvh9td4RYl+p3+jb3rb8jN0SrRLzICSf+JtX7D+Boi
+gEAAM6+Sc3sBlE0CMb4W+8x/furzn5fjyPU6gk3ewOd333TurGn9NbrUl7/
v1V2T5fd3+L2b33u+TuzLPG81NSfxnFaltHLzfhyrd+oJdHft2Xu3v426Y4/
hxtcoVqHb8PjTy6zFbFK9JM3jDb4C4yBQLM/AADAOWCYItoUIEV2QXHqpp3X
Dge3D/hbHaFmacg+/6aPPmi6ecmc1Q+b9n23yenrHva07d7b3dk+18zP5gyp
Ri6NEBmtyOnIlGdVIpcoCHHNbfl7DpHob5Ojv8bu6/jjCw/MXaAWxMt5IYmj
tdF6PaIfAADg3FCG6jWwbJp8px6tNE8rPe5E8gDRnDr3Ku1HXzbbw932UJ0z
VO8L9g0c3PyLHXcW5catXcV7vTu9/r5geMunnzQ+uMySbUwWtBqjTmXUJ5sM
iSYmPp2bnSHOzDHPNHJxK1eyn39V5/B1eEYaPaE1jsC63f21b33w0MtvPbKu
viwvRyuwejn0acX53jkAAAA/P3L087pI7iuX4Su3z6ON5LeZualtfYvtwa2H
POuc4XWOQK3T3fPxR0133cLOLb3i2V9dHRrZ7vZ1eny9L//fHdcsmpaTflk6
c3l++uyqgpSbrxUfWWbtarmKlBN+9+sH33mj7rtvO/sHOqXoDzd7QuscwVXD
werBQMugb/23+7cvW1YscskCqxVZCtEPAABwbhg46e45erlLnjJvGLtzLs9x
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
/+3v788wzSDVcyOv/9HRLz1RGd5H7hxIav0UzyTccbtx1wfrHL4OT7jZ7m8Z
cG3csvX6gvwUgU2SbvwnvyPLUNJJ//O+SwEAAC5k49FPZ3C8FP2GGW0tCxz+
zfZgtSOwzuGv949s+vrr9VVlGguvog2JFsvsxuaiYfdm35E2z0jHV9+219aW
GYXZRi7NyFMmnhFZ5qxEv7KG0vUCrMpkuvyJp27ud/R4wu2ucMuAs/M/n3Ys
uZ4WuQQzTxtZipQQGNowNfpx0R8AAMAxh76JdPOjtRnGK954o8HuXW8P1JLo
d/ka3b7tr7xSwxmmi4yWY5JLS1Nef+sRV7DXGWr0jW584+2asvIUEsHponzW
gOeMHCtfa38m0c9ykphigHRHP5FPFfn4W28RP/ho7aCrxTfa7gi0Drk2PfHU
jdbsZItAkehnDXpEPwAAwLEdJ/oFLWeiVPMqkw8c2mH39kp9/Eit39dyaGBL
c+NcgYpndKkZZtUdd5kPDfc5/M397prvhzp37Lw13TJTZFWZJl7qK8gLhDLM
zo8+3S+tGM8ZeD7NJKp5Pu6552/fvb/ZFWhzh1oG3e2ffN66YJ42XVCLjJ6j
DAQa/AEAAE6RFP06xkgn1FQXDNi3DPu7SPQ7g9VOf/uePVuWXEMZmRSBSc3O
Svj9Hx72jWzxjbYOehr/+2XdffdmG9nZ5FfpImdkOJHljt3j7vSMN/5znJbj
NHLFf8Y9dxnfenfFoeHmQ451Q+5Gu2fLk0/dYStQMfpksyDyNHIfAADgVEmn
1LW6dCH+uedvlVv72+0hEv01Tl/P66/X56TPMtIqizH1mqv1X+/e6Ai0D/tr
hn3df33p3kJrgih1s9ebOTn6GeHH9KufMCa/xCANCMBpBVZjMiaZxLhf/OLW
fYc6Hb42u6/JO7Lxq296b7qJzrRoBIqSNkG+vH+S875vAQAALkACY+D1KVnm
Kz77UrpUX7pXDon+QIPTs3VDz00iNYunUzIsc3rXz/eGdgx6a5yh5j0Hu5ra
ykziLIFOM7GsieVJ7ku3ADhLl9TJrffRur/GKKhM3Kxbbjbu+rDW4etzBVsd
gRanf+Ovfn1TSaE2XWRFlkL0AwAAnCLpTnls8rxKldP7uOdwl3OkSWrwJ9nq
3nnzkkwTpTIJqqqqtH/+q84Z6HEE6zyjPe99UFs1Lyk7Q2PiaJL7RlYkeJY7
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
WrNBl04bMmg6naJI8UakpWKz9GCp88B4uxM6/sElIDb69RP6+EWiP5XjEzlh
lsBfPjH6x2r9zPSY6CdV+DiOjeO4OJ6PE0noV15RX5/3wQf1B/s3DTn73IFe
u7d1yLXO4Vnt8a5zutqGhjqHh7vc7m5/uNMbbPEG2wKjW//3de+6tYUZpllG
Top+UgAQLrzoP17f+/HGzMkth5FuybGdk5UuZ9IhWq8lh6MMHZWdRmWlarM0
qdnqpBxVijUlidS4K1M1C9J01+gMS7SGpeq0G1Wpt2i0dxj0dzP0fZywije3
Cxmbzbk7s4sezyv5ZWHFr0uqflcx74WqBW9UzH+7tOofZXP/UVb5fvncD+Yu
+NfchZ/MXfRt+YL9JfP2Fc8dZ6vaX1Sx31a2v6B4T14hsdda9H1hyYGi0hMp
tBHkYbH2FZV8V2j7urCI+F9BoTQtKvqqoOhLW+knJbb/lJb8u6T0g5KSD23F
/ywser+g8D1b0Zslxa+U2V60Ff650Poba86zeTlPZWVty8xan5HdmZHdbs5u
NmbUc6Zamlurox7SGsi230gZrtcblur016o1ixKT589JnBufUJUgKZ+TUJmU
XJaYVJ6UXJGcUp6SUqZKKU1VlaSqS3VpJbJivY4oMWiJYn2awqZLtelIxVNF
Uq9AoyKsaao8TUquRJ2r0UgNKZShgGIKGDZHZ8jW6jI12nSNxpSWJmo1hClN
Y9ampet1ck1ZLqHpz4JsQqvL1krTXL0hj6atDJPP0vk0ZaV1+ZQuT5+aT6UV
0NpCRldM68r02lJNqtyAoylLTSvX6irS0uamaeelaSvVqRUqdXmKqjJFTWaq
VKkkzW9QpdymUt2p0dyt1d6r199voJYz9GqOaWT5DsHUZzRvtGRsy8l7NC//
iULbr4pKf2ur+FNx1V9KFvy1dOELFQtfqrrqlapFr1YufLN8/jsV894tn7er
Yu575ZWKXeWV75dVfVAqITNRypLo8l2lle+VVPyjuPztovLXiua+UFD5R2vZ
r6y2bdnZHemWWlFYzrB3atKuS0i8Nkm1WKVeqFbP06irUlXlaariNHV+anKe
KikzOSFLo8rRa8j+sXK8VRDItJDmSnSGRQbDUoPuep12iUa7SKMrTzPk6ph0
irEonQromLNODKIffvaiMaQ/bvQLCZw4Y2L0T4+J/pje/lJ9Xwp9Xoiz5sWt
XJnx/odrhz0bHJ713tAGd7DbE2jzBtvliK91+6u9gebQSDdBZty+Wo+/Lni4
xRvudPk2/ukvd5fYEs1ckonU+pnU8e5JZ8MxRxGMthAeby9Fz6FLSzhObvqV
qnuR3lnKOXeyXOqVrUwFeW78BLfSLVmZKie1yQGHHHnIsd2apq/UsfPUzKJE
askc7a1zEu9Lmr1CldKg0azXcztY07PGzL9lF7yVW/p+XtnHhZWfFc/91FYl
m/tl8bxviyv3lFTuL63aW1q1f8yBkop+W8VQkWTYVjlUUN6fX3owx3Yo1zaU
V+DIy3fkFcrITL4zt5BwWQs8BYW+ouJT5CkoivLmS5R5n63EX1waKCkjvEXF
9vwC8o6HsvP6rdaBwoKBIlusQVuxpLS0v7TsQFnFvpKy3SWl35WUfV1S+lVx
2WcFtk/zi/6bV/BpQcEXhUXEp4UlH9nKPrSV/8tW+WFRxfv5pbusJe9ai9/I
KXg1J//FzJw/WjKeN6U/I5qe5MTHKHargd2gozrTtE2atNpU9aqUpIeSEu+d
M+fuOQnEPYlzCGX+roRZd8bPvn3WlbfPmnnbzBm3zrjyphlXEDfOuOKGK6+8
fsaV18288rr42dclJFw7J+FakkHydHFiwryUxEpVAjE3hrKkQv1jkRdZpEq8
OjX5mlT1NZoUMnOVas6ipPirE2ctSZh1Q/yMG2ddefOsGbfMnnn7nPg7EhPI
pi2PT6xOVDemkE02tOnZTlroY4StnPFx3vILPl1q3hEzfpuR80dr4Uu2sjdK
Kv5pK/+vrfyz0qrPy+Yqviir/Kq08uvSqt0Vc/dUVhG7Kyq+LSv7X3EJ8U1p
2bfFpbH22Mr3FpXvI6XBgtJD+aX9Ex0aQ3471ff5JdKzisrJ13WwqGKguHJA
+vaWky/w/uLy3YW2b/KLvsot/Czb9mle2WeFVeRP4NVs2/NGy2MGqluVUjMn
/p45s29KTLguMWHBnNkLkhMrVMk2jdqqScvWaHOS1FVJqTfPSSElydcqK/5V
Nf+fVfO3C+Z7klMWanUFNJVLSSU0M2VQepUc/yAA8HMyfrpz8pV9E6OfFyZF
/5Ux0U8q+9N5+jKlvp+TF3fddaq//3213fXE/sHGYX/DoLt+2Nvo8jXLWsjU
6al2eteSrFcS3xOo8QSqvcEaT7A2eLit31H32lv33XgDny4mWfhUKSvPavRP
Nenk4LEeMCH6eX488XnWONbBW4p+6VIsljMynJlmzBSdYZDOwku1RbkF1aZR
lWik0+vk6DQ3Jflqteomne5uveF+jb6Ry1hvyt+RWfqrrOK/5Oa/XVL0QVnp
p+WVX5NYL6rcW1B20Fpizyl2ZxV5s23+rEKFL7OITAM5BcHcglBePiHPFIZy
CohwdiExOtHhnMLRvIIRq3U0z0qmI7l5snyCLAnn5YXJ6+Ragzl5/qwcX2b2
MZFfBbJzA1nSw6T3yiVPzI9SfiQvqEwjr5adS2YCuTnBvFy/LFSQP1JUOFKQ
H87JDWXnkRf0Z1u9OVZPjtWdneeRZ8iPvtw8L3mANS+cbz1SVDySbwtabb48
myen0JGV78opdOcWObMLXHlFTmvRkNXWn2/bb7XtLSz+Lt/2bUHJ1wUlXxaW
fVZU+p/i0n8WF+8qLftHWcU75RVvVlS+VVn1dtXcXfMWvFs5l3i7vPKtsoo3
S8tfs5W8WlT8SqHt5YKilwoKX8wv+Ju18K/5hX/Iz38+N/fZnNxns62/zMh5
Oj37SVPGYybL5nTL+kzLxgwTsSHd2GcWek1it5nguyyEKDvxfKwJy8mLbDSb
Hs3M3JGdvTMn5/Hc7Cdys5/My3rGmvu7vLwXigr/r7j4leKS18vK35A36t2K
qn+Vzv20bMFn5Qs/r1hEfFa+4MuyBV+Xzvs2v+K7/LLd1pLv8or3FZbvt5V9
b6sctJW78kv81mKyS725RWQayC8J5ReTnUymfitZUuDNzffny6yF3vxCf6HN
K8+TJT6rlfzWl5vvzc73ZVkDWfnBzMJwxjjyIxHIkkjf1eyiKF/OOG92IZkG
c2zkyxzIyQvmWqVvUY51NNt6OMt6NLPwSEZROMPmS7e5s0ocuVJBYk9R8deF
RR/bbK/biv5oK/hVXh7ZS10Cv06ve0Cdelti0vXxCXfMSanXMo+x4kelFUPz
F7qLy/ZnW0np8ZXKeXXpmYtpOp+STgFYDLTcj1TuvIGefnBpiOkxNWkcPyn6
pXvs8jM5bhrHy+HOXi6yV0in+CNn+SPt/CYhLjM9Lj8/rqW9YPf3G+yeLUOe
Dt9oqztcZ/fUuP1NLp+U/g45+j3+BjnuJT6/lPuEO7h22LPKE5TKCS+9ctsN
13Mk+o1c6lgT3PE34ZQvyYlewzv1FSLd4MfRscOnTDodoFyNJ1CMSCuHC9bE
8kaOJ0uk04s6KlurJ5UOW6qmXKWel6xamqS+U61ZnkbVUVw3a3xUzHjGlPWX
9LzXc23/KpIqXF8VV31XPG9/+aLvSxceLJk7VFZhLym122xuW7G7oMidL6Wb
T8l3+Xg4Re4ko2MOZ+cezcr9ITsv6v/lWMn0SE7OD9k5ZPr/cnKP5hLWI3lW
6fG5edJMnlWO4xzFiCw0hVJaOJpXqDyXLAkrr5CTR16QvBGZOZKZM5oly8ke
zcoi01BOZjA7I5ybNWrNURzOzj6alU2mCumREx3OzZGeKxvJzpJfTdo6aUvl
tSWlF7kkUxCWFAXyikhmeayFbqvNlW+zW4uH80sHCkoPFpYeKCqTzmuM+b64
/KCtnFQ5iYOFZdFKqIIsGVNxQCadFpGR+YNFlcT+4srdpZXflFV+O8U3pRXE
dyWxqmRT509kd3HFXtm+ksoo8r4kuMnKT0I2ZLCwfKhgMkd+mTe/wpdfFiwo
JUjESylvLZMiPq9QLqQVEkrhLTIvFyBJsU0q4ClZLC8kWUw+gqNZVuXrRL5g
BPmgf8jO/yHTejQj/2h6gTRVZsbmf8gsOJpZcCQjX1YwmlkwkhURyooUU+WS
aoH8pc1WXvNoBpH3g/RE8vTC0YyikcyiUJZUWnDnFbisBY6CwoGikv220n3F
pbuVxqLS8k+LS/5rK/24qOSj/KIvrEWkEDhUXOYpLiFlFXdWLinq7C6Z/2x2
4QO0WKKXOglYaEau8kevHqVxxh9+9o5xZesJo1/O/ZnKNftS9JOFdFxGelxJ
adwzz91s9263+3uGfc1DpEY/Uu/6/+y9B3QcVdaoqwn/DMG2cueurg4KnXO3
JAccMcE22WDAYMDGQbIsyzljTIaBmSFNYIBhgIEh5xyMwTjjqNRS5yzJNv99
76317l33zt2nTnep1AqWjI0HvL2+VavUCm61uuo7e59z9o7VdYTrY6m1wegK
LuQn+CNL/JFMsE+P/ihRf3PHbaD+9vDKvz0zbcpEaYW6UKsSqfmZiIEYgvoZ
wYb6frbw99T+6lk2T5IAROUMXS9EcwKkM6xCThbaSSQmkdQmkrpKZR6SrleM
FUnHlYjG5xdNGVE07fz8G0vEtUrl2rLK31kcT9m9L3vGvuka97FnwjfeSXu9
E4+4L2h1jOmwVgWMLoh04mZnwuJKWt0JC5w4ucDZHDUYoyYDOTGBZy0AmC5h
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
OIM1YrBG9KZMREOWwHHz41y8H6e3XIsh5bCk7Nakg5Cwwy3RlL2rn0b18+44
tfwA9Z8ucqzKyW7YRz4EHmhc0ZOCHv6Llt15Mdi3nw71D4HMnouA0QTACfnQ
YglZrWGbLWiz+W32DrvdR3C02u1AmwOONu4cjrY2G2Bvt9rbbTagw9ob8vO5
jSr0nWzuWYLYl0y2wWJKWIwpM4GekyUxVvJmg5CfRv008IcjPKsdrvHPWcfc
xmirRGIY89OmRaretX8R5OxiIPWzv6bT/Wr2F1r2F2XaPJcr78GHp7Z0bOmI
rm2LNJAkf2QBQOwfr+1I1Plitc3BhV/vuaa1fWE8vjwQXhoILwmFFwfCxPU+
XvqZYQBRf0esdn9T44b1F9qMpaQ/l4JMr5OaY/11XAV6dSTph9zhARi/TK7Q
SxVWkcJbrBxToJxSwF6VL2soKrpHWvS4RvVcZdl7TufW6tE7q8buqx59wOs+
6LIfsVvhfuW3Wf1wfzNb4KYUNzsz3jeT+J0sUa60xPXWqIFi5lblcUMCg4X6
hcgCgp0s3C3aRFQINyirMWIz0ug+YjbAnSpsqAzpK+iSJEqoohJGCwD54dlM
ac4wIEf9yZ5odKjqp2u5o9mY7hRjNgl1T4OyvurPrBagaXxu/QOd7eUXm51C
9WeCXC5EHfbRkvnezB40U3Z5Ya/lDb0MfprIrsnvob89IH33gwz+NbnAGy+z
qsREVs11GMztBgOPz2hut1jB4+D3ZqfroMv5ndO1x+n+1un8xunc7nJ9w51k
cNl3uFw7nRl22Z27BeyxOQ9ZHM0WZ4vZSUtPdFjtQbM9zC3UzCFqdpCtrOSa
MtELKntlWRJWc2blTHavClk3azA22RwvmR0NjG5MUXGlTKxi5TKuLrJqaO22
EeTniaDPNSl8ypawKlrFl0hfrc7TavMqyvL0+rx77p/sCz3YFloD3vdF6nyR
hVyefyE1uD9eBzQHbk8cW+kP1UVjDXT/PreVr5Zb15dRvz9CT2iuYMlnX90+
+3q7WllItK5gWdA7SJ7710f9wnarikzVVoWCdvzkio2XmqTFZkmpTVzsLC32
lBSNFYumSuVXSRQ3S9UryywPWsf81XPhq1WTtrpd33lsh72OFo+z3eEI2B1R
mzNpd8Zt3LIoMvlu4JeocTcTO3g/400y5+hI6m0At3LJktn4BkE9t+6dhPNU
dhYTDXgBUHzIAuiD1gzU/jQcJkGKwRgH9GYYUcAoImLi4iCyyJ/cewWLmR1+
m6ODQHax+eyuNgEtDlezw9Pi8DQ7qoAmJ+Gws+qQq4puBDvgzrDfU/Wdp2of
2R5F2O09eeDb4ed814f9Lu8ht+ewy3XYRY60ng93Qp5hm52H/Bbwu/itrpDT
HXa4o3ZCyOKgcDf8/vMeA2VCcqBDI7rmLWNwC5/ozpyE+8dKiVhtEauFg2Sw
qYLpQCVzzjHciQN+uYJw9eYA2zkFXyP4fbkZ855zeJPQfQ1ka4PVQd8t3BuG
vMi+zJvEA38C8kfJvDGqDrg9B9xwrIJ3BX1j7PVW73R59nird3tqdnhrvq6p
+cLr/dzj+czt/tBme9tkfMNgfM1ofFlveEGv/1tFxZ/Kyx/TaX+nVt/HqjYr
5XfKFXcoZFsUSjjfwnG3UsHB3KNQ3CuXE2RK4D4584BC+Qcl+xd1+T8qjS+b
bK9a7O+5qj7zwP84eqtn9FfuTK2hHe7Ru9yjd7tG73HXfEeec9VBpxd+BfhF
yDvK6W1zVfndNe3OqlanF9728FkYjexzuT6r9q5i2In5oypLCxmlhGtwpeIX
/KD6kbMUrs+aVqnMFMFWluo057IsqcZfWZ5nMvzCZstze/LWrPe2dNzfErij
NbymLdzYEa73hxd1hOvA6YFoHSUYW5w54eA38gPB7BcQ6NfHyDf6Yyve+3D+
VTNsKpmYLLVVaNXyMjjKGLUMhiQ9/0h9e1KGSFHKykt1MlLZXisREcTiSonE
KiqskeRPEhVcKhp1jSh/dsmoRaVFGxjZIxW6l72ez8aO+3b0GBLUe2rAeodB
N1yiEojY7XAzT9gcCaudrqjvb5EzWTGeoEuMKsm25XS5LbOLmUw+WnK2vJEc
PjcYgG8nK6w4iYD3g2Z9yGoMwgDAagxbjRD7J+1mCFUAsAbdF99psifNZFsW
BD7tJmtET3ILIYPVZ7S0WKyHrLb9Dudep3u327PD4/3WU73NW/O5p+oTT/WH
nqr3vDXv14x5t3rMm1U1r3lqXnR6nrM7/2Z1PGm2/t5keUhvurdCv6WsfJO2
fJ1aCzfDZSpVI6NYyiob1cwJWaZRLdeyK8s0q8q1qyt0PGsqyzZUlN9rND1o
ND8E/wvHw0bLIwbLowbrn02OZ+3eF11jXnSPfsk79l/VF7xSM/716gnveCe8
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
WDdXWu4yWu8xWe4zWR802R40W35ntT1ss//e5njc5vqT3f0Xp/evrqo/czzl
rn7aW/M3j/fpKs8z1d4BcHOQ82erqp+t8j7j9TzrGTpVzzo98Ed/3GT/vd78
sN76O4P1IaPjQZPjXpP9XovjbpPtjgrjxjL9eq1+FVu+XKWrV+lul6vmSFU3
SZlZIuXVxdIrC8XT8kUXF4inFJCXZXKhZGKheHyheFyhZEyxtKZQTKkuEnuK
pa4SgqNUapfIubeH3CpXWuRKk6IH8pYgdW5JD1+IBQjyHlfCVcly3ScJGhXL
NSumH/ISzyHj9EGBwQC95Mm4ItufEewPlMkkpAGfVLJ20aKu9vb/lUr8+/jR
/5lOA/8rEf/fydi/Y9H/Ew78OxL6dyjw73j0/21tev2xR6dXua2sUictLleK
GFmhgvM+7ZWZ094XE/7IWQqvfgXxvo7NW9pY9dnW5aHkgy3BNS2h5a2RRqAt
uow7aWiLNLTT0nxDi/dpYr+P+uuo+uPJDW0tmzetnlCt/61L/F/VJedXl4wa
XVo0TlQySVxyoahkemnJtWLxrRLxCgVzn678aYfjXy7Xx+6qbQ73Xru71UYy
wLRwWc+MJy1DyuXbSWhvtaYdjkwFey6ojxiNNJNPF0jTY6aavSDeF9qfpPHB
8rRmHQT7PVvz9HEz0X3YZgraTX6Hpd1p6XA6A/DELFU+G6mwesBFWu3sqhq9
o3r0F97q912el8zWv+r1D2l0G5RMo0S2QCS5qVh8TXHptMLiyQVF4wqKRhcW
VRcWOYtLLCKRQSKpkMjLZKTuENc1INMolkf4IavW9kWt1upUPWiUagrcrUkt
Yu7+PTjknzKzKJrumCQrMbJH8iCtfcT9NC2HhmttoKYFk+VKVqagRVS0SvJ4
xgVc3lWnkBG4fuwKRi5VKSUMQ6d76BdolUp4f5Yp1EIqFJpKuaZSwRplrEWs
tIuUbpGiqlReUyQbTZDkwlVpGF1YPAbGEvlFEOHyjB9VOPn8wgs5JmeZMqJo
6oiCKSNHTRlJ0t39cmH+CCDz4ch84JJRozgKOE5wDhH3xSPzLx5RODW/6ML8
oskFJUA2M1MyTgAZ8hWJqkpIpWh7ichSKjGJCKSpHxhcpjAwmgpGSylXanQM
QQtH7i9exkHO4d3AaLi/uJpzNcv9QblFb+RmAH/NTIN7OFdn/5rwpWxPVC5j
ssWx+5K9q8iGe8ws4FH09GWm56xCShuOXD/rmmgkcPxYZzIR7upOxjtj8e54
oiuW7o52dsW7u2PdXYmjR+PxWLCrO9Hadvjlfz1fVeOWszKpolSm6hXvo/qR
s55MDX9y+5UrzOWiCeOK//LXa5vatrT417aGM2E+r/4sS33RJYFoxuOh2OJQ
jEbx5HxI2X5+DBCpD0VWpBP3ffrmgsbLNbOlv16Qf/7yEtEGkexuufwJne4l
g/lDu3ubt2ZPDVl+f7B6dHN1Tbt3tN/lDTnIDC9Z7gthNbexLsaVXEubnUmL
PWV1pG1OACJ9LqK3kiXBZprJt9Aa9VxNObInKG0xJ61meuT2CxuEFeyjJrJ+
L11h7aqwAalyC2ksYnR2WT1JsythccUspIFdu8Pd7HTtd7l3OOxfOd2fOMa8
a7/gFfu4Zx2jHzDaV5dXLmBUs6TiaeLiC8WFE8UF48QFVaX5rtICp6jILimx
SUrMMpFZLtXLxJUcpLWoPNNRlHQQYFS0ToGwSJFcUKswW7Ew8zU5j9CKhblw
XYc0jFIIeBbIeRDu+Zk2RgpuvaVMqlTIVHIZfwQUvY850NUaPahI63k44d+N
amV2XEFMxMJ/ywWXZIiSeZJqFQ/IqEzN6kiFBmUZq6xQMpUKisJINnTIDDI5
l9CQ8cCDmZa4MjFpiSsVGyQwrBLBCWCWSnpDEiYWmZzLmZBsCY9ZTBA+IsRC
oukTA+E2hZxLlCap0iBTwjOHoBuOgFnG8BglpN4UPH/6i5AkjEJWzsjLGImW
kcBRo5TSC5mH0zrDS5zrZaEgwB9CTmtTK7lCFwz3F1dxf3H6Tsi8H2gZjKwW
ZT3La5mepbaCNqCyXs0u6dcM60hPwPsyOfU+L30lIzVZ9F9s/TSZjqU644Sj
yc7j6fT3qdTxVPpYMn0s1XUs2XWUHDu7k51diXRnPJ2K/fPFvzsd5nINeZPQ
X4T3PqofOVuRCffBwXVXzhZVuQpffW1hk29TS2BVW7gRoNKHSN8XXdrGHbnz
Jb7oYl79gon7uoAwvZ8dGAgz/z3qj9STNX6RxcFIYzJ6R/DA+pfXjX/pIutn
Y2t2jpu0wz12j7PqoN3TYnW1G50BkLvVFbE6ojY7F85bYpXZPfJGa9ro6DQ5
02YXSL/T4uq0kC51PBDRZ/ZxZ9P42XX4Jr5TDEifeL9XCxtL1GAmjeq41nIR
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
7QfH6kn7VJMpbLORzptV4w66x3zr8HzqcLxlNb9sNT3nND3mqLjHolmjZ+q0
stnK4islIy8sOX98aX5NSbG3VOQSiZwiiU0isUglZrlcL5fpVcpyRg5os8un
ycJ7FoL6DKB7gNd9do2eglTC4f6R/fIqVuh9lVwhVH/u69xrhRiCnEpOu6rO
3LuXz/OTlTMKsirpoqlTosGOzkQUAPWDyumiffA+2L8j0NbQuFimEMNVTMth
zbj80r17d3///TGq/uPHOo92p0JB/+uvvTJp4niWZeRKiZzEPv0vOkWQnymc
+jn7c+ovUCp/8dTf5zf51/hitcKE/0mrnyzbSyxui9XSYQD9Gqr+Y20bDj9/
4xszDb4HZ3a3roaQn67xC8Qbo4FV/i8Wv17rfXeM6Uur4xOj8T2j8WWj9e8G
25PlpvtZ3XqGqZeL54qKZopGXiI69wLJuVWi85zSEVbFKKOyqJwp1jClpFSO
cjDUmaJzmdp3pAQu22+VuUwhnV6b0Dmo8XNi/35e5+zNc/At4UOE/oQf/nOQ
nwc/Y/XzgPoh5FezzNzbboGQH6R/NE2q88VjoaPHIKqPHT3eCepva2+edcNM
MD7YX61lxNISg6kCovvt337V1U0C/0Qy0nTkwNtvvTH/9rlwBWm1ahjkKxhp
tj8gqh85S+hd1kNVXF75q1feXgLqJwrmCvOGI5ntePQ8OJxsPx0P8NIXjhDC
4YauwJovn7301QZHx0tzOzvWBmNLgtGFQCi0JNK++dXHb1kwST/Por+F1d2o
UM6UKWaIZVNKxGOKir2FBfb8UebCUdbSEpO01CAXlStFOiUZvajIFiQpHfCr
uCLwfclUQCU3My5I7w1Vea+tcIJP9dpC1d8PV5/pmySC/DwQbg4FNYP64WTz
HRu7kjFQP832Q9QPTk91xo993wXHQ0f2V9W4aeFr6nQYAAA3zbnhj4898twL
Tz/3/DP33HvnNTOvYFQyibREq1OpNcp+6xWc8V8fQU4ngv25ChbUbzD9+sMv
1rSG1p8S9QsHADn5gWCkIRla9c6zE59Zazrw5s1x/5pAtIFTf60/2Hhgz9rG
uRe4tWKrnDRAscqVVtIHVqmTSRmpSCmVkB4xjIIWpeFjdhnbg1yVKSI3oKA5
p/edqae95PhC8f3O5qP6EeR0I1S/TqsG+8tlkr899Rde/WTXHreXH+L9rqOp
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
7SeI80CsJN15cD73kP4dMpOmSqCHN8AnC2m0UHBCJPLoIw+xjUPPGmxsbgH+
bGnZ+/um64YXBHTygE7r5jjoAGiFzoNek9gW8eeSaDWMrP9zE0T/wWI2FuRH
Uf1i+6dSP+7qs3vXjttuncyR+gniPCD1cxmrv7W5paOp5R9NbaUbNz05csht
Bs0kjXacQh1Rqq0qlUlF6ieIbmA2GUZdNgJdLx7VT6V+zPDfuWPb5Ek3cfHd
/KgDQBC9SN9JvzckeF6i7wq0IVqNiovv5vfIw1OhhRGrv705pv4/G1v+u7Hj
H1t2rpt47bqivB9szpkyzSSpKk8is8kVoH6cOxDTe5+aIC4qIOq/dvzVXdWf
fnEfqH/SzTdm/eYJ4qLkf7L6H37owaTqb2lpA/X/V3XjP1ev23/F6NKQtzya
vzc6eJbVeZNcHZDIzCplgv3xbXvpUxPERQWo/5bJN6P6WXVLr3542pY/Nl9/
3fis3zxBXGQMlDS/859oYCRXf0srhPniliem/qraf61eUzLusoqgsyboOxXN
W+sLvaIzjJHInDKpSa0U5v2VAhT1E0RKQP333Xs3zvVnHvVv3LDuyivGZv3m
CeIig9T/0NQHkqi/uQX++7Ox6b+qqv+1ehWov8rvqvV6akLho+H8xXb3nSpt
ZNAgm1KhI/UTRAZYLaYnHn8UKpf4oN70W/pAxVyzeuXoUSOzfvMEcZHRdbY6
Pd14566y1uowua5HJB/270GXQLwdKKh/6oP3QwvT0dIcm+IXvI/q72hq+q/6
un+uWVM87orTgXCVVyAS3Z1f+Iold5xMBYG/UavCYX/oTvC/IuFtSf0EkQCo
//nnnu1W1A/2X7H8l+HDhmT95gnifzjpd7ETc7aUxeKOX2BPgKFjufEqwCjC
EEOTFNELU2bXi9MVUP34NLP+HOr/V33dmXXrNl87YVfBsH15ww5HhpSGCw8V
Dl/oCd+vNoRzBlk1oP5YyK8V1K8j9RNEFyxm48xXXxarH8zOVvklWV0rqH/Z
0iUF+dGs33yGZHeBT28twiIuGEnV2T9JkwHITweAVRP/Annp67kYnE4pXKiF
J3Li7oNBqzNqNGaNyqxRWtRKK48cgS8tao1FpUvArE6OUcP3JcT/we+XAf/p
NVp4jknLWfXGB++9r6MlyaHh/KL+xqY/yyvrt2zb9cY7+559ofiJGXunPLD3
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
Oabjc+1+hnOvsW3EUtM10o+N8YKINQqTWmnSdT4HHxfWWMUwCJqDR6w6NWDT
qs2cRmvkX6PT810Cg17DEzc7yt2sFZZlCUu0ctV8FjSUdpXUqcpxKga5FTke
pcSnkPiVUsCr4vGoeZJe4wU8E14S42whJsXbzZK/kA3KBL8UkAQkg3ySS4GA
BK4lwRxJSCINS2VAnkwO5MsVQKFcCfCSlSuGKpQjVOrhStVIpfoylWaMWjdW
rbtCpbtSqbtKxV2t5MYruWsV3PVy7gYFN1GhvUGuulHGh8mTZcrJcsUtCuWt
cuVtMuUdMtVdcjVwj0x9n0QD3C/VPijRTpVpH5LyPCLRPirVPSbjHpPpH5cb
npDrpykM0xVG4GmVcYba9KzK+LzC+LLC9LrK/Lba/K7G8oHGPFtnnaOzzeGs
H+ntHxvtn5gcnxodn5nsX1nsi2yO73Jd39tdP9ndS53uZS7Pcpd3lce72hNY
5w9u8of+8Ie3+iM7g/m7QgV7w4V7Q4P3h4sOhQcfChbwhPKAw2G+LAnllQYj
xwMxTsQp84dO+UPlvlCFL1Dp9Yup9wca/b6mgB/Keq+nzuOud7sbPB6g0Z2E
ZsTl4xGuW9z+Jo+/weODlzS53EC907PP51l/01V/HfjjP+urE/bw54P91jbw
Pu7xC/81tjW1tDWfaW3679JjDa+8fnj0FfBxFprMY2SX2HRyvUap1WpjQz29
17AkHAxEEAOUXJvl228WdivN78D+vfffd08/WcvfdYlB1zBcPFfbXfB9cMmU
UcdBfycWtqtVGNdjO8Dgku3FmnBjRh2PScu/Lb+bik5l4pOvVDZOY9Or7HCh
UUCginFrrkbj0GhcGo1bqfIoVF65HPDJ5DhdCzFmWCYJySQeAXgEvsyTSQvk
0nyZBALJwXLJEJlkqGzQSLnkMrnkcrl0jDxnnFwCXCnPuUYhvU4hmaCUTpBL
JqkUt6iVwK0a1S1aBTBJIOk1lLdqeG7TKoHbNcm5Q91Z9hCVIgNUwJ0q9V0a
1T06DXC/TvuAlmeqVvswxz2i1wOPcvrH9Abkcc7wpF7/lNH4tMn0nMX6nCX3
BbP1JbP9ZWvuKxbHaxb7Gzb3W7mud23e92zuWTbPbJtnjs07N9fzucv/hTvw
pds33+1f4PF97fYtgpDZG/zRFwaW+vOX+fNX+ApWBYpW+4vWBAb/FipaHxoM
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
JtDsCnRmvwvz5jh1His7xx/iSfX4FxWn2u2p8ngqvC6g3Ocq93tPBbwngv7S
gK80ACV/Sg4Omx8OANFD/sihUN5Bf97BYOGBQEFpZNix8NDDocEHQ0V7QgXb
/flbfNGN3uhqT+hXd/BnR+AHZ/Abh3+ew/9prmeOzf2B1f221fmaxfmS2T7D
ZH/SbHvMYH3IYLmPM96t09+lM9yu09+m4yZpuJtUWugVX6NUXqGQj5PLxsik
o2WyUXL5CJl0sGQQUDDob3mDLo0MGhTNyYESCOcMCkgkeJ4CfwSDTIqlVy51
KiQOhUQoZU45v82FUynHU5NcSjVgV6pcSq1DBdf8cYROq2nypInFB/dDVIKz
jW1NjX9vb4MSmqOmpoav5n/pjwRUGiXL4WEb9uLem7FtNnt7I1+CuDiAEH7I
4ELQOtgfKlTiOhoho6a6qgK+BRVw+/at1117jclkEBLntOwsVK0Qbqf6Eed5
6rp4+E7oxvOn0ui0Sv58c53abNCYdCqrRpWrUtrlUodU4pHkQPuTJ5ENlalG
y7XXqPQ3a/gN8aYZc6HF+8zq+yE3vMYd/cOTv9tXdDQ0rCwwtNpf1BjIb/KG
mn3hJl8gtrjbze+RIkiEn0cWpkrdsX3JcFrc6xeeHB/Gt3vjgbCXxcvgBQwA
xdFibAqAdSTO3gEGh3YbkoXwOIDP9qYTD+yz4X3xl9CRENIG+Ov41na40523
yu2DKJIPJL08p30+Yfc8fhaDx4M7zYYFgmmo8Ie7RWUgkiGxl3hDSMLPxU1x
Ex4px839/EL86w9UBAKnA/yehGWBGHGl8hz3+4FSYRveE6EwvxNvoPMIm9Ig
D/QDgePw3VAYLo4G844E82L+9eUBRwIFxcFoMbg4nHcgmg/sFziQV3AwvxAu
9oaje0KRPaG83UH+FLztgeA2f2iL3/+HN7DZ593o9q73uNd6XL+5Has9jpUe
+3K3fYndtthuWWQ1L7RZgflWy5cW0xdm8+dG86cm6ydGy8dG22yt8QOt6X21
6V3owSoNbyoMMxX6lxXcCwrdczLddIn6ManmIan6AYn67hzVFIlyUo78Boli
fI7iaql6nEw1Rqq6TK4aJlcPVqrzlaqoUglEFIqgjCegUAJeudytADvL7Sq5
XamE+gXg0Yf8SYjQdHCaztMo4uAjZyXcCug4lbYTDSPehOjPRqdUyLwex5PT
Ht+/bw80Tf/+9zPgfT7Hr7Gh7OTxRYu+vvzyUZjG07WJOOt4LFI/QSTDajSF
/QGoTSD3ppb6ZjwCu7WhpY0/ExPsDx3u2tralrbW6urKRd8utFqtRrMJAmy9
wQToOAOgNxr43en5nrbg5Ziy4x0D0fnpGugmaLVpyq6nyeMgnl6jNCDCOXR6
rcKgAWQmVY5dcSkEGnmDLhmW87crcgbdJMm5WyZ7Qql9SWP4wGD90ur6welf
5QlvDRTyG+ZEhp6KDqsIDa4MFVX48vncPFe4zhXqTGl2+thkfcK4bmwNV3wk
uXNhlLAWjJ9u9ob49WKeYEsgxOapWYAvHnjno1qnEyeX4zlajniaVmzTV5xf
xq4Frofi96SNl3WiBxlnfenzVfk9lT43xJJlPt9xjCJDgaOhUEk4dDQSLYnm
HYrmH8zLLy4oOlg0dF/B0D15wOA9eYV7IkXnZHeUR3g+z+78viFalCG78op2
Rgu35xVuixYAWyP5WyL5v0fzN4XzNwKR6PpwZF0ovDYS+S0c5YnmrQ7xGyD/
7A0DP3lDP7rD33vCi92hb1yBBS7/fLf/S7cP+NzlBT5x+T5y+t6zud+xet6w
uADoSc40O14221805c4wW54xm580mqcZTE/ojY9z/CFBjxoMD3PcVI57UG94
UM/dx+nv0+ugvFurvlujvVOjukOtvl2jvEUtByZreG7WKG9UySeq5RNUimtV
8vFK2VUK/qAlYKwsZ4x0EDBaeumonEHDL710yN/+NviSSwov+VvRJYMK/ibJ
u5Qn/2+S/EHSaI40IpFGcuQhiTwkU/jlCr9C7VWqPQqVW6mCWNvOo+pC7PFc
XvEai1JpVimMKrkxVsr1agSqXmzTDE4tHGWl6txKSxvPpxWj1SkTwXU3mKXT
FSGasFpMD9x/72effrxxw7q9e3Zt3fL7t4u+mT7tyRHDh5qMevihZw/sq2Kn
VXaef03Z+ASRBAP0h9UaUP/mjZsgugf1N7bVN///7d15lGRVfQfwfyPM0l2v
3r7W1rW/rV5tXT3TM8MyqCjIJhgdkShEjWIEjVFRJGL0KGo0x3hMVBLJSSQi
BI3HBQUxAg4yDDLCMMAsPTM9PTNsOSf5JyfJyb3vvldd1dv0LM10T33rfM6l
qV5oenrq++599/5+oaMvHSLpH5bMmnrhhSOvvPLS9u3bbrzxg+G5OSuVSmXI
I5UlV9Qp08paZl7XSorCVvByqpwO/wKa7GxdeG1PQ5w+1LnGaT39tenf3LAX
PN2Sx/bjVcSkI/K0N7qQaPLcmMBtEriLFGGLrl6fMj+ezXyhUPjbUuW7tvtD
J7jfbWz1Gr/zmju9Nkn5Cbs5aTcOVusHKz497R4eeD9UZbPyaFWWHX6f7K7W
Vn0S3LS1aLhQzzaSRbnPisDE1wnRtrTuqu+svW3xJjryBf3enWb00iKuCUOn
5zS76b3dA15wwPf3ebW9fkAms6zG/i4v2OnTTjGsjwztuNpoPd5o0dllK/Kb
NvXIaPvXo80HW/WfulUyl7yrQieSdxTILDL7zVyWzCL/JpP5WjbzlXTqtlTq
c6b5GcO8RTVvlvWbZe1Tin6LHGFvkzFmxPRPKsYnVf0Tsv4JRSPjTap2k3KK
R/aVjzHGyMd/VNH+TJQ/JCjEDSL1p6L8p4J6vSBdLwrvF/j38sJ7kmSU3sNL
706K1yaFa5PSHyWkaziZuDq0hZPempTewktXCtIVgkhcJsjEpaL8JkF5o6i9
XtBeK+ibBW2zoBDnico5grxBEMdFcYwXRoVIm+ebPO0a7HGcm6Tsfg4f9Vsk
v9WhRFlKkDfKUrIsCkWRC2fcfEmVolET2FhUpbKuFHTarzls3KzltKiwJJNV
oze6FafDwlY6/dvac/ubxDT7MPLpdD9Mj/B5IwpQQ+6elDfDw/I9CWuE+u6t
z1nmi8z6Z2IThLlyn83TWXmuQj432m5e8qaLrrj80jdc+LqN4xsKI3m2ns+q
bMWlupRXIfqXSbtSgMWYb7sL+2tLor+cL7z/T95HJvUk+qeOHjh8ZOKllw+9
+NLkiy9NHT1y8PCRgy+9OHVg/+7v/MO36oFLZvxZSydyll4w9KKul3XdM/W2
rozJ9PD7Bk5oilJVlkZUOkk3dHqFT8vshGNYazca4034ZIxfUgzZUnkio/A5
kd4cJK+HbtiadlyWzlfki2XtSoVMl4z36cZHDOvWdO7LheK3K87dXnBf0Pj3
WmNbvbWj3t5Za+70aVm8vZX6/nLtYKk2VfYPlwgvxOqlV7sHwNlN227Fm97z
zlOuz2b08Sq93Y3+8GC1HZ+LZzf0o6UDMvHv2UxOTZRdVm1vT8nZXfZC9Ajz
wRKtukMPVTm1PV7tWb/Okn27V3+8FjxWq231va1B45Fa/de1xi/94Gdu7R7b
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
qLceb7QfbYz+qtW523H/Op36aIK79uyz3r5m9ZXDay9LJl8viRtlpS0rLU31
dalqiAVTGDHFjCWnTckylXgbebQhnK2cG/FxKvYww5II3ejvyoZj/83r6dvZ
8XJ9uvte+qVMc775++woN3ubLp10lM+4QjjtcH8flgKiH1aGePGT0U1NTZHZ
vt6dCmWT/AVC6svu+t96bdr+o2Ifcmh9WjJnZ2ffFugkO9nbDNSJ+o/EQT9n
H3mHVcjpa8vSLYXHyp5HE/moS9pht0ouISZpZ9LSQadMv3LUZ5yemo8Pyzvh
LYlqKLq62F+u0dsH5VrYl61biZ3W0KM7+QvOkYJLxom8vadQ3V12nquS0G88
3eg8Mjb+o9bYP9faX6u4t6ZzH9ZT75S0N/PiRRy3mU9uEsSOKAYSX5X4osiX
VdVWNEfVbVUv69qILuUMKa1PVzvp/bNY+LTX3Oepjbl24YWP+U5h6fM8etsq
LYUZFZlOO8z3YSkcu0ABwHIwK/qlDK2LFxXG19WRRPLCtea3g3N/548edvxu
E5ND5Qo76h4Wl5sj+tk42dM75pAzs9dM/N6eUvOsvk3Ui82d7Omg2p3jdwva
04Ny1cJktRB1prNLk1W6jT+ugksvG1jrk72Vcl/0V4L95frBcmuy0qQXG7RN
mz/h0Jp4+7xgr9fY47d21tpPBq3HgvZDtfZPqu5dI6XbzcwXZfPDonqdoP1h
UrqEVy5ISuO82JAUV9FsTSsockaVTVXSNIW1Arcsq6CnCpqVV3V6wFxXZxz9
7v2zSL0qp7xPV/QvT3iVhlML0Q8rEY3+sOS9ET9TlJXzOPO2ant7c3TK92im
V4sHqvmDlfwholycnKtV3JxNYyfj9YGZFwBxcdpu9M82vc4f382P9vhVw3sH
Yb/yoyUq7HJe6bkACFW7ne/oav+hSn2y3Jgqtg6X2iT9J+zm7lpnV73z+0bn
8da6hxvrfug1/852PlsofsRMvVvR3yYob+KE8xPJdUNcg5M9QXVFtSIpFVkt
yLRKTFiiXNI1Gvp0Rmkq9C571sylaPTnVbOgGSO6kdH13kLi3VInLJTnmvLP
PHNHXlD0eSf0/RHf85GLKx2ztCFrxl1aFmnJvx/kPiwBRD+sROQlUQ6reHdf
GyuWNcprN6SLWzvj+2u1g44dRn9ufyVLRnoN0L+p/jj7xc+K/p5mN3NH//Tc
f7qsPdulz8ruHS6Xw60IzlHHPVp1XnC9I25t0vH2O+5e19/t1Z/1aa3+p9zR
p711O4INv21svM9t310Jbs9W/srI3SLqN3LKuzjxUoHfLPIbRakjKzVZqapq
yTDyqVTWSqWtTJqOqehQm2kalh72D1KstJnKGCT36cY7I+wYqGo5xWB15KL2
oNFPe2mjv/exHKL/eC31gr+J3ftwqi2qIjHAadWd+8x4stsCjz2T1ZSqKF80
nLzbrj1J8jdo7KP790r7vfyElz9QKx905k38Y18S9HWbLS8Q/b2i6vcl90C+
Opl3DuXsQwX3cKV2pBoctYOjjk23INrVKYd2zg0vKhwS+s/U6r9rtB9rjf37
2IZ7as1vl+0vZTIf14zrJONK3rg4qb02qZ3L6+t5dVTUA0X3dKNK+w5otPuJ
qeUsjeQ46wZI5GjJOzln6fm0WchY+Qy5GjBSJO4pxTIVQ5dCsqUorNhdqr8l
SuSULvL3fyn2R7z4x5LPso/Lkhb0wYszLAX8dsHyN98L8oznU2E7vNGh4T8X
5Ptb6x9rtn/v13Z59m6vTOxxyxNOnN2OPaNT/MJjD7Y5PzwOUGGze5/N8XtG
9owfC4jJav1Aqb7fbu6xaQueXU79aa9Ovr0dQfBEI9jeqj/ebm1bN/pgo/4D
p/qdYuHLlnmzJL9vOHH10PDla1dfuOqsjWtW1xOCzaslUc9LelY2U2xSHhey
oz8KkuYmncWHBx9I7tMT9yO6lDfoBQC5KsibtEVRNqWR6CehT0ZdEzVV0FRR
1yR2qt3qPQXfu1t+KaPfXE7Rf7w78BH9sOLgtwvODCykSPpXZen8JPcObvgr
ldIvNo4/1mztcJ2nS5Vdpcreyhw94ucZvQnbm91HPn6ejf5EeH5/IjzKNz2y
Z8I2NxPVxr5qY3e1/kw5eLISbHOCrfX2Q6OdhzaM37d+/HvtsW/UGp8rlz+a
S7/HVK6Shy6Rhy5Uhs+TEhvE4XEhOSbwdSHp8Qk3yVV5Pi9KI4qWVdSRsMEK
rTYfnqOnMaqrNLg1JaoAE/5AaAtyWcjIYlaRMqrMyt1nTLomQJsPapJKcl+X
iHgnOXlY3bI23eI2faVy5nhML/Wf2CL/fI/5v9rSzuKXG/q/gNdnOHVwYQkr
2uwT3ORFMmOoZZlv8WsvEbnrBO5WXfvbTPZu278vaD3U7GxtdR5tj21ttX/b
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
     "], {{0, 690.}, {681., 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->72],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{146.09090909090781`, Automatic},
   ImageSizeRaw->{681., 690.},
   PlotRange->{{0, 681.}, {0, 690.}}]], "Input",ExpressionUUID->
  "b335b453-bfc6-4a01-beae-11677b0a91b5"],
 "\nwe can notice that A cannot connect with both red edges.\nDue to we have \
to change color if we already draw a  line, I would like to group a white \
line and a red line as a group.\nSo while tr(A^(2n)) is not 0, that means \
there are no groups are separate into individual white line or red line.\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzsvXd8W/XV+P+8vr/n+31aknjJGndf7XWlq708shkhkBDKKKWssjeEXUop
FAqUWdpSZoCyC6SUvSEhZG+SOImXbNnOchxGn79/5+rYN4rtOKYtkWwdv97V
S5ElI6mf13nf8xnnWM+5Yt75/+e//uu/5v8Ibuadff3Uq68++8YTq+AfJ10+
/6ILLj/v3GMuv+a8C867OnXO/wcPvg/PvQr+p92XRJ4gCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgiNEjS4J+SwxGEDUO8luroFH8
N0kQBEGUGKLA6bdEP6RUgiAIYggj5KGUon4P8pIlmRIEQRDSQB46gkYpUR0J
UipBEARxIOBNjrWAWOEOy5jhVuBZiTLW/wgjThcTBEEQ4warLGIearfJYNXC
R7weF9yhLPXfhZRKEARRHiTi0XPOPvOiC88/+qiZAcWHD4JVIT+lFPU/D+mV
IAhiPOLzuhc89URXrmNv72647d2za8/unZ9/9snDf3jw9ttunX/1lef+4mw1
qIBei/5WxwisVWCdHKtYmEStMVNjSBoMIZMRHin2GyMIgiB+QMCniz7/tLur
s6c7t6Ona19f7+5dOwCwKgB6hQf79u7ZsH5tMhEr+rstcUSJBSSZdYoW1WiZ
VW25160+H0nf7/SdXmNIsAxuXtJWqEVGe2ZevnA7hOJ/ltJh5EkSmkIhCKJY
DF0PhfwUfAr5KWoU7PntN/vgFu7v3NENPoVbYNfOngfuv7fo77/EEQWQJmuT
2CBjOvKImge8iZXpGRvVzNJw5uX6qYmJFbLZIvOaT/NKZUipBEEQ44bzzj0H
fZrrzEJCClZFjeomxYwV79937z1Ff8MlhThwB3NPuLXxvJPjvQw/pdJ4vxxY
GZu+TUllA6n22LQPEtPnmkUfJ8JzMEUVBctwMiWl/otQukoQRBFxOe1bmzaD
TyEnxQnenu7cF4s/78i2gWfBoZCowm8B+G22vbW+Ll3091zKgFIdPOu3sMka
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
4w9hQOp9e2Gg/n3ha/C4xWx0Oe0wRDnWQsv9BEEUEQxEAOShalDBJs57e3dD
7MLSvjNnTGMsJvgtWfWQ5DfrsqhUmZOcHB9ljXMrJ3yUTDVHE+2BUIdf7VGT
qzNTzuPYJGd2CRZRYgVRu56xchy88OCZaSFlp1SP23n7bbeCTHGyF33a1tpc
l0nByNQL48MwLvpbJQiinIGIhPs64PaB++8tTFFBqZAFgE+xFg1xSKwDO4sg
2YSk38PwjbXGm13O1alMRzCc84fgdmso+pLPf6Sh0i2aZSsn5JWaPykzSp/y
ZSVTBNQJF3v6lC+2GrzpxuthZEKWCuDcr5Tfr36wgiQEQRA/NBh/ICiF1MDW
ps24iqorddYxR2GkohR1lOAxUkAUxYCZmTep6h+Tp22KxLsVtcsfaokmvkwl
rzFWp8w1EiSnNgGUKgr7lTq6/0p5KRVG4Afvv4tTvnrf3lUrlyt+L56VxoVU
Kb/kijMqElUgIQiiSGBEuu03v8aNvrpPP/n4Q4hX+q4PsuoogUTJBo5kjCmj
4XZWWp+Z2haKg087fZG1sdSCdPzIyh8p5lqZ5+ySWLi5d9SJankp9be3/wZP
oXZk2+AWd6HPnDHN63HBmNSXJPBQKqWoBEEUFywz3rRlE/oUF1JzndkT580t
lCld9h8SMf+j7ZCxmFzm2mMqJ31aP3WzV+0KRjuVcFsw8UW6/nwrGzFXOFmL
XdJ2+WKd/P46hKTUITTUZ77auF7vMIhr/XfecTu2Q0Wf4h1poFZS0d8zQRDl
w7DJ5s2/vBGv//UU9csliyE6edxOiWQ6+u8W9+6KktdsnmFhbpCsK+LJXCi6
IxTZ7g9uiSWfCwanVB4RsOcrI0H85zUKNTqMUodU4C8TmUr5gffWm2/AlR62
F8fy+MuWLgGf4h6AQp/qpQiL/rYJgihnIECtXbMK4hW29sAU9fSf/RQrEEqk
1FGjKVXk7YIQNRp/Wl37aqpuTTC0IxztCUSa1fDSdOpaU03CWOWwi6IsaOWV
SKkjcsP114JMcfIExuS33+zrynWcOG9u/7c9JD8lpRIEURQKc9Vr5l+FWz6w
Ig3cWblimd4hq+hvtWQZqj8xvz3JzhqnmI2/lW1fZho2hyLtitobSjZFEi9H
gnN+9H8irMlmk4X8/weaTzldqaOX47iVaeGwbKjPdHd17u3djb1mYHCCWB97
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
Kjw7I+VX9mkcEgQxpsEJt6K/jbGIvptIEhlBZsCqNslSZ6m5ieeXT568PQxK
VbWKvn7vrkB4ayj+drru55Mmxg01MmcRBE6QtO5vdmHYszODp3/HrlLxqCnc
ue03v9a7M2ANzPa2Fq/HJeUv7WhuhCCIsQ6Fr38H9KlN5FCpgFWobaiteMTt
3JhMtaqxnD/UHfBlfa4uJbwunr7H72044v8FjAZIUcGnoqyVdzhI0aTxo1SH
3crlD95u3rRR7xWIG30fevB+aeCwKlqVBiRBEER5gkddJJEVJZbPW1XmDVOq
f7wwEmyORDsCsfxBVF+7z9UaDH0cjZ5qqQyYKuysURAZUeYkmdu/B+ngdR6K
/jH/Tew2WRS42cce8923X6NS9fIOM6ZPZRmz2+WAp6F26ZQWQRBjHYpg/xro
U1SqlnVKLCh1lqV6USreqQZzAe0s6g7F36r4mjJ1f3Y4JtdMcssWQYQUlQWf
ytJ+pco8N16Viquojz36CE756t1n3n3nLSk/5YsLqdphovy2Z2zrVvS3TRAE
QRxeBpSq9XfTdODgTD/halekE7vVQIfigRS11xtoC8Y+Sk8+c1J1rNbstMqS
VavnKw2zy3f8TPYWAnmo1+Pa2rQZ0lKgb+8eFOsF559buI6P13UgU+zMK9Gq
BEEQRHlRqFQZhOhkLT9hjCtSqd5wqN3n6lC8O5XIxkjm9y7f1EmVKivZZLts
tWsHlvJ/oRyUajbVnnLyT775ug98imdR4bazox1PoWKKKuWVevlll3Rk27Lt
rXf97g7GYtJ/RRAEQYx7dOtpdYG006Wiy2KZazQvSjZmA4kWj9quxrfH6j9I
1v+ct0SYWh9oV7JpVpXl/MvZA3u6DVZq0T/gfwTw5tMLntzbu7sr17Fn9064
hRQVHsEUVa8jPe+EOeBZeFquMwvPOeboI3EemCAIgigHCvUnipoQ7WbzUSbm
lbppSyL1a8KZDXUz3kvW32yVU4YjPFZt1jevVCtoROY5m8iNnKUW/QP+p8BZ
X0hOcbsv3PnZaafqx1GxUOGypUv69u7Bpm+g1NN+egqVfSAIgig/2HzNB9HB
8Q6eVQ01c2sMT0ybsXDKka9OP+pSmzTVNMnLVYmykZNZThK1VdfhJnjHpUyB
Wccc9c/vvsETqcC33+zbvq0JG6dqLe2sEsuY7/rdHWBbUCr2Tt22dUs4FKRd
cwRBEGUISNDB9SvVy5qj1VXHGM0/qaw5rqoyba4An1olAyubNKXKWj4r80Kh
Ose3Uu+5+3f7+nq7uzqxaBLcef65ZxmLCQ+iglLnzjkOfgWqxUKFe3t3X37Z
JbTplyAIorwQMN8UB+rna1Z1M0zIyIaqTQFDjc9c7WAMVqFWEhlRYvK7mPaf
l5EOlOk4KI8/LJ98/CFO+WJ1X0hUf376afgrXEVd9Pmnuc4s+hQS1ddf+xv1
dyMIgig7BpSq4+QFF8v7zILHLFg5rZiDKLE6kjg4Dy2HiV9IS8Gn2H0G7re1
NmNfVCxUePttt4JPITPFp0G6Go2EJDorTRAEUd7gFqN8rioDcD//w2tVIPL5
aX7VlR1nxhyZU085CUyKKSrQlet49523sEsv/PbImdPxjCrKFLjyisucDhu+
ljJTgiCI8gNPp2r3CzNWPCAy8NP/zHzBpaK/4cPHgw/cp8/6wu2+vt5f33Iz
+lQNKps3bcQFVmyi+tGH7+OrKEUlCIIgDkCgY5X8wtdf1Wd9wZu9e3bNOuYo
LOf74gvPYT8afco3lYwX/Q0TBEEQRGmyfVuTrtSuXEe2vRVb3v/q5pv0Rm84
5XvdtfNdTrtE873E/8/efYdHVa77w7/ec/a5toompEwva2qSyfSWmUwKAUVQ
qSLFrtveFQsKlo0VlG3DbcG22SoWsGEXG006JIQO6ZPewL3P+Z3f+8fre8/c
ZLmYBAxFJuXL9bnmWkwmycrMWuu77mc963kAAEDCZBRIKC/ALbp8IZUWfvh+
mU6rvuH6a6VP0msWvfMW5ezhwhQhCwAAgxBfBrWYjRSp48eNaW9r4VKU/W3e
k9ddezUvi72Syko359qyMfwgAAB09eaF37oV8UiDV15xWUKkrlj+o7gsNvmO
PGuE2WTo8QeiPgUAGFQQqYe8G/HB8Hm8wRn33CXN0wRcot580w08jBJ6+QIA
AHQXm7xOp7nn7jt5KreEspQH+21rbb79tlsoT9UqBfIUAACgR1x1Xn/dNR3t
rQmV6f7O9gP7OyhqKU/5+ikiFQAA4HD4Gqjf56nYt0eap+1tLdG6msqKvTfd
eH33gfERrAAAAAn4cqrVYpo1817p5VSK1BXLfywuKuBhfokQ7x7M34VIBQAA
YGImSnvqTjp/wvznn/3Hm6/PnfP4mSNKpLkpfRnyFAAAQHTkWEz4KjIUAADg
CLrfSfq795aKL+DpU5P+JwAAAPQjGMMBAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAoC/T6zQ9Pm8QdPwlfjQZBV7IybYOKy6cNnXyNVf/5fyJ4yed
P8HrcRkNen69TqvWqJWEFsjhfjgAAMBAdeTsy7KaLWbjrbfc9MXnS2uqK/d3
tre3tTQ3NUitWrn8zTdemzXz3osunDpxwri8oN/pyKUgpqhN+l8HAADQF1CY
3j/rvl07t9fVVldW7G1rbSZNjfUUrOTA/g5e6Oxo62hvpailr9ZHa+kZytmF
/3iDCtik/wkAAABJN2H82OU//VBVuU9M0ob6OlqgxORnpFpbmkjCk9PvuC0h
VVG3AgDAwNY96f4270mqOhsbolRvinFJFSglbLSuRixLu5NG6gvzn0OhCgAA
g4T0Qqq4/N6771BuinkqRiRF6rJvv37+uWfmznl8/vPPLv7gvfXr1lDI0iup
gKVHqmSJuHDF5ZciUgEAYND6/LNPpfWptOr8+KMlk86fQMmbk23lwtZkFGw5
WcNLiik9H3xg1qsLXiZLFr9Ppk2dTC/jSBXDGt2AAQBgYOOkc7scq1etoHqT
CszuecoXTCltqTilDLVaTAp5pkattJiNFJ3ZWRYiLmRZzfRIP1OsUnEVFQAA
BqTuAUd5+vPqldxgy2FK6Vmxbw89yXkqXielhfpo7b0z7qYwVSpkapVCp1XT
D6T0JPQk5yllLtWwaPgFAIBBhfNU7InE1Sjl6dkjz5w75/Ga6sqEcpVbhpd+
+vGUyZMoPXksCEILHKO8wLem0vMoUQEAYMDjJt8vPl8qFqecmBs3rMsL+qne
zLVlv/zS3/kOGspcaZ9eej09WVa6ed5Tc0eeNYLKUiFe/3Kk0gKSFAAABpV3
3v4nXz8V23vFPGWUjJSY9LLqqgoqThPKVf5GWli/bg2VtJddejEXqtJIRa8k
AAAYwDjv7px+e0KeVlbsDQZ8VHJazEbC4SjEY3HyBefv3bOLXi/tuUTfQv/l
kQlpYX9nO73gvXffufmmG6S/CAAAYAA7f+L4hDyt2LeH6lOxZ5GYp2IshkPB
Tz7+kEf6lTYUc4OweCmWdHa0Pf/cM9Jfx7UqEhYAAAYGsQ3W7XIk5GlHe+vo
USOzrGazyZDQciviZx55+K/8+oQbbcQrrfw8FbxJ/3sBAABOrO7hyLfMiP17
yfXXXcMXT8X23oTvEuOYvjp+3JidO7YljEPIC+KTVZX7cm3ZSf/bAQAA/jgv
/n1+dVWFGKbkuWefNhkFzlOxf5EQz2IxW8VlzlYqactKN9dHa8VUTRjj9/bb
buEBHwAAAAaka6+5ivKuualBrCi/W/YNpSTlqXgVtXuMSonPu12OVSuXS1NV
NHfO45zR6O4LAAADEpWWlICcp1ylbisvK4iEOU+lV1EPJ6GAFeLDAoupKu22
NPO+GXyzKgAAwEDC8bdl80Zx/F7u4jtt6uTul1CPQOhWutIzb7+1UJqqrLam
as4TjyWsBopWAAAYAJ5/7hm+hMpVZGdH270z7nY6cpUKWS/ztHuqCpJuwAmp
Sj+/sSH69N+eolqVb8mhl+m06qS/DwAAAMeGC8MpkyclTNn2z4VvZmdZOOzM
JsORr5+KTb5HyNnpd9wmTVWK1F8OdDY11v9t3pO2nCxKbXqNWqVI+hsCAABw
zNwux+5dO6QD+W7csI6elA7M28sS9ahSlfss1dZUzX/+Wb6hRqWUJ/3dAAAA
OGYffbiYakbpyAxUtGrUSopUqmGpcjyqq6jC4StZQZKq9OsoxKk05jElnn/u
Gfp1iFQAAOgvxP4/4gCAt9x8I3fxFT059wmTUdBp1d3vPz3m+lS6fOUVl0lT
lSKVgpUW3n5rIVIVAAD6qWDAR+kmHTzw++++tZiNJyRJj5CwE8aPTahVkaoA
ANCvffnFZ9J7RUlhQT5PF87B2sveR8eQqudPHC9NVQ7W7qmK22oAAKAPSoin
+2fdx6EmjsH74AOzxClm/mi0AhMnjEOtCgAA/Y6ha/RdNvKsEdG6Gko0sT79
/LNPT1qeHi5VcV0VAAD6F0qrH3/4jrJMjNQ9u3e6XY6TmaeoVQEAoF/jWvW5
Z5+mCJNG6vQ7bqP8OgkBmrBwhFQlSFUAAOjLpk2dLOYpR+q7i97mWdt6jL8T
6HBVsNCtt5JYq85//lmkKgAA9ClKhYxCM9eW/fPqlZRWYqTu3LHNYbcd1RC+
R6U3P5M7GE+dcgH3kuqeqllWM8YqBACAJNLrNNIuSTqtet5TcymkxDwlF0ya
mFCfnpxIFSRDHdIKUClKuUmpypPKJaTqw7MfohfQWYFwaL9l3GIDAAAnjXS4
pPHjxlAZKC1R33zjNems4kmpUgVJttLyvTPu7jFVH3n4r2KqJvxpAAAAJ5Mt
J4unQ22or+M83b1rR64t+2h7+R7t7+3Nz6Rw1KiVapWCW3cpVXtsAb5z+u24
rgoAAEn33LNPUzBxlUrxRNk6ZfKkhCGSTn6k8mu4gVqnVRMxVXusVf9y5eWU
qvQyKq7pZRTESX9jAQBgUBlz3jk11ZXcv5dnVeMmX8qvvhOpYrByqs6d8ziP
lJiQqudPHC/2VkLbLwAAnEy2nKzNmzZE62p+OdDJww9uLdvisNuoxKNI6guR
KvSUqrTwyssv9lir0hmCEJ9clWd0BQAA+IMk1G4vzH9uf2c7BVNzU0NHeytF
0pTJk4wGPUWqtG+S0LvZxo92ZY42TxNq1R5TtWLfnrNHnsmdhJP+bgMAwGBA
wUTpSWVpQ32dGEzzn3+W6lbK04SA62U/paNdh6P9gd1T9f33FvWYqnlBP6Uq
T+1qiN+Jk/Q3HAAABiqL2Vi+tZSK0/poLV+X3Fq2xeW0UwaJTb78yqQ3/Iq4
xE5I1e+WfdM9VTduWEepyi/WalSIVAAA+OO8MP85bu+lMOUm3/HjxlD0cJ5K
X5mUSO3x9T22ALtdjg3r13ZPVYpah92mkGfySYL0lyb9zQcAgP5OTJPrr7uG
okcMIFqY99RczimjQS8cOrbSyY/Uw72++3VVQqnqcTt7TNWPPlxMxXj3gZUA
AABOCKrduMmXcPSUlW52OnK5Pk2Int7n6UmIVCkxUrUalUopH1ZcuHfPru6p
+s+Fb1KqkqS/7QAAMPC8uuBlzlMxd86fOJ6TlCM1oZm0j0eq2AI8ccK4HlP1
qSfnIFIBAODEovS56MKp3B9JnHj0yblPGA36Hpt8hT4WqdIv8RVSfhRT9cor
LuM5XhNS9aEH7xdTFddSAQDg+NlysqiOo/q0pbmRs6Z0yybOUzHLpJEqfb4v
RKqox4uq0lTlWpWHWGSXXnIR+v0CAMDx4FtKecDbN15/lVKGajfu60vl6oTx
Y7tfP+13ElL1kYf/yqmaMGLhxAnjkKoAAHDMuDmXXDhtSkN9HeVLR3srZQ1F
6ryn5mZZzTz2YNLX83h0bwGe//yz3ALMfymnKlXoI88agVQFAIBjRnWoLSdr
x/ZyCtMD+zuocPvXL/vXrlktxK9IirOR9l89tgC//dbCluZGMVW5e3Pplk0u
p11MVdyvCgAAvcT3mFgtptdfW8CzzPxyoJMiNVpXc+45owZMiHSPVJJryxYH
VpLWqqtWLj9cqgIAABwO5YVSIZs2dTIFCkcqt/o+9eQcfoFKKacqVWwc7tcS
OlZRaLpdji2bN1KtyoNEian6yccf8vC/PAJw0tccAAD6MrHTkS0ni2KF85Tr
tXVrf7aYjZQmQrzhN+mreqIk3P7DzxQVRsq3lopDL3Kqdna0LXjlJUpVOqNI
+moDAEBfxje/UFxKm3xJfbS2ob5uzHnn8DzdA69AE+8D4v/SO6BRKydOGFex
bw/9+XxplbOVUvXBB2ZhTlUAAPhdPHTDtKmTxTwljQ3R5597hp5XKmRUoPHo
B92LuwHDEJ+Wjlxz9V84VbkBnCKV4pVOMO66846kryQAAPRlXKW6nPay0s3S
SP3i86XZWRa+gEhVKvf1Hah5muD+WfeJN+Ryqra2NFGq0lkHv2Dg1ewAAHBU
DhcEGrXy9dcWdLS3SiN17JhzxZp0ANyOerTmP/8s5ym3/XKqVlbsLSqMIE8B
AKBHVH5OnXIBF2Viqj76yGyVUm61mExGgfJUHBsh6Wt7EoiJufiD98RalVO1
sSFavrXU6cjlF0intEv6agMAQNI57LZdO7eLd83Q4/p1a7KzLFyZcmNv9xF9
B4NcW/bKFT9Rqor9lKhQbaiv++H7ZTnZ1u6vR7ACAAwePR7zX39tAcUER+r+
zvaa6sqzR55Jkcqv5xGTqFbl5cGWGpSqmzaul9aqPA7wl198Ju0FPdjeFgAA
ELqN/3PhtCk8ZBCj5YdnP0Sv4f694mwvPLwD1a2DcMzbEcOH1UdrOVXp/eEB
9nnQY76tBnkKAABUgu3etYMnDOVW3/Xr1vCXlAoZ4SSlyOAkPbZJ2fop6V2r
dOJBqUoxypHKqRqtq5l+x21mkyHpqwoAAEn35huvUVKIJWptTdW554ziS6iE
Gzb5kYtWHpcv6audFLffdgu9V40NUbH3b0tzY0N93bSpkwfGCI0AAHBsKDGp
8qKA4IJrf2d7U2P9o4/MpvRUyDO5QOP05MZejlSqyLQaVdJX/uSj0KR34/nn
nuEWYDFVaXnXzu3DS4p/t3gfVN26AAAGA7HvrtORW7plE0WqOPHKd8u+cdht
/LLBmZvdcUM3halSIaPziiyreemnH9ObxvercgswpeqG9WvdLsfgGQcDAACk
Xl3wcmdHG7f3tjQ3UkwMKy7kyd24f2/S17AvkE5WTnV6TrbV5bQv/+mHhvo6
sfcvz6z6zddfovkXAGAQ+suVl3MocKRSnTVr5r3ctknBwQuUqsgIsbcz90Gi
98RqMeUF/Vzgc5s5pypZ9M5bg6fvFgAA0DHf63GVby3lC4Icqd9/9y3fhcq4
cRjpkPBucLbSKQcF64TxY6sq90m7KnGqzntqLt43AIBBgqLz5Zf+TiWq9F5U
HthBqZAJXQnCQxFSfCQExOC8VihGqjiQFL05V191JYUpnZmItSotU6pec/Vf
kKoAAIPBlVdc1tHeKjb58li+FBBiPxyKDI1ayZPOJH1t+whppNKbQ8+oVQo6
A3nwgVk86m9CC/B5544Wy3y+DoueSwAAA4zb5Sjdskna5Lt61YqcbCvFBJWl
JqPAx39pU2fS17kvSKhSeRAMervo8Z23/0lJmpCqFfv2eNxOfjHjy9NJ/0MA
AOCYJVRGr7z8It/6wV2SaqorR48aKRZTCQGKPO0uofDk3ko//fg9hSl39+IW
9Y72VjpXseVkia/nPOVGgKT/FQAAcJwmnT9BvPWDIvXf/zow54nHuMmXXyDN
UBz5e4NT1e/zbNywrrOjjcK0tqaKx3WM1tUsWfw+d/qiElWllCd9bQEA4IRw
2G3r163hHqrc5EspwHnavQ8S9B69dXJZRnFRAYUpD0JFbzK3Azc11vO4+mjy
BQAYSF6Y/xzVTWIvXyqpRo8aKQy++U9PLD4V4ZExJp0/oT5ay9dSuRswz1xz
043Xi0NnoOEXAKBfo+P52DHnNtTXcYlKj3Sof/yxR4SuPMVB/vjxLauzZt7L
YSrmKb3tdPZC73/3S9UAANDvuF2ONT+v4onJ6Djf0d66bu3P2VkWMU8RqScE
RarVYnrpxRf4arVYq5Kqyn0FkTB6UAMA9EdiStLCvKfmUozy2Pjcf4aLJuno
tUlf4X6Ng5Kbdi1m49JPP+YGdr75lzsDr1q5POD3Jn1VAQDgmI0fN4YO6RSp
VDFxI+RTT87RqJVimOLq3vGQvnX0TvKoSi6nfcvmjfy2i/OVNzZElyx+P+kr
DAAAR9DjgIHciZce1639uT5aS2HK5dL6dWtysq1inqJE/YMMKy6s2LeHT2O4
PxhfxX7u2aeTvm4AAHBUOGefnPuEOKg7Hc/p8E5Fa/c8xQW+E06tUkydcgGd
zNTWVNGbv7+znStW7gCc9NUDAIDeo0P6uLHniWEarauhY/sL85+TDpGHPP1D
33+TUbj1lpvonecuYZ0dbTzGfnVVxYTxY5O+hgAA0Eu2nKz169ZwZyS2Y3u5
w26TlqhJX8kBzGoxUarS43PPPi1eThVnq6HPYsTwYUlfSQAA6I1nnp7XUF9H
R2+qkvhIfsGkidISNelrOHh8/NGShFRtbmr44ftlLqc96esGAAAJEppwR541
orqqQhzOlx7nP/8sVUyH65KEtt8/lMftXP7TD2KkcqqSxR+8l5NtTfrqAQCA
VEJEci/f/Z3tfPTeVl5mz82h55UKWY8lKorWP/oTCYeCdJIj1qqcrTxTrdGg
T/raAgBAj+Y88Vi0robnbuMB8aZMnqRSynnOFKTnydF9zvGLL5pWU13Z3NQg
DVY687nyist4TnMAAOg76Mg8YfxYOm5TpHKTL1VGf5v3pMVs5Cmw0cCbRC6n
/dZbbqqtqeJUbWlu5EdK1dGjRvJUNWiQBwBIIulBmEJz3dqf6YhNR2meZ3zL
5o1ORy5mFusjKFVfeflFHmxZ2gK8a+d2t8uBBgQAgOSSFjJz5zze1FhPfjnQ
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
2Mcb3/xiF53jDb+xvkOCyqZWOFVKp1LmVsh88ow8pTzWEVcpL1LIi+Xys+Ty
8SrFRWr1jXr9sz7/2+Hw10XDfi4ZXlZYsjtcvM8drMhxV1hya7KcdTZXvd1V
73S3+ALNfl9j0F+bF9gb9m8LekuD3k1B38Zw3rpQaFU49E3Qv9hjX5BtmiOo
7lamXZl2ypTUU89JPyNPIRsVCtXt3d3e1tTW0dzU3tja1tjeUr+/sfZ/muor
tpY6lKpApqIgTTYsJTM/TZWj4hOb+LiF8RZsRCpAb1x5xWVUlna0t3J7LwXr
F58v5fEGuScSpWrs+KzXiQ130uuASV//kyxWY2rVGo1KrVbq4v21zKZY+14s
XHQqU+y+BpVRS5QG3UE6rSIeUop4lxVFPH1++6q+6zE+4KqKO3PqBUoxlWBQ
E76W3RW1B0OKH6USnhc0aiZ9nh+Frhq86/Fgh1K9Xm4SlIIgM+oVsWHrJPRd
BAO9QGHQyY1auUEjo0cS+5PjP8FMpwqxc4ODJxKxs4v4CYPJrDebDPQYi3iT
rscCvEdHPoYf1ylZDydghx1ikVeVdgH6oGOfdfxcxWKIPcZa9QU1nX5oYp+y
gj8+k6Cm8jNbnelSZQblGflpqcNSTjvn9CFTU4denyGfqdY+bcz+R473U3fo
+0DBmnDhpnDh1nBkWyBvp9+3z+ercnsb3N4Wl7PF4WrO9UZtnrpcT7Xds8/u
3e0K7PLnl4cK1kUKvy8q/Kgg/Fqed47bdle28BdBMVGZOjI9ZXhmarEsLSJL
DcszfZnp7ox0R2amTaW2qDVXXXZxW2tja3tTW3tTR0vjgebGlurKjobo/s7W
PJ83R6mxyzV2pZ7y1HrwrEad0OQLMAgc+2irXo+rYt8ebuxllRV7I/khcRgH
WqBIjXVG6jpuJ0j2335S8U00WbrYASeLqLW5Gr1Dq3NptblyRa4s05mR6ZbF
+OQyvyIzoJQFVXJCCwFFhk+W5ssY6k9L9Q9NCaXFhNNT8zOG0iOj5UhmGond
hi9L4+VIejqhw3IkLTU/dWhB7xQOTeulorShBen0+jOKMocWZpxBIhkpJJR+
eigzJS9zSCDjNF/m6d6MIZ6MIe7MIa60U2mZ+DNTY+RDffJ0jyLdq84kbrXM
pZHZVTKbWpajyqTHbJWcZWkUomytMlurztKqxTjmaojvu0yYIeVwH8fJiVT+
0CmPrCpVtkqVo1TmxtkVSodC7lCku5WxP58+XIqwAll6QUZaYUbamRlpY+SZ
F2tUNxkNM2058zzeN0PhD/MLvwkXrgoVbQkU7vREKpzhGkcwavfX53qpDq2x
2att9ppcR7XDWe2w1zhjbby73HlbXHmb/QXr8gqX5xd9HSpY5Pa/kJ17l1xx
dUb65LQUqkCLM87Ik6V4dZkOQWHTqy1alUWrNus1Zp3OqNGZVFqzWpelM9Bf
oVHLH/rrrFh92ta0v7WJIrWjvuFfnR3R5vqR54ymF1s0hnh/JH18RCZVbz4F
gAHm9zb4wx4oyHvvvhPL08YmwoP6zrxvBp2QWy0mQXLhTC7LoGT9QyP1kNbU
+FW5hNZOoRdFzQl69w57imLRaB0KrUem9WVq/ZnaUIYukq4rSNMUpiiLTk8f
MSRt5GlDzz415ZxTTj/nz0PG/Nep4/982vmnnDrt1NMvOe30K8844/rUtFvS
0u/MkN0rV8xSqB5SashspfZhle4Rtf5xrWGO3vS0YCXPGrPnm3JeMOa8ZLG/
YnG8nuV4M8ex0GZ/K8f+ts3RG4vsrncdbkIL5J1cp7ggxS/+Z27s8c1s26uW
nJfMWS8YLc/oDfP0wuNa7cNa5UNaxSyVfIZaNl2RfrMs5cb0lGvTTr9q6OmX
pwy5+Iwh0844bdLpp4077c9jhpw6esgpo08fMuqMIWcPTTkrI5ViZXhmWnF6
GkV2JH0onTCEMtNJXlxAluGTZzhUGdnqdGZVZ1o0mZbY3ZccrydtJzrSSSmt
iVWjdijVHpk6kKnIT5cVpMmKh2YMT8k4JyV94hmn0ztwRWrKDalpM2Wavxmy
XsvxfuCNfB4sXhYsXBkuWhsq3JBXuDlUuCUQ2eoPb/fk7fHmVXlCUXdeoyuv
we6rz/U32AONDn+9y1/p9O/2BLf6AqWh/A35+SsKhn0SHvGKM/Ko2XGrSj9V
njly6OlF8VMdSnCnLM2hyLSrFDlqhVWttCiVZpWScp/WNkcv5BqMNoMxRzDQ
Mp3+GRVKvUpuNOn0Bs3cJx+jWvWXlqZfmltiAyu1ttTUR91+n3iOIfZYpl0+
lq1iRztMlACDQNeJfWyZ7xY/9Lqqukf0XbfccK04tzhbsfxHpyPXZBSoPuXu
vkK8dVchz9SplCchUvkOBWljZqyjThexG+3v1SYHDwjSKauy1OoctdqmUttV
KodS5VSo3HKVR67wyxSBTJkoLyaDDvv5GbHakLKAUB1XnJZCzkpJmZQmu1Ku
u05rvlnIvkOw32N2zjK7HzA7n3LlPe8NL/DlvxGMvJVX+F7+sA8jwz4tHPFF
4fBviod/Vzz8x8LhKwtHrC4avqGwZGNByTo62AYL1sdtCBRsDBZuDsSUBYpI
ub+AbPcX7/AV7fIV7vTl7/KGd/nydnv8R2uPNyC1yxfDy3t9wbgQ2eeP/fzt
rrwd3vA2T2ibP7/MF9oSDG3MC9GxfW04tK4gsrogvLIwvDwS+qkwvHL4sOXD
S74rKfmmuOSLYcM+KS5aUljwbkH+wlDo9WDeiz7fsx7vU07n47n22dnZD1gt
95lN95gM042G2wX9zVrNTRr19Wr1VSrlxerMKer0yao0coEqY6Iybaw89VxZ
2vChp5cMTSH0tvMCL9NnUZSWnqDgOMU/ZV4uHjqUlMQfh6Wm0i89M23oqLS0
aQrNVWrjrYL1HmPOA5bcx7Pdf7N5X3L53/EFPysopM93dfFZG/LPLAsN3xYo
2ekt2uOK7HOEKnP91XZfbW6gzu6vccRUO/0VuZ69dtdep3tv7OPI2xnI3xku
2hoq2JAX+SkY/tQTWJjreNpieUCjviY1feIpaaOHZIwcKi+WK3xqebZWbtTL
dHq5Rq/Q6lUanVqtVcXua9VoBbXeoNbHa1KNRRNrSDHrhFg/OqXGQHkqk8fa
/AUdfYveoHvowfs7m5v3t7S0dbTXN7d8+8OPPMQEH08ktIhUGBS6EjPeV0R9
8OpVrLQz6PQmDf1PZ6LdR62R6+Mn/GZBm2XWi6wmXTjo2burvL25oa2pntHy
qLNHZFmNekEdu+xl1tM5rWCI9S1RKeV8E4S0c6bxt1sUD/knHNr78ZBBeLjy
jV9+OvRWvoMoAbnNKn45Mna/XuxiXHxl+LsO3ociHPxdPM6AwRC73YPjONbB
RiM30Xm7Nnb27lDL3QqFL56bEbmyKEMxIk121hnpo4ekjzl16PmnDr10SNp1
KZm3pKvuyNTeoxYe0lsfM2Q9Zcp60Zr9Wk7Ou07HEo/rq1CAQmRVUf7aogjl
y+YwicSECg8uhCNb8sIUQGXBcHkgvC2Yv80fJjvidtJh05dHB08qT8hez0EV
XSrdB1W5YqodQVZzEB2KvVEncde6nAmicd2fP7I6t0sU9cR+MqlzuKJ2b5wn
/uu8tS5vjctb5fZWeX2VPpFnn9+z10eJ4N3n8+/1+3f6fdv93h3+wLZAoNzv
L/MHSgOxOKb3ZHMwXBqKbArl08KGYGhDIH9jMLIpr4BsjIVIeEMouDEc2JQf
JBvDeevzA2vz/Wvyg6vy81bm560IB38MB37K8/8Q8JJv/Z6Pne7FTg/7wHFw
+T2Ha2FWzpuWrNetv+M1i5Ue/5FjW2jL/WeuPcGiXMdnLu/XHt933sD3wdCK
cHhVJLI6UvRzpGh9fvG6vML1/sJN/oItvoKtnoJyd2SbJ788kE+1Z7kvtNMX
3ukJ7XGHYt2KHL4qh48+OEpSej+pCCVRu78q17vPSSczebRtbAiFfgqHl4ZD
C4O+5z3O2Tmmm7SKyUOHnD3kz8NTTouknZGXkeaXyXxKlUupdtDZoOZgO7kQ
n+SU+7wd7Ex+8F+sW7k23qOcu6EJglEQhPipaHw4DvrXdVZKi0UFha++suDL
L798ct5TXr/v4M57+GNO98Eu0CAMA4ekCI3lqeHgLsbdKMymnBxztsNgcCoV
BZmKkgx5iVw5TKXMVytCepVfUHoNqk/eevXfzXX7G2s7m2rbm6LtTbVzH39I
p1XwjzJbBM5T8Y5I7n3aJaE+TSiBtV0dabgXqLrrNVrpffHSVD00UmN36pk1
MZSq8UpTlaVR5ajkNoUsV5aZm57uypR5M+XxAlMRzMiMSUvLSx0aSk0NpZ6R
P/T04pTTzkodcl5a6mRZxmVK9XUa4TaD+R5Lzl+tuU/avX93Bl73RRYFCpfm
j/i+4MzlkeEr8ktWhoetCg37OVS02hdZ7w9v8fq2ez27PO69bmel21HjdjZ4
nI1uZ7PTEedqdnganV3c3ka3u9kbe6Tl2B0NTm+9y1fn8BIKxFqnj1CFUusO
VrtDhNNT6mCqekJiwsYFKjzMRxG2x5fAfbjHvX7fXgq+rkfpV3d7PVJ7PB76
yRXeWG5We3x1Hj+hnK1z+1ht/DHq8dd7A6TB7a13OmPsjgabk9TZcuvsdhJ1
OKKOWMfU+nhGcy7XOWL3d9Q7vKQhkbvF4WrKzW2220VNjtxGl73J42r2upt8
7kavi975qMte74zdM7LP5aF3o9Ib7HpbAlTr7Y0X3Tu9firAd/oDvXyU4mf2
eGKnENGDK++ud8XvT3H7SaMnQB8o3/7ZnOtttXlbs70tOd7YZdD4R1zp9O9z
+3lNdvuDe4P5u/whOqHaHojsCBVuyx+2JVLyc6jgG1/4XbvzBZNptkp5c3ra
pelnjB865MyUUwpTT83LHOKRpThUGbk6RY5Bl2020b9Y/3C+Ezjx5qzfBjCk
IjXe49ggFRvP8DAoWQ8GqOQf/zc+/2rP3Q4RqTA4xHuHGmNDotF/rWq9VW2w
COYshTo/XXaJTPeULvdVrfMZVfZfFfprh6ZOOPU/R53+p9nnn/trza7/W737
f6MV/1NfcaCxcu2KL7OtSrNZodUpzFaTwRTb7Q6OaRMPPp1eqdPLiVafwQvc
BTQ+kbHsUApBkMW6iRpk+oTHGLU4Wk7CyGbcVEusdDwxGrMMBpugd2m1XoU8
Lz29KDXtzCEp555y2pTTUq4YMvS6lPSbUtNvT5PdK1M+oNQ+qjM8pTe/YLYu
dDrf97mWBv3f5gWWh0JrQiEqiMrCRVvzC0tD+VRFUgG11ZtX6g5sdQe2uXx7
PP5Kr7/KE4yFl8u/z+kjFW5vtcsVrwFjR/JGCtB4hpI2u6vd4W6ze1rsvrbc
GDq6Nua463McpDbHXpPjrMl1VeW6qxweylA60lJKVsTK0vAeT/4Ob3iHr2B7
oHCrLyIq9Ue2BCKbgxGq4DbkRdaFYtaGImvCkdX5ESqUVkQKVxYUrCgsWF5U
sLyw6MeiGFrg/4qP8ed7WBYffyqMxJalimI/ln746oL8tZHwuvzw+nB4Yzi8
KRTekpdfGsyPvV3+ULkvvJ3W3BuiQmy3J0jBQe9VtTN2qsDFLKl2empdVEd3
RZLLGc8jb6PI6eH3UKrJ7m7MddFbF822E3oD62yO2tyD0UyFM6m1O0lNriP2
GPst3vgvOqgm/qsrKWqdbnrc63TRwj6X+8iP9EqpCnfsscrtrnE66py5dU5H
jT2XVRFHTqU9m9TYc+rstoZcW6PN1pJtb8mxtWbbWmwOehNoK9qdF9qaX7A+
XPBTMLyysOSbguIP8vIXeHxP2HLvMpuu0qqnKeVjMjNGyjKGyTMjCllIlpGn
yAwqYkMkudUKl1ZtN+hzTYYsk9FsNBkEi0C7ssEkpqRGiEmITvGZ+JiRpoO5
ecR/R77njq+fdh96UToeFMDAFc87gyp226NOE4/UWB8DR4b8L1rL+/mj1rlK
djmHbfMN3xw+c0XJiK9Hjni7ILjy2surn5tX/49Xft2w6tctP/9asfXGYu8I
zekh2an5yrSQWk57uk+WFpClM7883S1PdSlSXcozRG7lUOJRpvgU5PS4FJFX
lepRp9IjLzBaph8l/kxeyItfuIxfxkovSU0vSUkbmakYrVCfp9ZNUGkv0go3
mqz3ZdufsHtedAXf9ud/7At/7Q+vKixZWzRiU/GIjQXFmwqKN4byKQLKgnnb
/bHyrcrvjwbymrz+ZjfVFO4mm6vR7iD1dlc010nH8Hh55ablWAja7HW57tht
8lRuuHxVbl+VL1ARa9WkEs+3L8DXHEO7/JGdcRQuW72hMm9+qSey2RvZ5IvE
LoPmF1EO/hwMLw+GfwyElvmD3/jyvvIEPncHPnH6P3R4F9ncb+U437A6Xjbb
5xuyn9VZntaY/qY2PqUUnlTpnlBpH1HpZiu1DylVDyqU98kU92TK7pJl3CmT
3SGX3ZqZeV1qCrkmZqhESu8frx2aRudU8ceY69LS44beEJN6c9rQ6Znpd8sz
ZyplD6qVD2u0j+mFuUbT00bL85bslyy2BVb7mzmuhbmuRU7fR97Qp/7QV4H8
b4PhH0IFy/MplIvIz4WFawpi1hVE1hXkr4/kb4xEtuRHysKRslB+aV6Y0rnM
l0dKvcEtngCd2JByj7/cE9zuIyF6LI8/coN5vOU89rjNG6Cv7vAGqRTd4fHt
9Hp3+WKPcX622+Pf5fb15uLy4b5EP227173Nxzxsq9+zNRhTSkK+0rC/NC9A
tobzyvND2yPh9YHgMrdnsc22wGKZo1XPUqimZyhuGJp+WUrq5NS089KGDktL
y8tI8ygycpWZWRqFha9o6LRmvSbHoLcbDSTXaKJzSJPBaIwNz2yiMOXZwDWC
KZ6k/HiQ1mCUPhOLVCE+0r7ht5Kze4zyzbPiLbR8AOleaR5uNGNEKgwOv0Uq
FX2xiS0ErVqr8KYPfdVXsjE8ers9XOkMxQolX3hXILg9GNyWF6QDwsZw3pr8
0PJI3o8Fed+VhN+0CW84jPOMir+qZTOUmffIUm9PG3LbGafdfMapN5x2ytVD
/nzJ6f819bQ/TTrlPyee8h8T//ynGFo45T/GnvL/jDv1PyYO+c/zT//TxDP+
RI8XDPmvyaf91wVDaOFPk0+LmXbGny9NP/0KWeoNysw7lRmzVPIHtaqHDNpH
TcLjFuOTWZbns7IWZtmXZLmX5ga++v/bu/vgOMr7DuD/tIMk6yTd7d7u3u3L
7b1I1su97O3d7d3p7iTLNhgYbCeE8hKSZjI0QNoySYHikExKhpKhzZAAKZm0
KXTSUigJTKC82ZZNQhkXY+MAdmMH2UK2Zb3a5iXT6XQ60yl9Xu5Oq9MLJuAI
w1fz8TOr00kn32n2d799fs/vSRa2p0s7MpWd2YF/yw3szq/Zmx/a5wy+mqvs
z5Z+lSmO2MXDKZYoWdnRVHrUsrgxK308nZ7O2PSCYTI1yWLobF/iZJ91KmmT
NHMqniKhk5jss6bi1Ut2Y33pwwlyKnZICkZysf25Islq9xQqL5YGXqis2Vmu
bCsNPl0ceKIw9HC2/I+Z8o+s/vuSxe8lnL/qy32zK3VjuPuP9c7PS9oVsvKZ
gLJZljbK8oV+cYMorPcJ67z0TcJQhzDoFcgbhgGfUPaJRMkrNOj3UUUXkphz
OYHK+oUqVzEV+TQjiNUba2POL+Uk0ZFkR/YvHOlX/RK5Jz8g98yQbyFfJUmT
4i8GZaIQkPoVuSjTsV+SSqKfEuhvXhHoAVFkxTwVr2+dIJwv+DaIXpJ/fVqW
PiNLV6rBL4T0a0La9RHzhqh5UzRyazT2zWjn7dHV3+7q/euexF1x6x4r+33b
+VGu+OOM80gh/9Ni6dFS/2OlyuODA4+XB58aXMPLuoYr64YrQ8OD64cH1+4Y
WL9zYO0vKoP1FLuerb9Qpq/Xnv6BvaVBMr6nl4qV3YXyi/lSg11Futhze6U0
PFAeHhjYXqlsG6g8Uxl4slx+OJt5IJ36m3jiO/H47b3dW7oifxYNXRtSr1Kk
zX7hIkFYL4plwVvweXPkFZGUrBxIy0oyoCQCSrcS6GLluGaQFiTQGoOQSfLQ
TjNGhcJ0mwMjYhoku6ymnKxawahezg0Z1dHNdYt7Z5ulThTunlTVoqMF2ag7
vOKiLnyCVSclSVTllbKK6ssKbQ/mBvbn1h2O5+iMXsqmU2BJi05ysYtpJ+LW
8URyzEodsVMjWWvESR/Kpw8UM6/0O/tKhX0l5+X+3N6i85Lj7Mpmfp61h4vZ
4Upx55qBHUNr6rYPrXlmsPLkYP9TlWLdM6X+p/vzz5QKxLZy/9ZSkSAHxHOl
4q6is6eQ25PPv1SoIsevOgUSKMeSheOJwniyeCxVRY4nE3kmR/Bij+lewiI5
5ome5HhP8mhf/EgifjgZfz0VH7ESR1Ip4rCVHkmnD1kWSVppwUzOOeDQR9nn
FPiV1d1OcVeh+FwuT7LIR3tTD3XH749232dGv6OFvq2Gvu4P3Cj6SaLxBU/7
1a3tV67yXtrccUlL24XN3vWrfEOt4pp2f6XDX/TJjiBnRFo8HA8GYwG5i80F
d+pBosvQYqFa90JVJWjjhWCAq7diWIieeF3497pPevWOiA3cnR94+XRUpxbe
0/0T5rr3L2hf7+68F6qfZnW2eQr7Hp39cHqtXmXz3UG5JyjHFbneL4iE+ILX
V24nby2E9V6JWNsurmsTyUhs6BAuaWvf3Nb6aU/rJs+qTS3N3KdaWv6gpe2z
qyjy/BOf83QQJO+7XhT/xD/nTyX/V2Tpq5L057KyRQ7cKgW+LgeJbyjqMsjd
iK/5lQZ0sWdHxx92tH2+vf1qz6qrVq26orn58qamS5uaN5/XdHFT84ZVniFP
e6m9Ledrs4WOpOTrDkirdbVLYwV1Om/gqWuapgQDRJB90A6UrGNlNQkNhUO6
SW6hK0A1s9pQmd1C3xCzZ5WMXD1oLhwb89Alzg+1F70xpC4/N4qQCh9/S0x/
uJeSsVuCmuaz5bYt0fC2XP+hVH4yTuPplJWaTliTfcnxPtqJhaA1M6nMMcs+
ns4cs6tIoneCShHjlnUsYfG5p5FU6nUrRYIUdzBFj3+dppHrsJ0ezWbeyGVr
cnVjjjPqFEbp6LyRzY9lc+SxTljkQTNH03QSc9QmcmPp3LG0czSZpbenbHLw
RjJDHI3b5Lc90UuNkxjKDiZ6rMleElsz4wlawHM46xwokLcBzksV58XBEklY
nitVtpfK/1os/KSYeyCbvDfZc2d3122x6K1h8wZNvU5Vr5alTUL7BaJnyNey
pqOVLp/0tg/62vkaDbaI0ucI3qzPawvetNeXFoS0X0zLkh0MplQtqWkJVSV6
6aqcQE+ALs+JBXk9lcLwNkouBu/gZ8RMuicL7xYYZk14InyDtNqeLAvbH/Fa
6zM5Gc7DArH7G+thtB5qaw3eWR1orSKU4oeu7dtIGkUzKdbPltVfR3ilN529
oxvJ0f5R5P0DeRfRqZKngq6RJHlZtyT1SnJClJN+hSBvPPhBUqQ3xgWJfkkS
afAN+O2gZCuyJfmJpCgkRb8l0qedNc2QiFxAychiTiFZeQefOLD9XjZ9QD7t
KMg+Li9568fLKMr+fkUio1shIDuKkleDTkAlD0cyTfLotiiSPwDbJ9ADUUpK
Up9CW1iQ9w9s1xi9K2ysjoSipmrqSrXwnkTC2tVXEl5r5UUax5ddu9sC88Yq
/Ji339e0YH2fhbnWkXo1dC6ajS4MiGcSOhddCrdoeRJa5cPHzZIh1aBnS37q
pufMoKmLCbV9Q0fz3zqZl7MlEqEmrPR0KjETT5D89PWUfSDtvJrJv8aWe7ye
6x/JFg5nC6MZ56idpfls0ppOJImZZJo4maBmUzY5nk1ZM8lUDbu9L0HM9MY5
OmXZm6T64hO9fXTukiXFEwz5lNai9CWrRZLJ9Bup9GE6jZU7aGV/lc7uT6df
s9Ov2JlfZjL7Mjnil4Tt7Ms4e7PObtvZmyu9mCntssvDCeepXvuR1X33xzq/
Gza+pctfC/q+6u+4vq3ti6taP9vSfFnLeRtbfu8iz++v9zQNtbWU21uLHW0F
nzfjF5IBsdvwd0UC0WiAlldpSj21XB3S+Emyk+8hwp5Vmi2qyvzePnNLX93c
XYDcd2joPU77V7CSTL7etlpRYuoN+eAHsTCTdd9C46nrq/yvq1o+WsuAFi6G
imhVjZuSs5PwvCuKLKCzjkNqTAmSkS2WrG6N16Xpq41Qd8iMGbTDPK1ap3t2
z/WSDbHOXZoaYLvYKO66cYM1eAypCuvuqLCvVpm1vbnPxPwK9ipNlcmjzNv+
lWV2tHsS+eW1IB95Qsr/GOiTSfet00hIZf0Y6bo2V0WuSec4daNhk1m+iUBD
g27e3mS5dd/L9vE+k5C6YGe697HlMUIqfHLUT5g8pEbNQFfIH1e8m3zen6Vp
vceYbU1Z8ZOJvqNWYvyyS//7tm8dvO76Zy+65LFCaVt54Bf9pX8vlfYUi/sL
/QdzeboYIWWPpOwjSXsslR2jFZVsiWLCOhG3+JqI+tLFKb6xVDLDVZcbpLN8
8QVf1ciLKumBZR/L5I5kMiSIH8rQMhUSLnfb2V25/Avl0nPs+vCTpfzjxfxP
i7l/zmcfyNn32ek7e3ppghkIXOP3X9bs2djkuWhVxwUeOlNJm/P424tia1Fu
6/d7imJbXqQtehyWudR75SUUgbXIk7uD9PokCaDh2uK+ec/kwm0I+BnMdR6b
yx3m44t/eQ953lKeH8xfOB+ci8umapjukpOqel96gjelr7Wm/xDirFtDf+DQ
Envc1P/A5jPqO49XW13NN9f9XqXM+UlZY4JWe2LZxWd2O1vNUftQ3WP9d/uw
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
AAAAAAAAAAAAAKyI/wex19Uv
     "], {{0, 697.}, {625., 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->72],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{135.90909090909048`, Automatic},
   ImageSizeRaw->{625., 697.},
   PlotRange->{{0, 625.}, {0, 697.}}]], "Input",ExpressionUUID->
  "8579799f-0217-427d-a132-7739a1e486ec"],
 "\nWhile tr(A^(2n+1)) is not 0, that means there are a groups are separate \
into individual white line or red line but it still can finish the point line \
to itself. \n\nWe can notice that whatever it is odd or even, it is always \
the start line(the line goes out from the point) and the back line(the line \
come back into the point) can decide if colour of lines are same, and the \
colour start line is always white.\n\nTherefore, the red line always \
represent the even, and white line is always odd. When start with a point and \
go though odd times, it can back to the point itself, the back line is always \
white."
}], "Text",
 CellChangeTimes->{{3.860108168186426*^9, 3.860108213692387*^9}, {
  3.860108358865452*^9, 3.8601083610455737`*^9}, {3.860109080068575*^9, 
  3.8601091081225367`*^9}, {3.8601091696309466`*^9, 3.860109327724499*^9}, {
  3.8601094409236584`*^9, 3.8601094721678495`*^9}, {3.860109536282425*^9, 
  3.8601096018006887`*^9}, {3.860109757986863*^9, 3.860109778059161*^9}, {
  3.860109816265231*^9, 3.860109820928546*^9}, {3.8601098872052364`*^9, 
  3.860109976294086*^9}, {3.8601100196946616`*^9, 3.8601100269578342`*^9}, {
  3.8601100579410515`*^9, 3.860110144986339*^9}, {3.860110180352497*^9, 
  3.860110183966363*^9}, {3.8601102424880733`*^9, 3.8601102725520554`*^9}, {
  3.860110342554142*^9, 
  3.860110580208845*^9}},ExpressionUUID->"bc8a57ed-e81a-4b2f-900c-\
6f6c6f10e078"],

Cell["We can also using Mathematica to prove A is two-colourable", "Text",
 CellChangeTimes->{{3.8601250512432218`*^9, 3.8601250796312914`*^9}, {
  3.860137969649503*^9, 
  3.860137985633604*^9}},ExpressionUUID->"6961e85d-4d26-4494-bc68-\
ceb1512d0d3a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"origin", " ", "=", " ", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"0", "1", "0", "1"},
      {"1", "0", "2", "1"},
      {"0", "2", "0", "0"},
      {"1", "1", "0", "0"}
     }], "\[NoBreak]", ")"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8601247059153385`*^9, 
  3.8601247603422356`*^9}},ExpressionUUID->"ec548450-eca8-486d-b990-\
d01c1fcc7fae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tr", "[", 
  RowBox[{"MatrixPower", "[", 
   RowBox[{"origin", ",", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", "n"}], "-", "1"}], ")"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8601247658336835`*^9, 3.8601247678688087`*^9}, {
  3.860124848148307*^9, 3.860124923630277*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"98067f90-897f-49fe-a0b0-ecf4d480e425"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", 
    FractionBox["1", "2"]}], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], 
    RowBox[{"2", " ", "n"}]]}], "+", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], 
    RowBox[{"1", "+", 
     RowBox[{"2", " ", "n"}]}]]}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", 
        InterpretationBox[
         TemplateBox[{"Root", 
           InterpretationBox[
            StyleBox[
             TemplateBox[{"\"1.25\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], ShowStringCharacters -> False], 
            1.25410168836505242495604761643335223198`15.954589770191003, 
            Editable -> False], 
           TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{"4", "-", "#1", "-", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
            Short[#, 7]& ], 1.2541016883650524`},
          "NumericalApproximation"],
         Root[4 - # - 3 #^2 + #^3& , 2, 0]]}], "+", 
       InterpretationBox[
        TemplateBox[{"Root", 
          InterpretationBox[
           StyleBox[
            TemplateBox[{"\"2.86\"", 
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEExpressions", "NumericalApproximationElider"]]}, 
             "RowDefault"], ShowStringCharacters -> False], 
           2.86080585311170354501086876553017646074`15.954589770191003, 
           Editable -> False], 
          TagBox[
           RowBox[{"Root", "[", 
             RowBox[{
               RowBox[{
                 RowBox[{"4", "-", "#1", "-", 
                   RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                   SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
           Short[#, 7]& ], 2.8608058531117035`},
         "NumericalApproximation"],
        Root[4 - # - 3 #^2 + #^3& , 3, 0]]}], ")"}], " ", 
     SuperscriptBox[
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"0.642\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          0.64207363248150028933736166436574421823`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", 
                  RowBox[{"6", " ", "#1"}], "-", 
                  SuperscriptBox["#1", "2"], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 0.6420736324815003},
        "NumericalApproximation"],
       Root[4 - 6 # - #^2 + #^3& , 2, 0]], 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"2", " ", "n"}]}]], " ", 
     InterpretationBox[
      TemplateBox[{"Root", 
        InterpretationBox[
         StyleBox[
          TemplateBox[{"\"-0.358\"", 
            DynamicBox[
             FEPrivate`FrontEndResource[
             "FEExpressions", "NumericalApproximationElider"]]}, 
           "RowDefault"], ShowStringCharacters -> 
          False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
        TagBox[
         RowBox[{"Root", "[", 
           RowBox[{
             RowBox[{
               RowBox[{
                 RowBox[{"-", "2"}], "-", 
                 RowBox[{"5", " ", "#1"}], "+", 
                 RowBox[{"2", " ", 
                   SuperscriptBox["#1", "2"]}], "+", 
                 SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
         Short[#, 7]& ], -0.35792636751849977`},
       "NumericalApproximation"],
      Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       InterpretationBox[
        TemplateBox[{"Root", 
          InterpretationBox[
           StyleBox[
            TemplateBox[{"\"-1.11\"", 
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEExpressions", "NumericalApproximationElider"]]}, 
             "RowDefault"], ShowStringCharacters -> 
            False], -1.114907541476755747922311456932220608`15.\
954589770191003, Editable -> False], 
          TagBox[
           RowBox[{"Root", "[", 
             RowBox[{
               RowBox[{
                 RowBox[{"4", "-", "#1", "-", 
                   RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                   SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
           Short[#, 7]& ], -1.1149075414767557`},
         "NumericalApproximation"],
        Root[4 - # - 3 #^2 + #^3& , 1, 0]]}], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-1.11\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -1.114907541476755747922311456932220608`15.954589770191003,
           Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -1.1149075414767557`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}]}], ")"}]}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       InterpretationBox[
        TemplateBox[{"Root", 
          InterpretationBox[
           StyleBox[
            TemplateBox[{"\"-1.11\"", 
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEExpressions", "NumericalApproximationElider"]]}, 
             "RowDefault"], ShowStringCharacters -> 
            False], -1.114907541476755747922311456932220608`15.\
954589770191003, Editable -> False], 
          TagBox[
           RowBox[{"Root", "[", 
             RowBox[{
               RowBox[{
                 RowBox[{"4", "-", "#1", "-", 
                   RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                   SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
           Short[#, 7]& ], -1.1149075414767557`},
         "NumericalApproximation"],
        Root[4 - # - 3 #^2 + #^3& , 1, 0]], "-", 
       InterpretationBox[
        TemplateBox[{"Root", 
          InterpretationBox[
           StyleBox[
            TemplateBox[{"\"1.25\"", 
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEExpressions", "NumericalApproximationElider"]]}, 
             "RowDefault"], ShowStringCharacters -> False], 
           1.25410168836505242495604761643335223198`15.954589770191003, 
           Editable -> False], 
          TagBox[
           RowBox[{"Root", "[", 
             RowBox[{
               RowBox[{
                 RowBox[{"4", "-", "#1", "-", 
                   RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                   SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
           Short[#, 7]& ], 1.2541016883650524`},
         "NumericalApproximation"],
        Root[4 - # - 3 #^2 + #^3& , 2, 0]]}], ")"}], " ", 
     SuperscriptBox[
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-2.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -2.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", 
                  RowBox[{"6", " ", "#1"}], "-", 
                  SuperscriptBox["#1", "2"], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -2.3234042760864777`},
        "NumericalApproximation"],
       Root[4 - 6 # - #^2 + #^3& , 1, 0]], 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"2", " ", "n"}]}]], " ", 
     InterpretationBox[
      TemplateBox[{"Root", 
        InterpretationBox[
         StyleBox[
          TemplateBox[{"\"-3.32\"", 
            DynamicBox[
             FEPrivate`FrontEndResource[
             "FEExpressions", "NumericalApproximationElider"]]}, 
           "RowDefault"], ShowStringCharacters -> 
          False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
        TagBox[
         RowBox[{"Root", "[", 
           RowBox[{
             RowBox[{
               RowBox[{
                 RowBox[{"-", "2"}], "-", 
                 RowBox[{"5", " ", "#1"}], "+", 
                 RowBox[{"2", " ", 
                   SuperscriptBox["#1", "2"]}], "+", 
                 SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
         Short[#, 7]& ], -3.3234042760864777`},
       "NumericalApproximation"],
      Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-1.11\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -1.114907541476755747922311456932220608`15.954589770191003,
           Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -1.1149075414767557`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-1.11\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -1.114907541476755747922311456932220608`15.954589770191003,
           Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -1.1149075414767557`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}]}], ")"}]}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     InterpretationBox[
      TemplateBox[{"Root", 
        InterpretationBox[
         StyleBox[
          TemplateBox[{"\"1.25\"", 
            DynamicBox[
             FEPrivate`FrontEndResource[
             "FEExpressions", "NumericalApproximationElider"]]}, 
           "RowDefault"], ShowStringCharacters -> False], 
         1.25410168836505242495604761643335223198`15.954589770191003, 
         Editable -> False], 
        TagBox[
         RowBox[{"Root", "[", 
           RowBox[{
             RowBox[{
               RowBox[{"4", "-", "#1", "-", 
                 RowBox[{"3", " ", 
                   SuperscriptBox["#1", "2"]}], "+", 
                 SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
         Short[#, 7]& ], 1.2541016883650524`},
       "NumericalApproximation"],
      Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
     SuperscriptBox[
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", 
                  RowBox[{"6", " ", "#1"}], "-", 
                  SuperscriptBox["#1", "2"], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.6813306436049773`},
        "NumericalApproximation"],
       Root[4 - 6 # - #^2 + #^3& , 3, 0]], 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"2", " ", "n"}]}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", 
        InterpretationBox[
         TemplateBox[{"Root", 
           InterpretationBox[
            StyleBox[
             TemplateBox[{"\"-3.32\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], ShowStringCharacters -> 
             False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
           TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "2"}], "-", 
                    RowBox[{"5", " ", "#1"}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
            Short[#, 7]& ], -3.3234042760864777`},
          "NumericalApproximation"],
         Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "+", 
       InterpretationBox[
        TemplateBox[{"Root", 
          InterpretationBox[
           StyleBox[
            TemplateBox[{"\"-0.358\"", 
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEExpressions", "NumericalApproximationElider"]]}, 
             "RowDefault"], ShowStringCharacters -> 
            False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
          TagBox[
           RowBox[{"Root", "[", 
             RowBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"-", "2"}], "-", 
                   RowBox[{"5", " ", "#1"}], "+", 
                   RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                   SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
           Short[#, 7]& ], -0.35792636751849977`},
         "NumericalApproximation"],
        Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], ")"}]}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-1.11\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -1.114907541476755747922311456932220608`15.954589770191003,
           Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -1.1149075414767557`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-1.11\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -1.114907541476755747922311456932220608`15.954589770191003,
           Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -1.1149075414767557`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}]}], ")"}]}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox[
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", 
                  RowBox[{"6", " ", "#1"}], "-", 
                  SuperscriptBox["#1", "2"], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.6813306436049773`},
        "NumericalApproximation"],
       Root[4 - 6 # - #^2 + #^3& , 3, 0]], 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"2", " ", "n"}]}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root", 
           InterpretationBox[
            StyleBox[
             TemplateBox[{"\"-1.11\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], ShowStringCharacters -> 
             False], -1.114907541476755747922311456932220608`15.\
954589770191003, Editable -> False], 
           TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{"4", "-", "#1", "-", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
            Short[#, 7]& ], -1.1149075414767557`},
          "NumericalApproximation"],
         Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
        InterpretationBox[
         TemplateBox[{"Root", 
           InterpretationBox[
            StyleBox[
             TemplateBox[{"\"-3.32\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], ShowStringCharacters -> 
             False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
           TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "2"}], "-", 
                    RowBox[{"5", " ", "#1"}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
            Short[#, 7]& ], -3.3234042760864777`},
          "NumericalApproximation"],
         Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "-", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root", 
           InterpretationBox[
            StyleBox[
             TemplateBox[{"\"2.86\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], ShowStringCharacters -> False], 
            2.86080585311170354501086876553017646074`15.954589770191003, 
            Editable -> False], 
           TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{"4", "-", "#1", "-", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
            Short[#, 7]& ], 2.8608058531117035`},
          "NumericalApproximation"],
         Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
        InterpretationBox[
         TemplateBox[{"Root", 
           InterpretationBox[
            StyleBox[
             TemplateBox[{"\"-0.358\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], ShowStringCharacters -> 
             False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
           TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "2"}], "-", 
                    RowBox[{"5", " ", "#1"}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
            Short[#, 7]& ], -0.35792636751849977`},
          "NumericalApproximation"],
         Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}]}], ")"}]}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-1.11\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -1.114907541476755747922311456932220608`15.954589770191003,
           Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -1.1149075414767557`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-1.11\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -1.114907541476755747922311456932220608`15.954589770191003,
           Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -1.1149075414767557`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}]}], ")"}]}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     InterpretationBox[
      TemplateBox[{"Root", 
        InterpretationBox[
         StyleBox[
          TemplateBox[{"\"-1.11\"", 
            DynamicBox[
             FEPrivate`FrontEndResource[
             "FEExpressions", "NumericalApproximationElider"]]}, 
           "RowDefault"], ShowStringCharacters -> 
          False], -1.114907541476755747922311456932220608`15.954589770191003, 
         Editable -> False], 
        TagBox[
         RowBox[{"Root", "[", 
           RowBox[{
             RowBox[{
               RowBox[{"4", "-", "#1", "-", 
                 RowBox[{"3", " ", 
                   SuperscriptBox["#1", "2"]}], "+", 
                 SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
         Short[#, 7]& ], -1.1149075414767557`},
       "NumericalApproximation"],
      Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
     SuperscriptBox[
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"0.642\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          0.64207363248150028933736166436574421823`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", 
                  RowBox[{"6", " ", "#1"}], "-", 
                  SuperscriptBox["#1", "2"], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 0.6420736324815003},
        "NumericalApproximation"],
       Root[4 - 6 # - #^2 + #^3& , 2, 0]], 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"2", " ", "n"}]}]], " ", 
     RowBox[{"(", 
      RowBox[{
       InterpretationBox[
        TemplateBox[{"Root", 
          InterpretationBox[
           StyleBox[
            TemplateBox[{"\"-3.32\"", 
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEExpressions", "NumericalApproximationElider"]]}, 
             "RowDefault"], ShowStringCharacters -> 
            False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
          TagBox[
           RowBox[{"Root", "[", 
             RowBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"-", "2"}], "-", 
                   RowBox[{"5", " ", "#1"}], "+", 
                   RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                   SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
           Short[#, 7]& ], -3.3234042760864777`},
         "NumericalApproximation"],
        Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]], "-", 
       InterpretationBox[
        TemplateBox[{"Root", 
          InterpretationBox[
           StyleBox[
            TemplateBox[{"\"1.68\"", 
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEExpressions", "NumericalApproximationElider"]]}, 
             "RowDefault"], ShowStringCharacters -> False], 
           1.68133064360497730405086258542723953724`15.954589770191003, 
           Editable -> False], 
          TagBox[
           RowBox[{"Root", "[", 
             RowBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"-", "2"}], "-", 
                   RowBox[{"5", " ", "#1"}], "+", 
                   RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                   SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
           Short[#, 7]& ], 1.6813306436049773`},
         "NumericalApproximation"],
        Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}], ")"}]}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-1.11\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -1.114907541476755747922311456932220608`15.954589770191003,
           Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -1.1149075414767557`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-1.11\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -1.114907541476755747922311456932220608`15.954589770191003,
           Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -1.1149075414767557`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}]}], ")"}]}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", 
        InterpretationBox[
         TemplateBox[{"Root", 
           InterpretationBox[
            StyleBox[
             TemplateBox[{"\"-1.11\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], ShowStringCharacters -> 
             False], -1.114907541476755747922311456932220608`15.\
954589770191003, Editable -> False], 
           TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{"4", "-", "#1", "-", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
            Short[#, 7]& ], -1.1149075414767557`},
          "NumericalApproximation"],
         Root[4 - # - 3 #^2 + #^3& , 1, 0]]}], "+", 
       InterpretationBox[
        TemplateBox[{"Root", 
          InterpretationBox[
           StyleBox[
            TemplateBox[{"\"2.86\"", 
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEExpressions", "NumericalApproximationElider"]]}, 
             "RowDefault"], ShowStringCharacters -> False], 
           2.86080585311170354501086876553017646074`15.954589770191003, 
           Editable -> False], 
          TagBox[
           RowBox[{"Root", "[", 
             RowBox[{
               RowBox[{
                 RowBox[{"4", "-", "#1", "-", 
                   RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                   SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
           Short[#, 7]& ], 2.8608058531117035`},
         "NumericalApproximation"],
        Root[4 - # - 3 #^2 + #^3& , 3, 0]]}], ")"}], " ", 
     SuperscriptBox[
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", 
                  RowBox[{"6", " ", "#1"}], "-", 
                  SuperscriptBox["#1", "2"], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.6813306436049773`},
        "NumericalApproximation"],
       Root[4 - 6 # - #^2 + #^3& , 3, 0]], 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"2", " ", "n"}]}]], " ", 
     InterpretationBox[
      TemplateBox[{"Root", 
        InterpretationBox[
         StyleBox[
          TemplateBox[{"\"1.68\"", 
            DynamicBox[
             FEPrivate`FrontEndResource[
             "FEExpressions", "NumericalApproximationElider"]]}, 
           "RowDefault"], ShowStringCharacters -> False], 
         1.68133064360497730405086258542723953724`15.954589770191003, 
         Editable -> False], 
        TagBox[
         RowBox[{"Root", "[", 
           RowBox[{
             RowBox[{
               RowBox[{
                 RowBox[{"-", "2"}], "-", 
                 RowBox[{"5", " ", "#1"}], "+", 
                 RowBox[{"2", " ", 
                   SuperscriptBox["#1", "2"]}], "+", 
                 SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
         Short[#, 7]& ], 1.6813306436049773`},
       "NumericalApproximation"],
      Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-1.11\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -1.114907541476755747922311456932220608`15.954589770191003,
           Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -1.1149075414767557`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-1.11\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -1.114907541476755747922311456932220608`15.954589770191003,
           Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -1.1149075414767557`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}]}], ")"}]}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     InterpretationBox[
      TemplateBox[{"Root", 
        InterpretationBox[
         StyleBox[
          TemplateBox[{"\"2.86\"", 
            DynamicBox[
             FEPrivate`FrontEndResource[
             "FEExpressions", "NumericalApproximationElider"]]}, 
           "RowDefault"], ShowStringCharacters -> False], 
         2.86080585311170354501086876553017646074`15.954589770191003, 
         Editable -> False], 
        TagBox[
         RowBox[{"Root", "[", 
           RowBox[{
             RowBox[{
               RowBox[{"4", "-", "#1", "-", 
                 RowBox[{"3", " ", 
                   SuperscriptBox["#1", "2"]}], "+", 
                 SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
         Short[#, 7]& ], 2.8608058531117035`},
       "NumericalApproximation"],
      Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
     SuperscriptBox[
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-2.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -2.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", 
                  RowBox[{"6", " ", "#1"}], "-", 
                  SuperscriptBox["#1", "2"], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -2.3234042760864777`},
        "NumericalApproximation"],
       Root[4 - 6 # - #^2 + #^3& , 1, 0]], 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"2", " ", "n"}]}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", 
        InterpretationBox[
         TemplateBox[{"Root", 
           InterpretationBox[
            StyleBox[
             TemplateBox[{"\"-0.358\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], ShowStringCharacters -> 
             False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
           TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "2"}], "-", 
                    RowBox[{"5", " ", "#1"}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
            Short[#, 7]& ], -0.35792636751849977`},
          "NumericalApproximation"],
         Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "+", 
       InterpretationBox[
        TemplateBox[{"Root", 
          InterpretationBox[
           StyleBox[
            TemplateBox[{"\"1.68\"", 
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEExpressions", "NumericalApproximationElider"]]}, 
             "RowDefault"], ShowStringCharacters -> False], 
           1.68133064360497730405086258542723953724`15.954589770191003, 
           Editable -> False], 
          TagBox[
           RowBox[{"Root", "[", 
             RowBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"-", "2"}], "-", 
                   RowBox[{"5", " ", "#1"}], "+", 
                   RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                   SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
           Short[#, 7]& ], 1.6813306436049773`},
         "NumericalApproximation"],
        Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}], ")"}]}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-1.11\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -1.114907541476755747922311456932220608`15.954589770191003,
           Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -1.1149075414767557`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-1.11\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -1.114907541476755747922311456932220608`15.954589770191003,
           Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -1.1149075414767557`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}]}], ")"}]}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox[
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-2.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -2.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", 
                  RowBox[{"6", " ", "#1"}], "-", 
                  SuperscriptBox["#1", "2"], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -2.3234042760864777`},
        "NumericalApproximation"],
       Root[4 - 6 # - #^2 + #^3& , 1, 0]], 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"2", " ", "n"}]}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root", 
           InterpretationBox[
            StyleBox[
             TemplateBox[{"\"1.25\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], ShowStringCharacters -> False], 
            1.25410168836505242495604761643335223198`15.954589770191003, 
            Editable -> False], 
           TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{"4", "-", "#1", "-", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
            Short[#, 7]& ], 1.2541016883650524`},
          "NumericalApproximation"],
         Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
        InterpretationBox[
         TemplateBox[{"Root", 
           InterpretationBox[
            StyleBox[
             TemplateBox[{"\"-0.358\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], ShowStringCharacters -> 
             False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
           TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "2"}], "-", 
                    RowBox[{"5", " ", "#1"}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
            Short[#, 7]& ], -0.35792636751849977`},
          "NumericalApproximation"],
         Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "-", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root", 
           InterpretationBox[
            StyleBox[
             TemplateBox[{"\"-1.11\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], ShowStringCharacters -> 
             False], -1.114907541476755747922311456932220608`15.\
954589770191003, Editable -> False], 
           TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{"4", "-", "#1", "-", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
            Short[#, 7]& ], -1.1149075414767557`},
          "NumericalApproximation"],
         Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
        InterpretationBox[
         TemplateBox[{"Root", 
           InterpretationBox[
            StyleBox[
             TemplateBox[{"\"1.68\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], ShowStringCharacters -> False], 
            1.68133064360497730405086258542723953724`15.954589770191003, 
            Editable -> False], 
           TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "2"}], "-", 
                    RowBox[{"5", " ", "#1"}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
            Short[#, 7]& ], 1.6813306436049773`},
          "NumericalApproximation"],
         Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}]}], ")"}]}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-1.11\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -1.114907541476755747922311456932220608`15.954589770191003,
           Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -1.1149075414767557`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-1.11\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -1.114907541476755747922311456932220608`15.954589770191003,
           Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -1.1149075414767557`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}]}], ")"}]}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox[
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"0.642\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          0.64207363248150028933736166436574421823`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", 
                  RowBox[{"6", " ", "#1"}], "-", 
                  SuperscriptBox["#1", "2"], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 0.6420736324815003},
        "NumericalApproximation"],
       Root[4 - 6 # - #^2 + #^3& , 2, 0]], 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"2", " ", "n"}]}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         InterpretationBox[
          TemplateBox[{"Root", 
            InterpretationBox[
             StyleBox[
              TemplateBox[{"\"1.25\"", 
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "NumericalApproximationElider"]]}, 
               "RowDefault"], ShowStringCharacters -> False], 
             1.25410168836505242495604761643335223198`15.954589770191003, 
             Editable -> False], 
            TagBox[
             RowBox[{"Root", "[", 
               RowBox[{
                 RowBox[{
                   RowBox[{"4", "-", "#1", "-", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
             Short[#, 7]& ], 1.2541016883650524`},
           "NumericalApproximation"],
          Root[4 - # - 3 #^2 + #^3& , 2, 0]]}], " ", 
        InterpretationBox[
         TemplateBox[{"Root", 
           InterpretationBox[
            StyleBox[
             TemplateBox[{"\"-3.32\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], ShowStringCharacters -> 
             False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
           TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "2"}], "-", 
                    RowBox[{"5", " ", "#1"}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
            Short[#, 7]& ], -3.3234042760864777`},
          "NumericalApproximation"],
         Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root", 
           InterpretationBox[
            StyleBox[
             TemplateBox[{"\"2.86\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], ShowStringCharacters -> False], 
            2.86080585311170354501086876553017646074`15.954589770191003, 
            Editable -> False], 
           TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{"4", "-", "#1", "-", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
            Short[#, 7]& ], 2.8608058531117035`},
          "NumericalApproximation"],
         Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
        InterpretationBox[
         TemplateBox[{"Root", 
           InterpretationBox[
            StyleBox[
             TemplateBox[{"\"1.68\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], ShowStringCharacters -> False], 
            1.68133064360497730405086258542723953724`15.954589770191003, 
            Editable -> False], 
           TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "2"}], "-", 
                    RowBox[{"5", " ", "#1"}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
            Short[#, 7]& ], 1.6813306436049773`},
          "NumericalApproximation"],
         Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}]}], ")"}]}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-1.11\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -1.114907541476755747922311456932220608`15.954589770191003,
           Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -1.1149075414767557`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-3.32\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -3.32340427608647770441052671230863779783`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -3.3234042760864777`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 1, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.25\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.25410168836505242495604761643335223198`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], 1.2541016883650524`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 2, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-0.358\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -0.35792636751849976617378956689208280295`15.\
954589770191003, Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "2"}], "]"}], 
          Short[#, 7]& ], -0.35792636751849977`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 2, 0]]}], "-", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"-1.11\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> 
           False], -1.114907541476755747922311456932220608`15.954589770191003,
           Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "1"}], "]"}], 
          Short[#, 7]& ], -1.1149075414767557`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 1, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}], "+", 
     RowBox[{
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"2.86\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          2.86080585311170354501086876553017646074`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{"4", "-", "#1", "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 2.8608058531117035`},
        "NumericalApproximation"],
       Root[4 - # - 3 #^2 + #^3& , 3, 0]], " ", 
      InterpretationBox[
       TemplateBox[{"Root", 
         InterpretationBox[
          StyleBox[
           TemplateBox[{"\"1.68\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"], ShowStringCharacters -> False], 
          1.68133064360497730405086258542723953724`15.954589770191003, 
          Editable -> False], 
         TagBox[
          RowBox[{"Root", "[", 
            RowBox[{
              RowBox[{
                RowBox[{
                  RowBox[{"-", "2"}], "-", 
                  RowBox[{"5", " ", "#1"}], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                  SuperscriptBox["#1", "3"]}], "&"}], ",", "3"}], "]"}], 
          Short[#, 7]& ], 1.6813306436049773`},
        "NumericalApproximation"],
       Root[-2 - 5 # + 2 #^2 + #^3& , 3, 0]]}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{{3.8601249064528303`*^9, 3.86012493368346*^9}, 
   3.8601251007317705`*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"4c2d776e-9dde-4dc6-b35d-d1c63a121d8e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["C.", "Subsection",
 CellChangeTimes->{{3.860106794958149*^9, 
  3.8601067959691978`*^9}},ExpressionUUID->"e72b5184-ee71-40df-b5b6-\
acdae2bc120d"],

Cell[CellGroupData[{

Cell["\<\
i) How would you measure the distance between two given vertices and the \
diameter of a graph using the matrices Pm?\
\>", "Subsubsection",
 CellChangeTimes->{{3.860106835355053*^9, 
  3.860106840791155*^9}},ExpressionUUID->"253eef0e-7318-43d8-a38d-\
4bb91506120e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"matrix", " ", "=", " ", 
  RowBox[{"MatrixForm", "[", "origin", "]"}]}]], "Input",
 CellChangeTimes->{{3.860125673791772*^9, 3.860125684779703*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"ee9c8466-5f4f-4246-a3e8-c50d3b5f90a0"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "1", "0", "1"},
     {"1", "0", "2", "1"},
     {"0", "2", "0", "0"},
     {"1", "1", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.860125679071952*^9, 3.8601256890583487`*^9}},
 CellLabel->
  "Out[66]//MatrixForm=",ExpressionUUID->"3ac4364e-56e5-4cc2-b4dc-\
7f61f3d6e0d0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"matrix1", " ", "=", " ", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{"MatrixPower", "[", 
    RowBox[{"origin", ",", "2"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.860125624426586*^9, 3.8601256567298985`*^9}},
 NumberMarks->False,
 CellLabel->"In[63]:=",ExpressionUUID->"5bdbe935-ceff-4d07-b28d-9e0ac67e6238"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"2", "1", "2", "1"},
     {"1", "6", "0", "1"},
     {"2", "0", "4", "2"},
     {"1", "1", "2", "2"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.860125612887077*^9, 3.86012566163155*^9}},
 CellLabel->
  "Out[63]//MatrixForm=",ExpressionUUID->"b73fdd60-fa5b-459a-a6d4-\
6cbea422cc1c"]
}, Open  ]],

Cell["Add up", "Text",
 CellChangeTimes->{{3.860125692569807*^9, 
  3.8601256940918856`*^9}},ExpressionUUID->"f535d1db-37e5-4a21-91af-\
ce2bfefc2bbd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "1", "0", "1"},
       {"1", "0", "2", "1"},
       {"0", "2", "0", "0"},
       {"1", "1", "0", "0"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], "+", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"2", "1", "2", "1"},
       {"1", "6", "0", "1"},
       {"2", "0", "4", "2"},
       {"1", "1", "2", "2"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "]"}]], "Input",
 CellChangeTimes->{{3.860125711310429*^9, 3.860125732820342*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"b35b1222-14b1-41de-b420-0d1c9fcdb820"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"2", "2", "2", "2"},
     {"2", "6", "2", "2"},
     {"2", "2", "4", "2"},
     {"2", "2", "2", "2"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.8601257139358635`*^9, 3.860125734995062*^9}},
 CellLabel->
  "Out[69]//MatrixForm=",ExpressionUUID->"9788c209-5b1b-4682-8238-\
9a4d6c2806c2"]
}, Open  ]],

Cell["\<\
We notice that in here every block is full and in Pm m== 2, which means \
diameter is 2\
\>", "Text",
 CellChangeTimes->{{3.860117277683694*^9, 3.860117353541144*^9}, 
   3.860117385727064*^9, {3.8601176611957736`*^9, 3.860117661284085*^9}, {
   3.8601190820834045`*^9, 3.8601191371877365`*^9}, {3.8601192731508074`*^9, 
   3.860119298988263*^9}, {3.860125753222907*^9, 3.8601257902119775`*^9}, {
   3.860126812933868*^9, 3.86012683515549*^9}, {3.860138032365756*^9, 
   3.8601380327749605`*^9}},ExpressionUUID->"f33fad9b-4ea5-495b-b72d-\
0e3760adb0c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
ii) How could you decide, again using these matrices, whether or not a graph \
is connected or disconnected?\
\>", "Subsubsection",
 CellChangeTimes->{{3.8601068518181076`*^9, 
  3.860106856772546*^9}},ExpressionUUID->"c6d347a3-e125-4c1b-b40d-\
e174d65d6cf8"],

Cell["\<\
We can cut the diagram A into two part by breaking point 2
Then we make power of matrix with the number of points\
\>", "Text",
 CellChangeTimes->{{3.8601185790383577`*^9, 3.8601185910739307`*^9}, {
  3.8601186485078316`*^9, 3.8601186702362366`*^9}, {3.860118788262312*^9, 
  3.860118798793798*^9}, {3.860126582604313*^9, 
  3.860126606107381*^9}},ExpressionUUID->"cf522400-dd41-4478-be0d-\
7d5c495861a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"MatrixPower", "[", 
   RowBox[{
    TagBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"0", "1", "0", "1"},
        {"1", "0", "0", "1"},
        {"0", "0", "0", "0"},
        {"1", "1", "0", "0"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]], ",", "4"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8601265046901426`*^9, 3.860126558934983*^9}, {
  3.86012661029249*^9, 3.8601266127705913`*^9}, {3.860128441725894*^9, 
  3.8601284647780666`*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"df3a47e9-1ef2-43f6-ba29-9ebc8e775c37"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"6", "5", "0", "5"},
     {"5", "6", "0", "5"},
     {"0", "0", "0", "0"},
     {"5", "5", "0", "6"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.8601265264990263`*^9, 3.8601265596010723`*^9}, {
  3.860126607902748*^9, 3.8601266132813644`*^9}, {3.8601284427394915`*^9, 
  3.860128465307521*^9}},
 CellLabel->
  "Out[111]//MatrixForm=",ExpressionUUID->"e6326623-00c3-420a-942f-\
f05333454df0"]
}, Open  ]],

Cell["\<\
We notice that there are some 0 inside of it, now we try connect 1 point 2 \
and point 3\
\>", "Text",
 CellChangeTimes->{{3.8601266208606415`*^9, 
  3.8601266436929693`*^9}},ExpressionUUID->"7b292976-c39d-4788-8a66-\
aecef884071e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"MatrixPower", "[", 
   RowBox[{
    TagBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"0", "1", "0", "1"},
        {"1", "0", "1", "1"},
        {"0", "1", "0", "0"},
        {"1", "1", "0", "0"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]], ",", "4"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.860126616188697*^9, 3.8601266509318104`*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"b6a15e0b-e738-45a5-9332-c80ce1c3a466"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"7", "6", "4", "6"},
     {"6", "11", "2", "6"},
     {"4", "2", "3", "4"},
     {"6", "6", "4", "7"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.86012665150832*^9},
 CellLabel->
  "Out[93]//MatrixForm=",ExpressionUUID->"5fb318ba-390a-4005-bd69-\
334f46c61061"]
}, Open  ]],

Cell["\<\
Result: If the power of matrix with the number of points still have 0 inside \
of it, that means it is not connected. And in fact, whatever how large number \
of the power, there are still 0 inside of matrix.\
\>", "Text",
 CellChangeTimes->{{3.860126654889248*^9, 3.860126686417474*^9}, {
  3.8601380761128297`*^9, 3.860138103742407*^9}, {3.8601381358609304`*^9, 
  3.8601381407393684`*^9}},ExpressionUUID->"f84773b4-736b-452f-9a41-\
60bcc7879a3e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"MatrixPower", "[", 
   RowBox[{
    TagBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"0", "1", "0", "1"},
        {"1", "0", "0", "1"},
        {"0", "0", "0", "0"},
        {"1", "1", "0", "0"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]], ",", "50"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.860138108951991*^9, 3.860138118386172*^9}},
 CellLabel->
  "In[137]:=",ExpressionUUID->"400926a8-146a-4a78-91d1-90b91ab8bb30"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"375299968947542", "375299968947541", "0", "375299968947541"},
     {"375299968947541", "375299968947542", "0", "375299968947541"},
     {"0", "0", "0", "0"},
     {"375299968947541", "375299968947541", "0", "375299968947542"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.860138110262947*^9, 3.860138119286769*^9}},
 CellLabel->
  "Out[137]//MatrixForm=",ExpressionUUID->"e5ba1882-4706-4ec7-bd3d-\
2bc0d8ceec88"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
D. Use the results in a), b) and c) to answer the following questions\
\>", "Subsection",
 CellChangeTimes->{{3.860119479567524*^9, 
  3.8601194958350887`*^9}},ExpressionUUID->"efaef18d-82af-4684-a13a-\
12d7f38676df"],

Cell[CellGroupData[{

Cell["Initial", "Subsubsection",
 CellChangeTimes->{{3.860119510156726*^9, 3.860119511765687*^9}, {
  3.860119772110939*^9, 
  3.8601197745873227`*^9}},ExpressionUUID->"c303c7d6-90fa-4fbc-b282-\
92c9f5783bcc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"A", " ", "=", " ", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"0", "1", "1", "0", "1", "0", "0", "0"},
      {"1", "0", "0", "1", "0", "1", "0", "0"},
      {"1", "0", "0", "1", "0", "0", "1", "0"},
      {"0", "1", "1", "0", "0", "0", "0", "1"},
      {"1", "0", "0", "0", "0", "1", "1", "0"},
      {"0", "1", "0", "0", "1", "0", "0", "1"},
      {"0", "0", "1", "0", "1", "0", "0", "1"},
      {"0", "0", "0", "1", "0", "1", "1", "0"}
     }], "\[NoBreak]", ")"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8601195498941145`*^9, 3.860119630253589*^9}, 
   3.8601197185408573`*^9, {3.8601245305859404`*^9, 3.8601245325426903`*^9}, 
   3.860128845844228*^9},
 CellLabel->"In[27]:=",ExpressionUUID->"9e3c7f85-ac7c-46eb-9ea9-31121e4b3f71"]
}, Open  ]],

Cell[CellGroupData[{

Cell["i) How many triangles does this graph have?", "Subsubsection",
 CellChangeTimes->{
  3.8601197837549596`*^9},ExpressionUUID->"219f0791-eadc-4878-95ff-\
e2611cb02e7e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tr", "[", 
  RowBox[{
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"0", "1", "1", "0", "1", "0", "0", "0"},
      {"1", "0", "0", "1", "0", "1", "0", "0"},
      {"1", "0", "0", "1", "0", "0", "1", "0"},
      {"0", "1", "1", "0", "0", "0", "0", "1"},
      {"1", "0", "0", "0", "0", "1", "1", "0"},
      {"0", "1", "0", "0", "1", "0", "0", "1"},
      {"0", "0", "1", "0", "1", "0", "0", "1"},
      {"0", "0", "0", "1", "0", "1", "1", "0"}
     }], "\[NoBreak]", ")"}], ".", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"0", "1", "1", "0", "1", "0", "0", "0"},
      {"1", "0", "0", "1", "0", "1", "0", "0"},
      {"1", "0", "0", "1", "0", "0", "1", "0"},
      {"0", "1", "1", "0", "0", "0", "0", "1"},
      {"1", "0", "0", "0", "0", "1", "1", "0"},
      {"0", "1", "0", "0", "1", "0", "0", "1"},
      {"0", "0", "1", "0", "1", "0", "0", "1"},
      {"0", "0", "0", "1", "0", "1", "1", "0"}
     }], "\[NoBreak]", ")"}], ".", 
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"0", "1", "1", "0", "1", "0", "0", "0"},
      {"1", "0", "0", "1", "0", "1", "0", "0"},
      {"1", "0", "0", "1", "0", "0", "1", "0"},
      {"0", "1", "1", "0", "0", "0", "0", "1"},
      {"1", "0", "0", "0", "0", "1", "1", "0"},
      {"0", "1", "0", "0", "1", "0", "0", "1"},
      {"0", "0", "1", "0", "1", "0", "0", "1"},
      {"0", "0", "0", "1", "0", "1", "1", "0"}
     }], "\[NoBreak]", ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8601198050737443`*^9, 3.8601198121835327`*^9}, 
   3.86013834930709*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"d63b843f-5d91-4845-805c-21e0b2ee930b"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.860119813030845*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"859fd13d-8832-4214-ae05-ac1037b42830"]
}, Open  ]],

Cell["There are no triangle in the graph", "Text",
 CellChangeTimes->{{3.8601198314024787`*^9, 
  3.860119841113427*^9}},ExpressionUUID->"b12d0715-3f29-4759-af82-\
6858ffa967a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["ii) Is the graph connected?", "Subsubsection",
 CellChangeTimes->{{3.860119857530985*^9, 
  3.860119866634984*^9}},ExpressionUUID->"e5bb1416-e288-450d-ae9c-\
be8dc7ef7ffe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"MatrixPower", "[", 
   RowBox[{
    TagBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"0", "1", "1", "0", "1", "0", "0", "0"},
        {"1", "0", "0", "1", "0", "1", "0", "0"},
        {"1", "0", "0", "1", "0", "0", "1", "0"},
        {"0", "1", "1", "0", "0", "0", "0", "1"},
        {"1", "0", "0", "0", "0", "1", "1", "0"},
        {"0", "1", "0", "0", "1", "0", "0", "1"},
        {"0", "0", "1", "0", "1", "0", "0", "1"},
        {"0", "0", "0", "1", "0", "1", "1", "0"}
       }], "\[NoBreak]", ")"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]], ",", "8"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.860126709522964*^9, 3.8601267120132713`*^9}, {
  3.8601284058478184`*^9, 3.8601284245994186`*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"7e0f3575-b858-406f-b209-6b25cf395691"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1641", "0", "0", "1640", "0", "1640", "1640", "0"},
     {"0", "1641", "1640", "0", "1640", "0", "0", "1640"},
     {"0", "1640", "1641", "0", "1640", "0", "0", "1640"},
     {"1640", "0", "0", "1641", "0", "1640", "1640", "0"},
     {"0", "1640", "1640", "0", "1641", "0", "0", "1640"},
     {"1640", "0", "0", "1640", "0", "1641", "1640", "0"},
     {"1640", "0", "0", "1640", "0", "1640", "1641", "0"},
     {"0", "1640", "1640", "0", "1640", "0", "0", "1641"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.860126712494611*^9, {3.860128406724126*^9, 3.8601284318576326`*^9}},
 CellLabel->
  "Out[108]//MatrixForm=",ExpressionUUID->"824cf8eb-b4e3-47cb-baad-\
c91dd7eeac3e"]
}, Open  ]],

Cell["the graph is not connected", "Text",
 CellChangeTimes->{{3.860119889801466*^9, 3.8601198955668855`*^9}, {
  3.8601267186309357`*^9, 
  3.860126729738895*^9}},ExpressionUUID->"cc0c3253-d11f-4ce6-8c58-\
767a8b92e9e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["iii) What is its diameter?", "Subsubsection",
 CellChangeTimes->{{3.8601199026399727`*^9, 
  3.860119913327585*^9}},ExpressionUUID->"fd3eb24d-2517-4baf-a7c2-\
5983cae77f25"],

Cell["We make A^2 and A^3", "Text",
 CellChangeTimes->{{3.860126862988615*^9, 
  3.8601268701471806`*^9}},ExpressionUUID->"30f1d795-4f36-45d5-941a-\
5f400a8c6eda"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{"MatrixForm", "[", 
    RowBox[{"MatrixPower", "[", 
     RowBox[{
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "1", "0", "1", "0", "0", "0"},
         {"1", "0", "0", "1", "0", "1", "0", "0"},
         {"1", "0", "0", "1", "0", "0", "1", "0"},
         {"0", "1", "1", "0", "0", "0", "0", "1"},
         {"1", "0", "0", "0", "0", "1", "1", "0"},
         {"0", "1", "0", "0", "1", "0", "0", "1"},
         {"0", "0", "1", "0", "1", "0", "0", "1"},
         {"0", "0", "0", "1", "0", "1", "1", "0"}
        }], "\[NoBreak]", ")"}], ",", "2"}], "]"}], "]"}], 
   "\[IndentingNewLine]", " ", 
   RowBox[{"MatrixForm", "[", 
    RowBox[{"MatrixPower", "[", 
     RowBox[{
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "1", "0", "1", "0", "0", "0"},
         {"1", "0", "0", "1", "0", "1", "0", "0"},
         {"1", "0", "0", "1", "0", "0", "1", "0"},
         {"0", "1", "1", "0", "0", "0", "0", "1"},
         {"1", "0", "0", "0", "0", "1", "1", "0"},
         {"0", "1", "0", "0", "1", "0", "0", "1"},
         {"0", "0", "1", "0", "1", "0", "0", "1"},
         {"0", "0", "0", "1", "0", "1", "1", "0"}
        }], "\[NoBreak]", ")"}], ",", "3"}], "]"}], "]"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.8601199461524816`*^9, 3.8601200034974337`*^9}, {
  3.860120055379575*^9, 3.8601201162770295`*^9}, {3.860120185558069*^9, 
  3.860120223040157*^9}, {3.860125806235591*^9, 3.86012590846521*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"a288fffe-cfcb-43e6-b66f-c192f9dbe0ee"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"3", "0", "0", "2", "0", "2", "2", "0"},
     {"0", "3", "2", "0", "2", "0", "0", "2"},
     {"0", "2", "3", "0", "2", "0", "0", "2"},
     {"2", "0", "0", "3", "0", "2", "2", "0"},
     {"0", "2", "2", "0", "3", "0", "0", "2"},
     {"2", "0", "0", "2", "0", "3", "2", "0"},
     {"2", "0", "0", "2", "0", "2", "3", "0"},
     {"0", "2", "2", "0", "2", "0", "0", "3"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8601258662877913`*^9, 3.860125908788466*^9},
 CellLabel->
  "Out[74]//MatrixForm=",ExpressionUUID->"20bdcacc-d601-40d4-809e-\
fe327d2c5706"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "7", "7", "0", "7", "0", "0", "6"},
     {"7", "0", "0", "7", "0", "7", "6", "0"},
     {"7", "0", "0", "7", "0", "6", "7", "0"},
     {"0", "7", "7", "0", "6", "0", "0", "7"},
     {"7", "0", "0", "6", "0", "7", "7", "0"},
     {"0", "7", "6", "0", "7", "0", "0", "7"},
     {"0", "6", "7", "0", "7", "0", "0", "7"},
     {"6", "0", "0", "7", "0", "7", "7", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8601258662877913`*^9, 3.860125908791472*^9},
 CellLabel->
  "Out[75]//MatrixForm=",ExpressionUUID->"16130492-c27b-4e57-8c8d-\
969243f418e6"]
}, Open  ]],

Cell["Then we start with P2 =  A+A^2", "Text",
 CellChangeTimes->{{3.86012689178481*^9, 
  3.860126927603279*^9}},ExpressionUUID->"1927cacd-e210-454b-8790-\
3c032c682b42"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"0", "1", "1", "0", "1", "0", "0", "0"},
      {"1", "0", "0", "1", "0", "1", "0", "0"},
      {"1", "0", "0", "1", "0", "0", "1", "0"},
      {"0", "1", "1", "0", "0", "0", "0", "1"},
      {"1", "0", "0", "0", "0", "1", "1", "0"},
      {"0", "1", "0", "0", "1", "0", "0", "1"},
      {"0", "0", "1", "0", "1", "0", "0", "1"},
      {"0", "0", "0", "1", "0", "1", "1", "0"}
     }], "\[NoBreak]", ")"}], "+", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"3", "0", "0", "2", "0", "2", "2", "0"},
       {"0", "3", "2", "0", "2", "0", "0", "2"},
       {"0", "2", "3", "0", "2", "0", "0", "2"},
       {"2", "0", "0", "3", "0", "2", "2", "0"},
       {"0", "2", "2", "0", "3", "0", "0", "2"},
       {"2", "0", "0", "2", "0", "3", "2", "0"},
       {"2", "0", "0", "2", "0", "2", "3", "0"},
       {"0", "2", "2", "0", "2", "0", "0", "3"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "]"}]], "Input",
 CellChangeTimes->{
  3.860126886384902*^9, {3.8601269164740887`*^9, 3.86012691717562*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"c513cba9-772c-445c-9cb9-7dbd54427906"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"3", "1", "1", "2", "1", "2", "2", "0"},
     {"1", "3", "2", "1", "2", "1", "0", "2"},
     {"1", "2", "3", "1", "2", "0", "1", "2"},
     {"2", "1", "1", "3", "0", "2", "2", "1"},
     {"1", "2", "2", "0", "3", "1", "1", "2"},
     {"2", "1", "0", "2", "1", "3", "2", "1"},
     {"2", "0", "1", "2", "1", "2", "3", "1"},
     {"0", "2", "2", "1", "2", "1", "1", "3"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.860126886966511*^9},
 CellLabel->
  "Out[95]//MatrixForm=",ExpressionUUID->"66ef1aa5-bbe4-4e6d-8d91-\
9a52b588f95d"]
}, Open  ]],

Cell["There are still some 0, now we try P3 = A+A^2+A^3", "Text",
 CellChangeTimes->{{3.8601269042580657`*^9, 
  3.8601269484167385`*^9}},ExpressionUUID->"c380cf15-cac9-4177-a742-\
4ecea42c5cd6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {"0", "1", "1", "0", "1", "0", "0", "0"},
      {"1", "0", "0", "1", "0", "1", "0", "0"},
      {"1", "0", "0", "1", "0", "0", "1", "0"},
      {"0", "1", "1", "0", "0", "0", "0", "1"},
      {"1", "0", "0", "0", "0", "1", "1", "0"},
      {"0", "1", "0", "0", "1", "0", "0", "1"},
      {"0", "0", "1", "0", "1", "0", "0", "1"},
      {"0", "0", "0", "1", "0", "1", "1", "0"}
     }], "\[NoBreak]", ")"}], "+", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"3", "0", "0", "2", "0", "2", "2", "0"},
       {"0", "3", "2", "0", "2", "0", "0", "2"},
       {"0", "2", "3", "0", "2", "0", "0", "2"},
       {"2", "0", "0", "3", "0", "2", "2", "0"},
       {"0", "2", "2", "0", "3", "0", "0", "2"},
       {"2", "0", "0", "2", "0", "3", "2", "0"},
       {"2", "0", "0", "2", "0", "2", "3", "0"},
       {"0", "2", "2", "0", "2", "0", "0", "3"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], "+", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "7", "7", "0", "7", "0", "0", "6"},
       {"7", "0", "0", "7", "0", "7", "6", "0"},
       {"7", "0", "0", "7", "0", "6", "7", "0"},
       {"0", "7", "7", "0", "6", "0", "0", "7"},
       {"7", "0", "0", "6", "0", "7", "7", "0"},
       {"0", "7", "6", "0", "7", "0", "0", "7"},
       {"0", "6", "7", "0", "7", "0", "0", "7"},
       {"6", "0", "0", "7", "0", "7", "7", "0"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "]"}]], "Input",
 CellChangeTimes->{{3.860125877570562*^9, 3.860125877964893*^9}, {
  3.8601259176974773`*^9, 3.8601259180347643`*^9}, {3.8601260121033325`*^9, 
  3.860126034553691*^9}, {3.8601261628297744`*^9, 3.8601261875948668`*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"b190e848-5d41-4ffe-a480-284ada041edd"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"3", "8", "8", "2", "8", "2", "2", "6"},
     {"8", "3", "2", "8", "2", "8", "6", "2"},
     {"8", "2", "3", "8", "2", "6", "8", "2"},
     {"2", "8", "8", "3", "6", "2", "2", "8"},
     {"8", "2", "2", "6", "3", "8", "8", "2"},
     {"2", "8", "6", "2", "8", "3", "2", "8"},
     {"2", "6", "8", "2", "8", "2", "3", "8"},
     {"6", "2", "2", "8", "2", "8", "8", "3"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.8601258786437674`*^9, 3.860125919609062*^9, {3.860126027853463*^9, 
   3.860126035686699*^9}, {3.8601261649682145`*^9, 3.860126169566451*^9}},
 CellLabel->
  "Out[84]//MatrixForm=",ExpressionUUID->"cc9de9ae-9f82-4fc2-bdf7-\
457ecaf24d91"]
}, Open  ]],

Cell["All block is full, and m=3, So the diameter is 3", "Text",
 CellChangeTimes->{{3.8601269560854125`*^9, 
  3.8601269776022797`*^9}},ExpressionUUID->"54eee46b-7dd0-42b8-8231-\
a06fa1e5b25f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["iv) Is it two-colourable?", "Subsubsection",
 CellChangeTimes->{{3.8601244622138367`*^9, 
  3.8601244695088196`*^9}},ExpressionUUID->"f5ab42d1-bbb4-45e8-aac3-\
846c67be68a2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tr", "[", 
  RowBox[{"MatrixPower", "[", 
   RowBox[{"A", ",", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", "n"}], "-", "1"}], ")"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.860124558424776*^9, 3.860124623107096*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"15df11ac-904a-4ad7-ab8c-eb07a4cba41b"],

Cell[BoxData[
 RowBox[{"3", "+", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "3"}], ")"}], 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     RowBox[{"2", " ", "n"}]}]]}], "-", 
  RowBox[{
   FractionBox["3", "4"], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], 
    RowBox[{"2", " ", "n"}]]}], "+", 
  RowBox[{
   FractionBox["9", "4"], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], 
    RowBox[{"1", "+", 
     RowBox[{"2", " ", "n"}]}]]}], "+", 
  SuperscriptBox["3", 
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    RowBox[{"2", " ", "n"}]}]], "-", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], 
    RowBox[{"2", " ", "n"}]], " ", 
   SuperscriptBox["3", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     RowBox[{"2", " ", "n"}]}]]}]}]], "Output",
 CellChangeTimes->{{3.8601245935324726`*^9, 3.86012462375723*^9}},
 CellLabel->"Out[32]=",ExpressionUUID->"91bbecbf-0164-45ed-940b-3e226b35db33"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"3", "+", 
   RowBox[{
    FractionBox["1", "2"], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "3"}], ")"}], 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"2", " ", "n"}]}]]}], "-", 
   RowBox[{
    FractionBox["3", "4"], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], 
     RowBox[{"2", " ", "n"}]]}], "+", 
   RowBox[{
    FractionBox["9", "4"], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "n"}]}]]}], "+", 
   SuperscriptBox["3", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     RowBox[{"2", " ", "n"}]}]], "-", 
   RowBox[{
    FractionBox["1", "2"], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], 
     RowBox[{"2", " ", "n"}]], " ", 
    SuperscriptBox["3", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"2", " ", "n"}]}]]}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[54]:=",ExpressionUUID->"3bd32018-8217-4f29-91e3-c493608cf07a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox["1", "3"]}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], 
     RowBox[{"2", " ", "n"}]]}], ")"}], " ", 
  RowBox[{"(", 
   RowBox[{"9", "+", 
    SuperscriptBox["9", "n"]}], ")"}]}]], "Output",
 CellChangeTimes->{3.8601250196159706`*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"ca2daaab-95d4-405f-abe3-a8bc9bc400be"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "1"}], "\[Infinity]"], 
  RowBox[{
   RowBox[{"-", 
    FractionBox["1", "3"]}], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], 
      RowBox[{"2", " ", "n"}]]}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{"9", "+", 
     SuperscriptBox["9", "n"]}], ")"}]}]}]], "Input",
 NumberMarks->False,
 CellLabel->"In[55]:=",ExpressionUUID->"384d70f6-a1a1-4bd3-a11b-528ac180b03b"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.860125033949985*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"d04c78e1-3b73-4698-9f27-d829a8b7d5cf"]
}, Open  ]],

Cell["No, it is can not be two colorable", "Text",
 CellChangeTimes->{{3.8601244787736683`*^9, 3.8601244921622086`*^9}, {
  3.860125361941243*^9, 
  3.860125364079198*^9}},ExpressionUUID->"c92619dc-07bc-494f-9fe6-\
5000a36c9086"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["E. ", "Subsection",
 CellChangeTimes->{{3.8601270801136265`*^9, 
  3.860127083689274*^9}},ExpressionUUID->"d2e20236-82fc-474e-9f19-\
cbe6297a48b1"],

Cell[CellGroupData[{

Cell["i) What does this mean for the graph?", "Subsubsection",
 CellChangeTimes->{{3.860127394292593*^9, 
  3.860127401625086*^9}},ExpressionUUID->"dc01a366-5c4e-4e1a-a09d-\
309dba790424"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AdjacencyGraph", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
      "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
      "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
      "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
      "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
      "0"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.8601363780090036`*^9, 3.860136383123935*^9}},
 CellLabel->
  "In[129]:=",ExpressionUUID->"ee443926-654d-4b0e-8e6c-79c229e8728c"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 6, 7, 8}, {Null, 
       SparseArray[
       Automatic, {8, 8}, 0, {
        1, {{0, 3, 6, 9, 12, 15, 18, 21, 24}, {{2}, {3}, {5}, {1}, {4}, {6}, {
          1}, {4}, {7}, {2}, {3}, {8}, {1}, {6}, {7}, {2}, {5}, {8}, {3}, {
          5}, {8}, {4}, {6}, {7}}}, Pattern}]}]]}, 
    TagBox[
     GraphicsGroupBox[
      GraphicsComplexBox[{{0.6411318907234969, 1.6256350616332038`}, {
       1.5431761475992014`, 1.6258514889129208`}, {1.3641521541128723`, 
       0.8124188351574709}, {2.186420636755495, 0.814439144539747}, {0., 
       0.8116524116085829}, {0.8207122623609914, 0.8136876580070856}, {
       0.6431241846256299, 0.}, {1.5449243126722068`, 
       0.0005338415834358345}}, {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.], 
         ArrowBox[{{1, 2}, {1, 3}, {1, 5}, {2, 4}, {2, 6}, {3, 4}, {3, 7}, {4,
           8}, {5, 6}, {5, 7}, {6, 8}, {7, 8}}, 0.02410631722965237]}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         DiskBox[1, 0.02410631722965237], DiskBox[2, 0.02410631722965237], 
         DiskBox[3, 0.02410631722965237], DiskBox[4, 0.02410631722965237], 
         DiskBox[5, 0.02410631722965237], DiskBox[6, 0.02410631722965237], 
         DiskBox[7, 0.02410631722965237], DiskBox[8, 0.02410631722965237]}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.8601363839750586`*^9},
 CellLabel->
  "Out[129]=",ExpressionUUID->"86394b90-0eec-47cd-9532-dcd860d5e566"]
}, Open  ]],

Cell["That mean every point only have 3 edges connect with it", "Text",
 CellChangeTimes->{{3.860136425526514*^9, 
  3.860136462904701*^9}},ExpressionUUID->"8bf12ba5-81f5-497b-b98a-\
0eb254b15bf0"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.860136419925744*^9, 
  3.860136421933196*^9}},ExpressionUUID->"661e2932-473d-4426-88a5-\
b36b96b2dcbb"],

Cell[CellGroupData[{

Cell["\<\
{{0,1,1,0,1,0,0,0},{1,0,0,1,0,1,0,0},{1,0,0,1,0,0,1,0},{0,1,1,0,0,0,0,1},{1,0,\
0,0,0,1,1,0},{0,1,0,0,1,0,0,1},{0,0,1,0,1,0,0,1},{0,0,0,1,0,1,1,0}}\
\>", "WolframAlphaLong",
 CellChangeTimes->{
  3.8601274692454095`*^9, {3.8601303304548607`*^9, 3.8601303526726336`*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"0b17dfa0-72d4-4e87-9787-c9a2c712b664"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "{{0,1,1,0,1,0,0,0},{1,0,0,1,0,1,0,0},{1,0,0,1,0,0,1,0},{0,1,1,0,0,0,0,1},{\
1,0,0,0,0,1,1,0},{0,1,0,0,1,0,0,1},{0,0,1,0,1,0,0,1},{0,0,0,1,0,1,1,0}}", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, {1, 0, 0, 1, 0, \
0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, {0, 1, 0, 0, 1, \
0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, 0}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TemplateBox[{
               
               GridBox[{{"0", "1", "1", "0", "1", "0", "0", "0"}, {
                 "1", "0", "0", "1", "0", "1", "0", "0"}, {
                 "1", "0", "0", "1", "0", "0", "1", "0"}, {
                 "0", "1", "1", "0", "0", "0", "0", "1"}, {
                 "1", "0", "0", "0", "0", "1", "1", "0"}, {
                 "0", "1", "0", "0", "1", "0", "0", "1"}, {
                 "0", "0", "1", "0", "1", "0", "0", "1"}, {
                 "0", "0", "0", "1", "0", "1", "1", "0"}}, RowSpacings -> 1, 
                ColumnSpacings -> 1, RowAlignments -> Baseline, 
                ColumnAlignments -> Center]}, "Matrix", 
              DisplayFunction -> (
               RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
              InterpretationFunction -> (#& )], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Dimensions", "scanner" -> "List", "id" -> "Dimensions",
      "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Dimensions[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, {1, \
0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, {0, \
1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"8", 
              StyleBox["\" (rows)\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              TemplateBox[{"\" \[Times] \"", "8"}, "RowDefault"], 
              StyleBox["\" (columns)\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Matrix plot", "scanner" -> "List", "id" -> 
     "MatrixPlot", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "MatrixPlot[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, {1, \
0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, {0, \
1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[
             RasterBox[CompressedData["
1:eJxTTMoPSmVmYGDggGIQGwI+2FOLnjNzNhDetmdAAaSrJ9WcgXLncLWXVHNo
HV8D5Z5R/9LHnKFuL6nmDxZ3AgBNNx1n
              "], {{0, 0}, {8, 8}}, {0, 1}], AxesStyle -> Directive[
               AbsoluteThickness[0.2]], BaseStyle -> Automatic, Frame -> True,
              FrameLabel -> {None, None}, FrameStyle -> Directive[
               AbsoluteThickness[0.2]], FrameTicks -> {{{{7.5, 
                  FormBox["1", TraditionalForm]}, {6.5, 
                  FormBox["2", TraditionalForm]}, {5.5, 
                  FormBox["3", TraditionalForm]}, {4.5, 
                  FormBox["4", TraditionalForm]}, {3.5, 
                  FormBox["5", TraditionalForm]}, {2.5, 
                  FormBox["6", TraditionalForm]}, {1.5, 
                  FormBox["7", TraditionalForm]}, {0.5, 
                  FormBox["8", TraditionalForm]}}, {{7.5, 
                  FormBox["1", TraditionalForm]}, {6.5, 
                  FormBox["2", TraditionalForm]}, {5.5, 
                  FormBox["3", TraditionalForm]}, {4.5, 
                  FormBox["4", TraditionalForm]}, {3.5, 
                  FormBox["5", TraditionalForm]}, {2.5, 
                  FormBox["6", TraditionalForm]}, {1.5, 
                  FormBox["7", TraditionalForm]}, {0.5, 
                  FormBox["8", TraditionalForm]}}}, {{{0.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {2.5, 
                  FormBox["3", TraditionalForm]}, {3.5, 
                  FormBox["4", TraditionalForm]}, {4.5, 
                  FormBox["5", TraditionalForm]}, {5.5, 
                  FormBox["6", TraditionalForm]}, {6.5, 
                  FormBox["7", TraditionalForm]}, {7.5, 
                  FormBox["8", TraditionalForm]}}, {{0.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {2.5, 
                  FormBox["3", TraditionalForm]}, {3.5, 
                  FormBox["4", TraditionalForm]}, {4.5, 
                  FormBox["5", TraditionalForm]}, {5.5, 
                  FormBox["6", TraditionalForm]}, {6.5, 
                  FormBox["7", TraditionalForm]}, {7.5, 
                  FormBox["8", TraditionalForm]}}}}, GridLinesStyle -> 
             Automatic, ImageSize -> NCache[
               Rational[350, 3], 116.66666666666667`], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Property", "scanner" -> "List", "id" -> "Property", 
     "position" -> "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Transpose[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, {1, \
0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, {0, \
1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, 0}}] == \
{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, {1, 0, 0, 1, 0, 0, 1, \
0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, {0, 1, 0, 0, 1, 0, 0, \
1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, 0}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\"symmetric\"", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Trace", "scanner" -> "List", "id" -> "Trace", 
     "position" -> "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Tr[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, {1, 0, 0, 1, \
0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, {0, 1, 0, 0, \
1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["0", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Trace__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Determinant", "scanner" -> "List", "id" -> 
     "Determinant", "position" -> "600", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Det[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, {1, 0, 0, \
1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, {0, 1, 0, \
0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["9", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Determinant__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Inverse", "scanner" -> "List", "id" -> "Inverse", 
     "position" -> "700", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Inverse[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, {1, 0, \
0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, {0, 1, \
0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              StyleBox[
               FractionBox["1", "3"], ScriptLevel -> 1], 
              TemplateBox[{
                GridBox[{{"0", "1", "1", "0", "1", "0", "0", 
                   RowBox[{"-", "2"}]}, {"1", "0", "0", "1", "0", "1", 
                   RowBox[{"-", "2"}], "0"}, {"1", "0", "0", "1", "0", 
                   RowBox[{"-", "2"}], "1", "0"}, {"0", "1", "1", "0", 
                   RowBox[{"-", "2"}], "0", "0", "1"}, {"1", "0", "0", 
                   RowBox[{"-", "2"}], "0", "1", "1", "0"}, {"0", "1", 
                   RowBox[{"-", "2"}], "0", "1", "0", "0", "1"}, {"0", 
                   RowBox[{"-", "2"}], "1", "0", "1", "0", "0", "1"}, {
                   RowBox[{"-", "2"}], "0", "0", "1", "0", "1", "1", "0"}}, 
                 RowSpacings -> 1, ColumnSpacings -> 1, RowAlignments -> 
                 Baseline, ColumnAlignments -> Center]}, "Matrix", 
               DisplayFunction -> (
                RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
               InterpretationFunction -> (#& )]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Inverse__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Inverse__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Characteristic polynomial", "scanner" -> "Eigen", "id" -> 
     "CharacteristicPolynomial", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "CharacteristicPolynomial[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, \
1, 0, 0}, {1, 0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, \
1, 1, 0}, {0, 1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, \
1, 1, 0}}, \[Lambda]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               SuperscriptBox["\[Lambda]", "8"], "-", 
               RowBox[{"12", " ", 
                 SuperscriptBox["\[Lambda]", "6"]}], "+", 
               RowBox[{"30", " ", 
                 SuperscriptBox["\[Lambda]", "4"]}], "-", 
               RowBox[{"28", " ", 
                 SuperscriptBox["\[Lambda]", "2"]}], "+", "9"}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "CharacteristicPolynomial__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://mathworld.wolfram.com/CharacteristicPolynomial.html", 
           "text" -> "Characteristic polynomial"}, {}]}]}]}], Typeset`pod9$$ =
    XMLElement[
   "pod", {"title" -> "Eigenvalues", "scanner" -> "Eigen", "id" -> 
     "Eigenvalues", "position" -> "900", "error" -> "false", "numsubpods" -> 
     "8"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvalues[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, {1, \
0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, {0, \
1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "1"], "\[LongEqual]", 
                    RowBox[{"-", "3"}]}], BaselinePosition -> Baseline, 
                   ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvalues[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, {1, \
0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, {0, \
1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "2"], "\[LongEqual]", "3"}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvalues[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, {1, \
0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, {0, \
1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "3"], "\[LongEqual]", 
                    RowBox[{"-", "1"}]}], BaselinePosition -> Baseline, 
                   ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvalues[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, {1, \
0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, {0, \
1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "4"], "\[LongEqual]", 
                    RowBox[{"-", "1"}]}], BaselinePosition -> Baseline, 
                   ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvalues[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, {1, \
0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, {0, \
1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "5"], "\[LongEqual]", 
                    RowBox[{"-", "1"}]}], BaselinePosition -> Baseline, 
                   ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvalues[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, {1, \
0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, {0, \
1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "6"], "\[LongEqual]", "1"}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1\
, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvalues[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, {1, \
0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, {0, \
1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "7"], "\[LongEqual]", "1"}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvalues[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, {1, \
0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, {0, \
1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "8"], "\[LongEqual]", "1"}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1\
, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "8"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Eigenvalues__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Eigenvectors", "scanner" -> "Eigen", "id" -> 
     "Eigenvectors", "position" -> "1000", "error" -> "false", "numsubpods" -> 
     "8"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvectors[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, \
{1, 0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, \
{0, 1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "1"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["1", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvectors[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, \
{1, 0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, \
{0, 1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "2"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvectors[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, \
{1, 0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, \
{0, 1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "3"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox["1", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["1", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvectors[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, \
{1, 0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, \
{0, 1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "4"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox["0", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["0", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvectors[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, \
{1, 0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, \
{0, 1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "5"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox["0", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["0", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvectors[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, \
{1, 0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, \
{0, 1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "6"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["1", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvectors[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, \
{1, 0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, \
{0, 1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "7"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox["0", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["0", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvectors[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, 0}, \
{1, 0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, 0}, \
{0, 1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "8"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox["0", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["0", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "8"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Eigenvectors__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Diagonalization", "scanner" -> "Eigen", "id" -> 
     "Diagonalization", "position" -> "1100", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "JordanDecomposition[{{0, 1, 1, 0, 1, 0, 0, 0}, {1, 0, 0, 1, 0, 1, 0, \
0}, {1, 0, 0, 1, 0, 0, 1, 0}, {0, 1, 1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 1, \
0}, {0, 1, 0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 1, 0, 0, 1}, {0, 0, 0, 1, 0, 1, 1, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                RowBox[{"M", "\[LongEqual]", 
                  TagBox[
                   RowBox[{"S", ".", "J", ".", 
                    
                    TemplateBox[{"S"}, "Inverse", SyntaxForm -> 
                    SuperscriptBox]}], HoldForm]}]}, {
                StyleBox["\"where\"", {
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}, {
                RowBox[{"M", "\[LongEqual]", 
                  TemplateBox[{
                    
                    GridBox[{{"0", "1", "1", "0", "1", "0", "0", "0"}, {
                    "1", "0", "0", "1", "0", "1", "0", "0"}, {
                    "1", "0", "0", "1", "0", "0", "1", "0"}, {
                    "0", "1", "1", "0", "0", "0", "0", "1"}, {
                    "1", "0", "0", "0", "0", "1", "1", "0"}, {
                    "0", "1", "0", "0", "1", "0", "0", "1"}, {
                    "0", "0", "1", "0", "1", "0", "0", "1"}, {
                    "0", "0", "0", "1", "0", "1", "1", "0"}}, RowSpacings -> 
                    1, ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                   DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                   InterpretationFunction -> (#& )]}]}, {
                RowBox[{"S", "\[LongEqual]", 
                  TemplateBox[{
                    GridBox[{{
                    RowBox[{"-", "1"}], "1", "0", "0", 
                    RowBox[{"-", "1"}], "0", "0", "1"}, {
                    "1", "0", "1", "0", "0", 
                    RowBox[{"-", "1"}], "0", "1"}, {
                    "1", "0", "0", "1", "0", "0", 
                    RowBox[{"-", "1"}], "1"}, {
                    RowBox[{"-", "1"}], 
                    RowBox[{"-", "1"}], 
                    RowBox[{"-", "1"}], 
                    RowBox[{"-", "1"}], "1", 
                    RowBox[{"-", "1"}], 
                    RowBox[{"-", "1"}], "1"}, {"1", 
                    RowBox[{"-", "1"}], 
                    RowBox[{"-", "1"}], 
                    RowBox[{"-", "1"}], 
                    RowBox[{"-", "1"}], "1", "1", "1"}, {
                    RowBox[{"-", "1"}], "0", "0", "1", "0", "0", "1", "1"}, {
                    RowBox[{"-", "1"}], "0", "1", "0", "0", "1", "0", "1"}, {
                    "1", "1", "0", "0", "1", "0", "0", "1"}}, RowSpacings -> 
                    1, ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                   DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                   InterpretationFunction -> (#& )]}]}, {
                RowBox[{"J", "\[LongEqual]", 
                  TemplateBox[{
                    GridBox[{{
                    RowBox[{"-", "3"}], "0", "0", "0", "0", "0", "0", "0"}, {
                    "0", 
                    RowBox[{"-", "1"}], "0", "0", "0", "0", "0", "0"}, {
                    "0", "0", 
                    RowBox[{"-", "1"}], "0", "0", "0", "0", "0"}, {
                    "0", "0", "0", 
                    RowBox[{"-", "1"}], "0", "0", "0", "0"}, {
                    "0", "0", "0", "0", "1", "0", "0", "0"}, {
                    "0", "0", "0", "0", "0", "1", "0", "0"}, {
                    "0", "0", "0", "0", "0", "0", "1", "0"}, {
                    "0", "0", "0", "0", "0", "0", "0", "3"}}, RowSpacings -> 
                    1, ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                   DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                   InterpretationFunction -> (#& )]}]}, {
                RowBox[{
                  TemplateBox[{"S"}, "Inverse", SyntaxForm -> SuperscriptBox],
                   "\[LongEqual]", 
                  TemplateBox[{
                    GridBox[{{
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"]}, {
                    FractionBox["3", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["3", "8"]}, {
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["3", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["3", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}]}, {
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["3", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["3", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}]}, {
                    RowBox[{"-", 
                    FractionBox["3", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"], 
                    FractionBox["3", "8"]}, {
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["3", "8"]}], 
                    FractionBox["1", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["3", "8"], 
                    FractionBox["1", "8"]}, {
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"], 
                    RowBox[{"-", 
                    FractionBox["3", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"], 
                    FractionBox["3", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"]}, {
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"]}}, RowSpacings -> 1, ColumnSpacings -> 
                    1, RowAlignments -> Baseline, ColumnAlignments -> 
                    Center]}, "Matrix", 
                   DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                   InterpretationFunction -> (#& )]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{1}}}], "Column"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Decimal forms", "input" -> 
         "Diagonalization__Decimal forms"}, {}]}]}], Typeset`pod12$$ = 
   XMLElement[
   "pod", {
    "title" -> "Condition number", "scanner" -> "List", "id" -> 
     "ConditionNumber", "position" -> "1200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["5", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False, False, False, False, False, False, False, False}, 
    True}, Typeset`aux10$$ = {
   True, False, {False, False, False, False, False, False, False, False}, 
    True}, Typeset`aux11$$ = {True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "12", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "2.951", "parsetiming" -> "1.833", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP492126eec0h497ig5fc00004ege9a4c04chh0e0", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "1", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa493126eec0h497ig5fc00001db6f91242b3c6977794153569472399936", "version" -> 
    "2.6", "inputstring" -> 
    "{{0,1,1,0,1,0,0,0},{1,0,0,1,0,1,0,0},{1,0,0,1,0,0,1,0},{0,1,1,0,0,0,0,1},\
{1,0,0,0,0,1,1,0},{0,1,0,0,1,0,0,1},{0,0,1,0,1,0,0,1},{0,0,0,1,0,1,1,0}}"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 10., 
    "Date" -> {2022, 4, 28, 20, 26, 44.2495697`9.39848392095483}, "Line" -> 
    116, "SessionID" -> 22258074638468022392}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12}, Typeset`failedpods$$ = {}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "{{0,1,1,0,1,0,0,0},{1,0,0,1,0,1,0,0},{1,0,0,1,0,0,1,0},{0,1,1,0,0,0,0,1},{\
1,0,0,0,0,1,1,0},{0,1,0,0,1,0,0,1},{0,0,1,0,1,0,0,1},{0,0,0,1,0,1,1,0}}"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{462.08000000000004`, {812.62, 816.4599999999999}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8601304043065667`*^9},ExpressionUUID->"e6709f84-5481-4e43-8e6c-\
db66f728a704"]
}, Open  ]],

Cell["We can get eigenvalues and eigenvectors in here.", "Text",
 CellChangeTimes->{{3.860139588012477*^9, 3.860139603194282*^9}, {
  3.860139696059145*^9, 
  3.86013972577112*^9}},ExpressionUUID->"8ca5066d-a2c0-4648-a37c-\
b7ce04332e7c"],

Cell["Then we try put K inside of it", "Text",
 CellChangeTimes->{{3.8601408297950573`*^9, 
  3.86014083631807*^9}},ExpressionUUID->"feb0f408-e663-45f1-9fbf-\
e4d7da0b715c"],

Cell[CellGroupData[{

Cell["\<\
{{0,k,k,0,k,0,0,0},{k,0,0,k,0,k,0,0},{k,0,0,k,0,0,k,0},{0,k,k,0,0,0,0,k},{k,0,\
0,0,0,k,k,0},{0,k,0,0,k,0,0,k},{0,0,k,0,k,0,0,k},{0,0,0,k,0,k,k,0}}\
\>", "WolframAlphaLong",
 CellChangeTimes->{{3.8601406785047336`*^9, 3.8601407001926675`*^9}, {
  3.860140792088964*^9, 3.860140796137987*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"79792e2c-e629-4c1e-87f8-2ee88b813c11"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "{{0,k,k,0,k,0,0,0},{k,0,0,k,0,k,0,0},{k,0,0,k,0,0,k,0},{0,k,k,0,0,0,0,k},{\
k,0,0,0,0,k,k,0},{0,k,0,0,k,0,0,k},{0,0,k,0,k,0,0,k},{0,0,0,k,0,k,k,0}}", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, {k, 0, 0, k, 0, \
0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, {0, k, 0, 0, k, \
0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, 0}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TemplateBox[{
               
               GridBox[{{"0", "k", "k", "0", "k", "0", "0", "0"}, {
                 "k", "0", "0", "k", "0", "k", "0", "0"}, {
                 "k", "0", "0", "k", "0", "0", "k", "0"}, {
                 "0", "k", "k", "0", "0", "0", "0", "k"}, {
                 "k", "0", "0", "0", "0", "k", "k", "0"}, {
                 "0", "k", "0", "0", "k", "0", "0", "k"}, {
                 "0", "0", "k", "0", "k", "0", "0", "k"}, {
                 "0", "0", "0", "k", "0", "k", "k", "0"}}, RowSpacings -> 1, 
                ColumnSpacings -> 1, RowAlignments -> Baseline, 
                ColumnAlignments -> Center]}, "Matrix", 
              DisplayFunction -> (
               RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
              InterpretationFunction -> (#& )], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Dimensions", "scanner" -> "List", "id" -> "Dimensions",
      "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Dimensions[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, {k, \
0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, {0, \
k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"8", 
              StyleBox["\" (rows)\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              TemplateBox[{"\" \[Times] \"", "8"}, "RowDefault"], 
              StyleBox["\" (columns)\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Property", "scanner" -> "List", "id" -> "Property", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Transpose[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, {k, \
0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, {0, \
k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, 0}}] == \
{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, {k, 0, 0, k, 0, 0, k, \
0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, {0, k, 0, 0, k, 0, 0, \
k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, 0}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\"symmetric\"", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Trace", "scanner" -> "List", "id" -> "Trace", 
     "position" -> "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Tr[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, {k, 0, 0, k, \
0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, {0, k, 0, 0, \
k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["0", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Trace__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Determinant", "scanner" -> "List", "id" -> 
     "Determinant", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Det[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, {k, 0, 0, \
k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, {0, k, 0, \
0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"9", " ", 
               SuperscriptBox["k", "8"]}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Determinant__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Characteristic polynomial", "scanner" -> "Eigen", "id" -> 
     "CharacteristicPolynomial", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "CharacteristicPolynomial[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, \
k, 0, 0}, {k, 0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, \
k, k, 0}, {0, k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, \
k, k, 0}}, \[Lambda]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"9", " ", 
                 SuperscriptBox["k", "8"]}], "+", 
               SuperscriptBox["\[Lambda]", "8"], "-", 
               RowBox[{"28", " ", 
                 SuperscriptBox["\[Lambda]", "2"], " ", 
                 SuperscriptBox["k", "6"]}], "+", 
               RowBox[{"30", " ", 
                 SuperscriptBox["\[Lambda]", "4"], " ", 
                 SuperscriptBox["k", "4"]}], "-", 
               RowBox[{"12", " ", 
                 SuperscriptBox["\[Lambda]", "6"], " ", 
                 SuperscriptBox["k", "2"]}]}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "CharacteristicPolynomial__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://mathworld.wolfram.com/CharacteristicPolynomial.html", 
           "text" -> "Characteristic polynomial"}, {}]}]}]}], Typeset`pod7$$ =
    XMLElement[
   "pod", {"title" -> "Eigenvalues", "scanner" -> "Eigen", "id" -> 
     "Eigenvalues", "position" -> "700", "error" -> "false", "numsubpods" -> 
     "8"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvalues[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, {k, \
0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, {0, \
k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "1"], "\[LongEqual]", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "3"}], " ", "k"}], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvalues[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, {k, \
0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, {0, \
k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "2"], "\[LongEqual]", 
                    TagBox[
                    RowBox[{"3", " ", "k"}], Identity]}], BaselinePosition -> 
                   Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvalues[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, {k, \
0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, {0, \
k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "3"], "\[LongEqual]", 
                    TagBox[
                    RowBox[{"-", "k"}], Identity]}], BaselinePosition -> 
                   Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvalues[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, {k, \
0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, {0, \
k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "4"], "\[LongEqual]", 
                    TagBox[
                    RowBox[{"-", "k"}], Identity]}], BaselinePosition -> 
                   Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvalues[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, {k, \
0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, {0, \
k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "5"], "\[LongEqual]", 
                    TagBox[
                    RowBox[{"-", "k"}], Identity]}], BaselinePosition -> 
                   Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvalues[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, {k, \
0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, {0, \
k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "6"], "\[LongEqual]", "k"}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvalues[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, {k, \
0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, {0, \
k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "7"], "\[LongEqual]", "k"}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvalues[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, {k, \
0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, {0, \
k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, 0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["\[Lambda]", "8"], "\[LongEqual]", "k"}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "8"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Eigenvalues__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Eigenvectors", "scanner" -> "Eigen", "id" -> 
     "Eigenvectors", "position" -> "800", "error" -> "false", "numsubpods" -> 
     "8"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvectors[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, \
{k, 0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, \
{0, k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "1"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["1", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvectors[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, \
{k, 0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, \
{0, k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "2"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvectors[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, \
{k, 0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, \
{0, k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "3"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox["1", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["1", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvectors[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, \
{k, 0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, \
{0, k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "4"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox["0", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["0", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvectors[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, \
{k, 0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, \
{0, k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "5"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox["0", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["0", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvectors[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, \
{k, 0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, \
{0, k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "6"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["1", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvectors[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, \
{k, 0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, \
{0, k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "7"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox["0", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["0", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Eigenvectors[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, 0}, \
{k, 0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, 0}, \
{0, k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    SubscriptBox["v", "8"], "\[LongEqual]", 
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"\[VeryThinSpace]\"", 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox["0", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["1", HoldForm], 
                    TagBox["0", HoldForm], 
                    TagBox["0", HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], "\"\[VeryThinSpace]\""}, 
                    "RowDefault"], TraditionalForm], Identity]}], 
                   BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "8"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Eigenvectors__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Diagonalization", "scanner" -> "Eigen", "id" -> 
     "Diagonalization", "position" -> "900", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "JordanDecomposition[{{0, k, k, 0, k, 0, 0, 0}, {k, 0, 0, k, 0, k, 0, \
0}, {k, 0, 0, k, 0, 0, k, 0}, {0, k, k, 0, 0, 0, 0, k}, {k, 0, 0, 0, 0, k, k, \
0}, {0, k, 0, 0, k, 0, 0, k}, {0, 0, k, 0, k, 0, 0, k}, {0, 0, 0, k, 0, k, k, \
0}}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                RowBox[{"M", "\[LongEqual]", 
                  TagBox[
                   RowBox[{"S", ".", "J", ".", 
                    
                    TemplateBox[{"S"}, "Inverse", SyntaxForm -> 
                    SuperscriptBox]}], HoldForm]}]}, {
                StyleBox["\"where\"", {
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}, {
                RowBox[{"M", "\[LongEqual]", 
                  TemplateBox[{
                    
                    GridBox[{{"0", "k", "k", "0", "k", "0", "0", "0"}, {
                    "k", "0", "0", "k", "0", "k", "0", "0"}, {
                    "k", "0", "0", "k", "0", "0", "k", "0"}, {
                    "0", "k", "k", "0", "0", "0", "0", "k"}, {
                    "k", "0", "0", "0", "0", "k", "k", "0"}, {
                    "0", "k", "0", "0", "k", "0", "0", "k"}, {
                    "0", "0", "k", "0", "k", "0", "0", "k"}, {
                    "0", "0", "0", "k", "0", "k", "k", "0"}}, RowSpacings -> 
                    1, ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                   DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                   InterpretationFunction -> (#& )]}]}, {
                RowBox[{"S", "\[LongEqual]", 
                  TemplateBox[{
                    GridBox[{{
                    RowBox[{"-", "1"}], "1", "0", "0", 
                    RowBox[{"-", "1"}], "0", "0", "1"}, {
                    "1", "0", "1", "0", "0", 
                    RowBox[{"-", "1"}], "0", "1"}, {
                    "1", "0", "0", "1", "0", "0", 
                    RowBox[{"-", "1"}], "1"}, {
                    RowBox[{"-", "1"}], 
                    RowBox[{"-", "1"}], 
                    RowBox[{"-", "1"}], 
                    RowBox[{"-", "1"}], "1", 
                    RowBox[{"-", "1"}], 
                    RowBox[{"-", "1"}], "1"}, {"1", 
                    RowBox[{"-", "1"}], 
                    RowBox[{"-", "1"}], 
                    RowBox[{"-", "1"}], 
                    RowBox[{"-", "1"}], "1", "1", "1"}, {
                    RowBox[{"-", "1"}], "0", "0", "1", "0", "0", "1", "1"}, {
                    RowBox[{"-", "1"}], "0", "1", "0", "0", "1", "0", "1"}, {
                    "1", "1", "0", "0", "1", "0", "0", "1"}}, RowSpacings -> 
                    1, ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                   DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                   InterpretationFunction -> (#& )]}]}, {
                RowBox[{"J", "\[LongEqual]", 
                  TemplateBox[{
                    GridBox[{{
                    RowBox[{
                    RowBox[{"-", "3"}], " ", "k"}], "0", "0", "0", "0", "0", 
                    "0", "0"}, {"0", 
                    RowBox[{"-", "k"}], "0", "0", "0", "0", "0", "0"}, {
                    "0", "0", 
                    RowBox[{"-", "k"}], "0", "0", "0", "0", "0"}, {
                    "0", "0", "0", 
                    RowBox[{"-", "k"}], "0", "0", "0", "0"}, {
                    "0", "0", "0", "0", "k", "0", "0", "0"}, {
                    "0", "0", "0", "0", "0", "k", "0", "0"}, {
                    "0", "0", "0", "0", "0", "0", "k", "0"}, {
                    "0", "0", "0", "0", "0", "0", "0", 
                    RowBox[{"3", " ", "k"}]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                   DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                   InterpretationFunction -> (#& )]}]}, {
                RowBox[{
                  TemplateBox[{"S"}, "Inverse", SyntaxForm -> SuperscriptBox],
                   "\[LongEqual]", 
                  TemplateBox[{
                    GridBox[{{
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"]}, {
                    FractionBox["3", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["3", "8"]}, {
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["3", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["3", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}]}, {
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["3", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["3", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}]}, {
                    RowBox[{"-", 
                    FractionBox["3", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"], 
                    FractionBox["3", "8"]}, {
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["3", "8"]}], 
                    FractionBox["1", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["3", "8"], 
                    FractionBox["1", "8"]}, {
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"], 
                    RowBox[{"-", 
                    FractionBox["3", "8"]}], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"], 
                    FractionBox["3", "8"], 
                    RowBox[{"-", 
                    FractionBox["1", "8"]}], 
                    FractionBox["1", "8"]}, {
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"], 
                    FractionBox["1", "8"]}}, RowSpacings -> 1, ColumnSpacings -> 
                    1, RowAlignments -> Baseline, ColumnAlignments -> 
                    Center]}, "Matrix", 
                   DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                   InterpretationFunction -> (#& )]}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{1}}}], "Column"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Decimal forms", "input" -> 
         "Diagonalization__Decimal forms"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False, False, False, False, False, False, False, False}, 
    True}, Typeset`aux8$$ = {
   True, False, {False, False, False, False, False, False, False, False}, 
    True}, Typeset`aux9$$ = {True, False, {False}, True}, 
   Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "9", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "3.978", "parsetiming" -> "2.981", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP49251c54e84eg52d5daf00001c0bg4ff8a6954fg", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "7", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa49261c54e84eg52d5daf00003b3a351fi617i3hb6249686130609588165", "version" -> 
    "2.6", "inputstring" -> 
    "{{0,k,k,0,k,0,0,0},{k,0,0,k,0,k,0,0},{k,0,0,k,0,0,k,0},{0,k,k,0,0,0,0,k},\
{k,0,0,0,0,k,k,0},{0,k,0,0,k,0,0,k},{0,0,k,0,k,0,0,k},{0,0,0,k,0,k,k,0}}"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 10., 
    "Date" -> {2022, 4, 28, 23, 20, 2.5982942`8.167263307579223}, "Line" -> 2,
     "SessionID" -> 22258217381644354587}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "{{0,k,k,0,k,0,0,0},{k,0,0,k,0,k,0,0},{k,0,0,k,0,0,k,0},{0,k,k,0,0,0,0,k},{\
k,0,0,0,0,k,k,0},{0,k,0,0,k,0,0,k},{0,0,k,0,k,0,0,k},{0,0,0,k,0,k,k,0}}"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{462.08000000000004`, {650.62, 654.4599999999999}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8601408026502924`*^9},ExpressionUUID->"f2b3e9eb-31b9-463a-b22b-\
45ba90180abe"]
}, Open  ]],

Cell["\<\
The eigenvalue is the {1,-1,3,-3} times of k, and their eigenvector are \
always the same.\
\>", "Text",
 CellChangeTimes->{{3.8601409206495895`*^9, 
  3.860140980994713*^9}},ExpressionUUID->"ed0e0482-ebaf-4e45-95a2-\
4d3610bbdcd1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["F. Geometric Series of matrices", "Subsection",
 CellChangeTimes->{
  3.860128211259879*^9, {3.8601317279513*^9, 3.860131736672903*^9}, 
   3.8601317899062915`*^9},ExpressionUUID->"2af6f0bf-719b-421b-ab48-\
df0f48976178"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQWYFFfWhnumRxh3QRsb94HBA8SAeDbu2bi7u8tukt2Nu0CIECMCSQhx
IbgzyBjuOo6F/53+lv7ZZCEZdqACc8ibeqprqm5VV92+53x1zz23w7lXHXeh
v8vluq4Fi+POuenAa68955bjo/lw4pXXXXLRlRecf9iV119w0QXX9jjXzcbu
AS5XfKDL1bDezvvP4/G0bdu2tfdfmzZt2NK9e/eePXu6vP/8/Py0bOw/l7/3
JAHepT//c32hXlgJCAkJaRES4PLjv38T4BceEtA5xD+L6zrskHMf+9uQrHSu
ISQqMs7Pz60iveife/vGxl/Y9i/FP74mX5av38b7z3cT+MdGT7s2hmEYhmEY
hmEYRjNnZ9q5W7duTa+d/YK8qrkFK6Gh4d6iXQGBrsAAV3BQQHBgkJ8rzM/V
Ji686LQTbv7s46nD3/3+ofufTohr5+cK3KPamS9r2tkwDMMwDMMwDMPYGXtD
O7t92jmwQT43EBgWFkaZ/mhnt5+309k/tEWEnyvc7WrXveDkER9MHf7O2O++
mnn1FXe6XCENPdKmnQ3DMAzDMAzDMAyHQB7uOe3ccJxPPqOT/dz/xr+hwKCg
gJDgFm6/BgHd0LPsCglwxRXlH/v5x8VvvPbtJ8PH33nbv2Ki2gYFRgS4W5h2
NgzDMAzDMAzDMJxiD2tnb9fzf+LnpSFaOwDV7I+ATk5o53ZFuF2ROen9nn9q
xI9fz/929NwH732xXetclysc7ez2DzbtbBiGYRiGYRiGYTjFHo3Z9mpdby+z
///Hb0s7+7td7oZo7YBA/7DI0JZ+rujc1AOeffzdcd8vGPzSF28P/SopPsPl
ioyNbutyBVu/s2EYhmEYhmEYhuEge1g7a4xzoLSzL2QbAsDfHewf4naFuV3R
mR173XvLU1PHL/3wnTHvvf1d25b5IUEt/V2RIcGxkRFxwUFh/0077/4/086G
YRiGYRiGYRjGH2fPa2dvcjC0s/s/tLM3P1hAiDsqwBWVHJ1+x/X/HPPVvOFv
/vDem9/27HZEcECSyxUZ2iLBmygssGGwtGlnwzAMwzAMwzAMwyH26PzOCF5/
P8RvcFAQCtoVGx/kF9AQsB0REdgiIDDEHRHoio4IbPvIPS8NH/r9tyNnvD/0
m97djkyI7eRyhbtcYf6uMI5FOwcEBO12ePYf0c42v7NhGIZhGIZhGIaxC/Z0
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
pYVzsjNlBymQ7QMOPZj9acf0ApCzc+Dtt92SEB+rpGQ0ZRZC0zicFrN7Gd9k
UsjerIzMv5519rvD3lm0YCFKec2q1atXrlqyqCFz/LIlS735VpcsnL9g/dp1
69asZYUtVRsqy0pKPx0xsnfPXqjvVsktW7dshQbv3LETxdp4Z8MwjL0GjooS
XGP3NdxYY59zc7LQPqhaBdGxUfvgSOh9Pp5JdlbGyy+9gFuCV6OIOOUgfWPo
EA7hr8lJCaedevKTT/yreNYMRBNeh/KjKisL7keP7kUo9C6F+VGR4VmZ6Swd
vyFGk4AT262oi/p6eOhbt2xauKBCwdtbNm88/rhjqXWK5/e9ijEMo5mDUlY4
ipJgyDx17VKgPl+MiPqLMSXI5431tUqgjTW5847bNKezIqiV6YvmZcb0qShu
dq6u2oDd2bypftbM6ZRDQ8QWDqfYObNn9evbB2ulfNqKsPIlrsQI0ppdcfml
6rbmKJo1lDgnPe/cv8pE6jWg43fP+J9oIo2MpEXbJiUkKpm2b17mhLj4nKzs
1M4pF5x3/qQJE9euXoMurq6s2lhXry7mVStWoqMR0ZXrN2xYtx4RzXa28LG+
to792YKaRko/+fgTmuiKE6HEOQtS2uMdE92uTVvl3+YyWGG3nV6q4zfcMAyj
eYB/QqOMzsWlyc/LWbli2do1q9TdjFdTMm8O6zdcf21Bfu4Rhw/69puv9Ce9
qMfZwO1Rziicmbra6pzsTES6At4Uvuv4FzQahSZnweHU/GU4q1QMjTr85usv
9dBxdKkbVAMcTpafjvwEzzYiPFQTQCuhHFuU4UdpgtLTUtSF5PgXNAxjr6Fm
xOMd7IMsxShERYYPe/tN39TwitlWvmu1J5qa+cD+fWkx0No6nCXa+YA+vbA1
UFNdqVBtaV6s0rZftmCtWMc2DRxwSIo38bHH2/EtG6fWjPZNxd56y02Us2lj
HVfCIVwJurt/vwNoxLhCjkVu+45V8LZizvUO2fEba/w+TaSdEbDoVvQs67nZ
OQjYuJhYFHR2ZhbaefSoL7b9sg2ljBBevHDR8qXLykpK+YgoRjuzBY2McF5Q
MX/RgoVrVq1mh4qycvVHU+mQ2+w5d/Yc1Hf3om5BAYHt23mUrBtrrHxibEGh
p3Tq7IvoNu1sGIbhODgVuAofDn8fVwQ/BEdi2dLFrONU4MxcdOH506dN2bZt
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
dy+GsTeJigzHGMly0bRK3tKE0pYOGngoqDn15VLYjVOor4EWTMm7FOPBL1Ta
WUNvNJxtZ+3VbrQnai0Vg6Qec98WvZxXXJAv0s/xB2E4juRtZnoGmhSZPHP6
DHQrilXdvhVl5ddfe50yiaV06qyu5+zMLHaOiohkOyKajU0Ys42Wv/jCi9av
XccFKNv2mlWrV69cNeytt/krZ0yMT+Ckpp2NfQW9SlV08cMPPYCumTF9KgJW
fcEanoxXpuRg6otU+JNewCqHz46zwHi2TwqjYUeKjEJxa2YrCtekMEo0hAeL
v8d2tqDI8AbZ7f777qFYnyH4E75KfX3Ia8oXjZDkLlVuWDf8g/eUj0iueHZW
BlpS30Kp2PYJuOGoHl9KUp7dzTfdsGljnXx1TeetcV48pgP79/V4hUnPHt30
9DmcYzUelpugEWcKHjjm6CN5vhxeMm+OJnrmph1+2ED5OY5/8b0M9YS64fZ3
cd9QytwKhUBrSvTZxTP5WDxrBo6f8q05dZ2af02DDpSN/6EH71cOBJ4gV9gw
P/IvW2grUMrq7mF/3NfMjDR+6ZrTmd84X5DljTdcJwnsyyuIEufpo6mpTt9/
9w3fmrqBNqfCaBSANKMuZjf6nbnPVEsaH70hVGPC+sEH9T/j9FMVEaHATnYO
Dgr4s2lndWApSoErp+HlDg9+7RUNEuGWqsdZLx65h9VVG3gouTlZusl6HJY7
yGgm8BvRRA9hoS0wTyM++QjjtXlTPQ2L3tjDkMGvFhbkRYSH0sg0tnw5PL6o
GM2YrFwxSn6oXm+aGt8slk2Cfss6C5etNJJ68Uj7IBuqN2Z6T+j4gzAcR3NU
KQqa5euDh6BY0a3KdI1unTBufLeuRTFR0QV5+chVlHJOVnZsdExuds5jjzx6
3z33antTaWf+dMpJJ2uaae+8pquXLVnKxXw6YqQ6u7lapdo27Wz8+VFKW80o
dO01VyGL5O5iYjQwWVnCvv5qNJoIkxEfF4OfqeBG9a7KcMg9UxCm5LN8Y9p2
tBhtO4Zs7M8/UT62bOGCCk1ZpY5IXPF5c2drQDTuH36gZiSkZGyTL8Hsnwru
DAIHCckKXwHJf8XllypIW/ZUI8E9Xmv+J5xja2dwzdhlJRryeCdImjljmlKs
UzE0FF0TcN904/XZWRl6A+/rHdMrd31fZBGl5eVmcwcCA/xvu/VmHq7exvhm
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
dfhrQyeM/2LmjK84btignhhTy3PW9i6JFWnw1Lxgk4Lq1arUr1cHjnrvPb1h
7zoEQ4/7Hnd2V39AF+UnaAtcIQfqQx4pdFHL5oiG1F07rLlhfDJD1/eZpxlk
0K4rx7jrfMcfm9nrcxFkkwgawcc3CD5rZC1butgqH9738ccecbUL1Q3XFEmZ
65QWOwconVXjoBppxHLoUeUItGzRrFfPHs8/N3DEG8Pff2/kRx++P+qjDz77
9GMQ8Qfvv8vxvLmzDbVV8+eNPv1kLHK8Tu1a7D50fqvdWqvcbRhK/OnvtrdI
JApAgoBm+zv4xp+YiZzd60HLEsxk+bIlvJSVzczjZpq6dO5UvFgRs944KFa0
8KlpWsdG0mBnYbWR28zgPXf3MkjbaFKTyEDQa9es2rljW62a1Q0ydCJCM/GY
747fTzr45OqotUYE2cM6Es244Xtg6a6d243k379/74rlSxlzh5F1wiDbtytM
UEjncS9wNb4EOnEmk5K1MdvchekAc5lRaMTFnt27wM7ombd37WxchBw1A/li
3jTTyiuzl594/FFTCFkGXBa9lCu7g9asXskbWarCDEfjVWy3FPMJzSXEyMgY
Q1E+2CyTolVKmx6gqW2b1o8+8pAeNJj8rJnTO1x/bSQKtYzFivmLxClLyHov
IXipRvWqWqUU6Abww70NAxP5/mqtMEP6JbZb5eSkF54fBFNih+5O3Tlm9EcI
RM0v2rez+72s+6GpVvPgNVdfCbc0HowFDy+Ch8A5n+nzlIU1lODoezBD5TgS
LT3s7BZA2HEp639aiINj5Li1ONhN69aunjN7ZjxOI05HIaFuN21ywY/f/xBt
oPpTVIn7B1B31YqV+/ftB+1aHHvp4iX2Yq5YvgI/Klm8RPmy5fhvkUKFzzjt
QBYy2grIGnzNCWefeRZ/OvP0Mzhz/tx5XPMfP/wIcReDt9tf3o77WltbiI1y
YSfo9J6Tvc8OrVa18vgvx61etQLxN2nieMQiyolOHAOuYAu2I1Hlhm9YScYq
Rna6QQl56snHDc0y5g09x2QWqzJyTaMBtUMaIMeVObNqlWTNmN6RgwBhYpuH
qHpm7ZpzG9afOOFLVAJrpOjPkqmq7aOMgXRkj0IPg3mOzjrbatrmAjCMKOTM
PrjP4kXII8OMrV8E7kP6lDrY0CRki2f2pkbRs/yQuazqG2+43txh84lsFmwx
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
w4+g4Beff+HsM89CpwNEn1jyBFAXGAIcDWrmUgeCrv/3VIBzi2bNN/280Xjv
pYuXcFmwMzRm1GgznTOLnXUOvvD8IBGx9QrMgEupVcMtD/N86cXn4RuG09jP
XaUd6QnBT/TyoOfAPMeM/giOUbFCOXUbzW4cIGV0Ep3f+Dz0f5vpcCmYksX5
Yb8wDXgOipyWOplPDHVd2J1x1zwDGibPyQjw7kuXLOKYEUBV4MX7P9tXqWQM
oYqckeqRDGva5FUyS11fgwF+553bgCVk5R9bM1i7adLE8VqkleMaHCIHQw4y
e1/9BXfe0Q0ZxMVZVKxPkZQNbU1/RrUOEYlHCqk58Kn/lEUoGOTTZlshVVwf
9C+Bcy7EzkzxlMkT2fisDV8HBsIBPESVVWeHUaO6xgJwTushhbegrZllaa1X
gw10zesqYsNy5RbNL8yF45AD4/yr2JkBgYO99+47FcqXDdg5gx4r2f2cAGS2
p7mTNjS3zvZrw4awZ0OGu7jG2jtgPSNdbctu+2nOvKvHHfv37wXEhZbo5jhr
MdBWM3/eHLfV0YadrYpgLX0Gk2GHTPY0R5gvYcvW0GOor7yiHeJvyeKFDp1W
CMYWLoRWYEaMOBr4AxxgzF8fPqxa1cpMynHH/g/KgAWjsur5ZXR2irSqW9Uq
yXbo2xxt2xmSdFhFuvZY5yuWL7VA3FNPPm5cbnrXF0uih0Si/c5CDxF+69tx
F26H4sSIZSHGUfyFeABmBMyYhX5n+KR95UIBTKGxYXLufUPFQln+UDMzRP5w
ZqGC+VknjD8XfOvNNwTCgF82LFts7JhRpaIt7Zj3O7rf/uUXn8NzWB621WDN
sMHhPyh+OqzVAC3QDbHMuMhNN3bgCpY10JKTA/nORqRDV13ZnqdS1FpXUIB/
d++ehmdobEzvOiq6DpEGXh6+fbu27A7Lqdklk7dmZPzkT4whgzBxwpf2W3T5
xSlORxWlh53btb38ohYtV61YyZ92bt+xfes2+1VBfZ56OikhsViRonqZrQ9W
5pzScKyypcuArGvXSpk2ZeqKZcv37t7D1b7/9jsu+8N3369fu67tZW3+9pe/
hjTn3x6zbR2nVhe35ClhaAgaORs88Jabb7TKwX333m0HXva1vjzr6sPl3n5r
BOKDY0CK0ctIz8WLFpQsUQy2acUwMZFiTiv3O2+/CV+Cl1pahMtywDfcpV/f
PmJndeNQ8z9W88jrFy1SyJ4+qJc97uw+4o3h7458mxd/9JGHYO8XNm2CBlK4
UAEeO7lSIg+MkqDCb6R6bJ8/VlTqYFHN0JkRVVb8ovtevxJ07z29Q16VQtzq
JSKmzN4XCQU4WrhgHtfft3e3Ml3TMffVtPvZpx+LDrJQJ8kBEteAIGzcIzGA
1j0LulAkarhI+8ND2oLkKkLjtcQQn9bsBTu7KtQ62HfW0HZJyBN8F12Qpj3C
bT75eIy2LLU4Pc4au1R7WAawGu54ZNlMsoTSi9m2mTjaWogwTBvHm/Moks2L
ENHK4WwaNnBRy+aWt2LPwoetnuEasLA8x/xJhTbf8ceC9Xiv5cuWsJasxRFq
hYWe6bACOLkJvEcbdraQWkirCY117DvWoH7dGzpc9+QTj4GXp02dLGQ2l1l/
PbuJaWKEbaIHiLYymNByyOBXGjaoF8zONapXtbtQFtb8DPWmItFwfQjhC0ZT
pljjAh2GT7a8ppj9+/daAprHA/CGygm/ShaRtgVD6KBUrWplLg7c42q8L599
n3maZZk/33FZ9V4608101jqUtePG6zApeoTD9dk1fGkvhrTf69xXOkt+46az
sjT8WUOlDcuM8EHBGzSw/+xZM7RdGJlgMAkHnGM2upk1bFLj/Hen7mRRTZ0y
6aEH72/erCk7Gl0Reacbwmi07N4XllDgXkZWyCGVs6z2BfPnJiZU4N1D/dv0
rmPfLnusVEpKMIEdCQVkthCHqfe8Pssp+BF0P13S6qKQIpHd7xunOOU2Sg87
d7+9G38aNGAggHfblq3//ulfAMeVy1csW7J06+YtfH/OWWdzAp+lTo2AoEHE
J594EgcXXtB09cpVepm52jcbvt7080ad1wP7D4jGFp1mTnSmaoXBAGGV7O4Q
jy1DY18/2+8ZmOp1114tAxE4g0eAxpwGx7vxhuvBlejtSCgLBmqm48zKyUkh
WSYSZcKWQkXkAcm5PnKNO3I1fdm2pEFtnjtnljHbweCZA41yMiANjJYNiUTL
kxrEbj1M/oQULhXtJYrsVpdT1ph5GlLGYr4gc5gMCFT9EKiOHvWhsU8rVyxj
tVjklk80K8OZzCnT+q1P5DBkJSqHbjWzrtCXWFSaegwG5vO2Treqdx1BGMrE
NB44pVYNkUWoHc0bmdoZSgSkxc4BNR9eDHx2U5fOnXQShTrbtrFuesH5LgbW
hpWTQ9ahSlSI1USHgX0NHPCs8XUGDYaceh305giw/ObNnX3U9h761VphBhHB
ukONvkiUXR9Spz3HHpJ5dLJEauiZTCJwzNJwVuewqGCwn5gmY4KhQaRNzm/E
MkAq8YIGSrEGzKP0lUMNhB53drdB1dGGndk4aPVsJc3U0IVNmzz80APjvxw3
c8ZXsNDQP8L0EE0ZzIvqvQjaPYvCoAORg+lfTa1VszpagQ2djTsCawi4stDv
HC7uNPHfwoUKwPw/+vD9KZMn8vzCW1SRpUsW8UYj33nrxReee/CB+26+6QYe
g0UCI82g9pRcQouTRks+H3/sEaPTWUjcggEZ8cZw7puF9RN4NofLaD0+kxIr
ZmGNLKPc0WGYfWaqQf26qGp1ateqWiXZMpsarkNxbM1okSj3CEXXNTugOjLL
zS68gKEIe419p5+FdWJ0orUFHDT0vdRdO/TOmOsHmrbmCXP0TJ+nWIQqDCeU
LA5qZkJZS5DPjK6V3fvCHMM7ut/O2l61cnnIZNTgducd3ZQ+VhfPIG6BSWRw
VGY06LW+tJVFZS2jxygZCbNr53YOYHQM4+7UnZ9+MtYoR/Rqm2zGKU5HFaWH
nW/r2AksnJSQOG/OXJsy88k5YGFQ8M7tO/i89eZb4FhVkiuDOc4648wa1aoP
GzJ0439+5iLbt27jBK4D9LbaGP9NqVkL9gZwPqFEycz2qDLcCP5svpIIWlX2
1VdeanPZpSqilnXir2Be8MhX06bAbGFuJg3Nmjkd5qkh2oJjD9x/r+hJiWnU
LoIAlgsvgmHCWq0xopiTgSCCuYt1uYOcDd60mJBamfkvhQrmN9gpFM0ISZdI
N3h7CJq1LHnoyZUDsUa5jUyJssSc08fCYA8w74bRCpEmT5qAgFBMh0pQxjjZ
kyiz9506ZdKK5UsNn1BGW21VfY9vWHtoC6KDI0g3Vl6z2M5tWD9YwjUIMLCl
ohXSVHsElWEW0gLnXIid335rhMpJYD4o4cyRLbesShQsb86XDsdIdG/ap6Zt
m9aWCVIhsba2cSzCZ1AYGgsDNWH8F4ySMTBHFYV+Q3CqtD2qbCfKWjIkVf9j
DLGzeX/OGnNqZtBLLz4fWhwaDKl7zmcz99CAcxTa5EqJ+rm0zrGo9I1ag07R
Bluw6kLzZk3l7UcbdjYiiEmHRcNSgJbuHZGyWj3bEDLQ3WGUoxpm5qhajJH/
Gl0PAmIJ2WJD/12oTqAnN6uePygVHOudFOi5KrS7hl6HtjvUDxiJ2g2sopwB
9jFe2qWFNLcHvaEaerSBOQsXzLvyinaK+Kx6L5her5491q5ZBadiXuR7WThu
6HtCuUbnNRz/5Tjj7a37OnHCl6h8ANhHH3kIkNjh+muvaH/5zTfd0PHWm7vd
3uW+e+9+tt8zb7z+2sdjR0+aON6Sa/Btfghr1S4tWGZw9P7rc9G6Ip9hx+mC
YQ8aSM8Ce3PE63XrpFhJm9FGjzLWKH++43h91g//TUyokDP5zsw7q3fZ0sV6
hHnU5cuWqE58Me4zE885AcHEE6repLe/ZFksHpgSC++dt99k76DoMiwWP+Sa
RklZag+9mpsyLxXKlzXAJhfGicUpTtlNp//9tGZNL4zK6n/+8N336LngaPDv
LTfdDC4uUax4+8vbLV28BPjIn4DA33/7HSIrKrUOtJ3iJ6tXrgJfL164iIvs
2rGT33Ip21pxAr/dk7p7zarVF7e8CMhctnSZv/75L8WLFstszLaOXfg/PE1R
qEKO5gkvlfvxDnaHV4bOnzcHVnbcsf9TKSmhYIF8AMO5c2bpM4IVsP3hkzDh
SNQ4rG8I7oH0KVyoADIajmRiC+dzpp2RbZwnj4U1BVEbIjNjOJWqAaH2VyRq
lFYKh24OWiONGwzZQwYaGbUe8wWZw6T9XL8Ar9+7112sHEManHfdSXf37qky
nNnrnxpt5MrwWoVGH+Xjjz3C0kWsWx/M3Ea1aGMbWJ/81epSR1YSuk1kGMzG
jc5lGNluOtNR5FDh/n6wN7p2m1xoq7HyiaCV6eYhbaNpT5ltWzebm2yZ1ndH
vi1ADvkOWqXcRyhXbEm0ZYP6UDbsO6ZWbzkCji2Gb8y2TInvXx8+zIiR9J5T
m786eQhk9UnsgxP6dRpTEfOB/Y1kyTUtMJ98PCbsCC2lDBfQgA0FP8+ZUB/G
2bHVMCLPbNH8QnZoKIZvDyno2muucgoiUYOJJxudYidcO+ZwzSqVK3326cfr
1q7et3f3iuVLWVeopky9yyBwHuEhq8K44qNQR3Uwbb97e9fOIVBHUiJrdTQk
TDXgkO9FTE6TcR2zZk7X/hnzF/ydxFoy3owDGBcHI94Y7jiwrgxm4L8m1x9G
PWTtP5FovLTVvGFlHAOZ9dKaXnRBk8bGuWXVeyEmjFdHagDWjMGwe5cbRMuV
z2DQsn9ySzr1Rj3ZVwU2q0w3Kca6/aFKm2qhINGIRCvew/ZB6JWTkwwFD2EJ
OdYLz7IJDCyDz8iHVCC+eeH5QQeqau/fqzXJtQ1d1LI552iBsVlzxrewypwN
1JhZXtlsFPuh2wadoUbTNtadz/ffGykkZ474VS60dccpTtlNAOSWzVscFDg/
CpDReXvccedxfzq2SnLlv/3lr4DrtG2a//XPnzjfhlMAZD75SerOXd9+/Q2n
8Se+hJ999823XGfr5i18f/2113GjxIoJKBSnnHQyx1mFncE1pmAYIIo2AjOx
KXy1qpX5ialM5uZYfJL31JYIw3zv3Xds/BeaJMJJrrn6Srv68slpe/ekeiyk
sn4UVzDeW5N15GDHz1jNY+i3Bc/UzwWnhXR4GcKd7/hjg9fGGG9rcpoRo9U9
5gsyh4l312zCu1esUI71oPw1vMHAA75p2aKZRT4ze3376Rx/3J8qlC8biSaj
3XLzjSZvippZjYgqNWddbJbmGDtmlH0nnZqYD9RvpIAckeDGUoqdecGpUybp
QlLlCNlquYp0C4rg9A2Z8iDPgQP4OnKGrl1uc3aC8qALyTw7dhaqBRfky+rV
qsyc8RUXMfVj5Yplqbt2oNyuXrWCYdHroRNNpeXVV16ys1V6zymnCvkCOp6C
D8tyxJ6TccxebiPra7mKnnrycZYNu8O+QlYhsB6y7WByxvYidjaShzllPPs/
21e9nYlDsVRRX7J4IRLhkNJGHlu9n8/8+Y5LTKjAn57t9wxXCPGiKPZcx4oH
1gfQ42PIOlc2POYI4gNZRZYhYj0w4x+PHc1QI+KRyAyOEl+PM5CHDaVJXGyF
yP7yi8+fePxRWDcIwjRnfZccO6R5YDxLFC+alFixWNHCmpuQ9Ub7W69jd+pO
62YULlSAMeQzs9fnskguje0MI4yl9aWt7Pxr9B362L69uzvf1pGZysL65Ka9
3H/fPeyIObNn2nrJGmuCYs1KcFQrhBxiTgkn6OmAh2hCsdYrx/JbrbtodCp4
u3Zut6jF55990qtnj5o1qsmE1ZQCcM7JeA9zf3gG6zyoTtgQZNXK5VbD5h15
BTfF22+NMJrCZ/uviT9wFThb6DDS487uwUPkVnLLWESI0bPsNppSwQL5WGw6
XI4s836c4pQlhIZ1aatL5DTAZ+OrgcOdbu1YsXyFksVLnHXGmagDzS9spjcZ
LAzBvUDEdrAyxnv1ylV8CSvasG79+rXrNv28cduWrVxq4fwFPXvc9ZdT/syN
wM5ssjNPPyO9HlWHgZ0tTGp0jQnO/HfN6pXXXnMVUFGTqYErsIj33xup/8IC
Ghyoz3txY54TKpafO2cWXJSLGDGoQ1CPAGLCYob8VmweCpjEtr+znVDAdyjt
6ngaHnkdGCP6Hq8GxzNo1tBBeCxCoU7tWnwC7szOi/mCzGGy3riRA4wDOhUL
SQM1uoEVsJcuWYQM0mGa2esLahh8ZB+3QBzbmSisQ3QDMwJcZuIylnfvXncZ
NhB63BwRpPeTz6uubK+RKoDNDz94TwHtmWljtnMPpa3aKihm77Rt05otb1aI
0bmyoKpVkkulaVIW4j2YcXiOZW0iUf1/3Oefom2q1O3fv5dlBj9Bs+3SudPY
MaM0Mmix0VECOrP/bwbrSnVO77OVcwx9sXFAoYL5WdjscfMrYz6wv5EM+Nd9
3+7yNuxBNWRBJXvHFs+8l+dk9/MEJRku6i5GaUTQaFuz8Kwxk68PHxYq9oeS
vyFxBm4MA6lSuRIMB7Xcni92KbIPDkxg2tTJ7458GxytC0kzGsrqF+M+M5zj
COIDWUVmLmjWfuP117RkWiTZbBdVfaEQsJqBZRgfefjBJuc3sv6AtgvUhtBV
mZ+wkPJGrDtbngUpAmKsOlx/rV5U3pGVY9d4lihSHk3gMK7vmtcSmJhQ4cUX
nnOcjYFnDdtdcUD/fieULJ6F/JypgYPdcvONMEOurzXASjWh1oQmaPaLmXR+
7+sHfA0QtvmXNhZ+oqVavZHlJPrmnOlfTeUt2lx2KbzFaBPYpqhZIR6Ac07O
L0yDW1tmMDRDgYcMfvVleKNBFBYb1P/e+tJWWn1tkqgVN4Nntssq58NeOH/y
pAlcVv87W8aQdQfK8eSvDz/0gB3i9InHtr9MnOIUK2LVX9GufXA6h3xnAG/Z
0mVgHsWLFquSXLnMOaUrlCv/9foNy5cu48yd23dAnM9+BYbyK2H1jm3boS2b
NovB0Xpu7HAD0PuM007nCiDos888CxD955NPySrsbO9mU5IBtrJQ9HYYL4qK
aSnGvsJMXn7pBfmnuVFcB1hkIJN4Ex7StcttRlEaCcM5e/ek2jPCxDR/C4GD
VN5OzQXNkWWAIc7TSr8o8PnzHSfoM+Io0LP9njGrZc/uXVMmT4xEpfDRGbOt
TwcRiW6wauVye0WxH/bv22MoVL++fRQuh6e7Cl6YmkpJCa4cTeWhOInC3aIx
4jL+en7j83QXOpUxH6jfSMGzfNONHXTMuVX5HDZ0cKhBbXuRXLjefLBQylU0
+tKLz4tlDIYMKWC+S1rsrA3NIvYW1oarDB3yqv1AnWj0EA1xX02bwtqYNHG8
eFyGY9bzo488FHwH6VHIorVttOH9egR8jJIlimkXyiDfLbdReGsYWvVqVbSI
htpZRhnBomHvnJADOptrVQjsemDSrYtu/rsaJp/XXXt16F0euteF9YAGCweA
z6Dc6hGz0q9WWQNOLml10Ucfvs8KMRZF2xp3Gf7aUNdkbMtRxoRMADGZ98Km
TRYumJe6a4fjxihZ/ivUiOAYhGiyp6LQDGJ+a+8hvZAi7iPLJpkehRoRmr4Z
Im2Vlkez1yHDcvFFLYylyez1tbQDIRvUr2vVd/NKICsw661A1ypfrkwW5qzp
0eC+vAXAUPMIillwKAuHDa6GTKPTwiYjZePYClBPh4JV1K9gQqnjh88/NxBR
a+yxAXs6al1FRYsUgo1roix1sCVHTjaD4AG0ukeiS9raNQ0b1OMV5s+bw8sK
dZkUDiaM/8LMDlN1IlHlAfUvAz6ZVhazdyxUqOXBanuWQ9R6yZ8WzJ+r28WI
JtME8oANKk5xyjT976nXX3sd7AS+uOnnjYBojtk6Tz7+BFAXSqyY8Nc//6VA
vvwcVK6U/OH7H8yaMZOTQcqW0Ub9Byzzzfat2/jtsiVLzZgePuy12rVS7LNX
+uxzTj7xJPtBn1CiZLkyZbMKO9s1wMxBK+288vKLign2NZwH7pGUWNGkv8cf
e4Tzrforw4FXqHPKl+AJoGlDfTRRcsLqVSseefhB7auwcc3dPEPdOimRgwlZ
Qb+K1TwapQnn5HX0fag2IFIVChow27dr++7It7U5IGsQHzBD3rfP008yAijb
sV+QOUsBOzNoXTp3EhzpHzS+i4m+oEljTrNGdGavr7nYap8hOldp7hpev27N
AV9kNCBNTwHfgxEsQmWuwRGkM2u+ZqUBJXQNWCGZdwQ765JTUptJEfMH/uXz
W8TAVA4/Z874yhQ5o/6YJuOu2V+h7F6o7KqWZd83LvXA/ffq6kIPMURQtMXW
M6b6888+CVWnQuCB3Tkz4CfeUVgR2vfwEzgeYwvHsyab48zSjfnA/kYKIf1o
aOzKl196wTTG0FCbY5iwhaxzADuriPIwarAMJgubGWRObXkTJq5ycpK2lLSq
dVgPRvIDQLQAaA0ItXxRU2+6sQNcgnd0DVjU3YXx5BOPaZ49CnNqjDQ2mZcZ
73xbx1kzp+/fv1ehz3AhnS0OxnQsXrRAXyFc1/RetwbXWbRwvrhAPxojbHnh
mL/g7ySDeDX0Wd9g+GtDeUF4lFENrJ8vv/i8UlKCJcUye30WHuOP/sNaNQXY
Ady1czuDvzt1Jze6rPUlSLdgMsoSsvgYc9eyRTMdFnZRV6DYN0qOahS30jOE
GYug7VBmfo0VGu1WrF7HZtRGyieDoyNV9QllyfJfocRfYMU5jJ3VS42gkNXz
eC88P0ipyrvv3ZPKRKNF8F6JCRUi0VABTaaRg63EMuCTvCYbwUzqjrferJue
bXLAd7B/L6PEuNkExKY2F7VsrgT3hyHeO+YbIU5xymFiH3S85VZzR4DDIXK7
W9fbkT+nlfq7PmKkEFS4YCHTn58bOGj+3Hn8xLphOqA3rFv/7dffgJ0HDRhY
J6V2yeIlTjrhRH4La+eAT6uEnXPW2UDyLPQ7wz9hI/BVtNmFC+ZZ8YDtHKKX
bb4MgRCFJzqPxM76YQ8A+5LFBw54VlObpVqsptv60lagKtvE293VVoDnNqxv
jrMMNmNdN7tJzcoQtbROcOtwolH06tnjq2lTzAUzKpi3gCvyOkhAhhStOw/o
EpklkYV1yGfPmmE7bz2DxvgxMiwnY5MOw27P0kKvYHlMnPAlI492p+ODy+7Y
vtX6ujqhVMjV68BTZq9r8TiCdGa9Y3yi86jAqLSwfcaM/shVGvqh50JbjQEq
oe4Wx+wd9HMVFbMs7Sv03KABAu1ImmhtsRLHxYoWZl3Z2UrTgf4aowRhXA0b
1LPwDssMpuS8+8ldetzZPeN+6+5xA7bNxjVID+5n25Heve6aOmVS32eerl+v
zhEUt2CCnryU9V+jelV4lAZSOwyaAd3/2b5qldn9PMbG2wUVBM0Iv//eyFB7
KpSlAv9yWoniRYNGHSqGadbgXerUrsXeN0rKaFL7pXL8/HMDmbWkxIraVUI5
I2VQ1y63edkjiA9kFSVXSmQfCQwZSXAcAOGGDte98fpry5YuRjqb9Swa+uTj
MRqs3A5m4iid4e3MWvBaMqrVq1XJhba7zBLLEsEt17JBVdUqyU8+8dic2TMn
TRw/f96csWNGtW3TmqEwWzmz1+eynTreAtfScggT279vD0PNymQBswWaXnC+
YTaqZ1n4Xrq8Ld/d8647hw0djFhEh2EqEaPBZiJnDs2ylyxeOGP6tHGff/rB
++++OeJ1GCCaD3uWR9WFqvIza+Z0LY3colJSguENfMNOt8SWYlcbXdoQoLSo
OQf0PZPF5PBG5tdOqclrsvgNxYFjsAv27N7FO6qliGRDp5WM5YisyQQfloqp
EGrUxmcyaDA3mNKundsfefhB2BQbh/MZE2SNanYujB+LU5yym8DCXTt3iQbj
fL996zYOxM63d+kK1E2smAB8ZoeVOac02JlPUDAoE0ANFk6oULF+3XqXt2l7
W8dOV7Rr3/i8RuXKlOWC0Bmnnc4xJ5x95lknn3gSpP/6lJNOTk6qVDB/gazC
zuxr/iuYZYNrSxQIw/fgivzKXg98gp0N5rFso5lTxtTxWa9ubXs3W21MjLlo
4Xw0IjgwrANJBJvih/Auo2otUajC/F9jLLOVeFn0cFsuarCVi6KiI0F4eEOR
LUZkLyRewXwohvTTT8ZaSTLmCzKHyVFi7ionJzEsGtJZTlah4XPe3NkWys7Y
fpvB9VmKyHFbnlm3xFBPcLoanXkHZlgbvjtoYP/IQbmpczPmA/XbSYcgEtYi
2xoEeCm2EjjUd9HlmgtjiYOX31gU4FKtmtXtxSx2lnXAdlQa9U2EhREqRJUr
W/qy1pcY3Bs6fVhkm0td0f5yDQicNv2rqUbn6lTVsdK9W9f/GrAdORgVfCCy
J9o72OYpIAtuBBMzSIaVdgT131QZMzJBA8voUR/K4UO1bVs7yehyYD2Ebt12
M9SQYgSCT8J/h782lDORFGExGGIRqm3XqF4Vdd0iwJwPQ9Z/hygZ/+U4JgjI
k1KrBq9p7WJRnoa1y9teplPvCLKBZBXBIlzhxYsVsWefY6t1Be2dbfjYow8P
HfIqy15uaZmIkJ2qfWna1MkqDLryIcR3HrBFWCKsYIF8vC/cNSQyyBN0EeY7
/lgLnhyGbbxihXIsUdb8qpXLt27ZhP7DASsf+MxKhsXZo8T4qCwcT96Lqefi
BiEDZosVLRxyIjxBzU3fR/AFG4pjlLUbkBEYOOBZpTn7zqLcoz76QJc93IZt
Kz6VT4a4F7uW+N9fZsenZfvZRxruDB/y1Z7t9wyzsG/vbmZh/749zM62rZtX
rlhWs0a1hIrlfWtPto5lxnn9Nsvm/PPObYBsMtBOJQSpZ2CMeu9X06bYYt7N
ZaI0S04dOCaLP05xiiGBc7vf3k3svGPbdg4so92t6+2AX3gD3Bf8G+XEBxzQ
wGegNAia/3Ig8T3XASDz/V9O+TPf8Cu+4RMUy+c5Z51dolhxvuGawGf+m1XY
mU1tM1xQ8FVXtkcXtRqhTXvNk+K/Z591BoRGallF9BY+4Q/8St4C2xky+BU7
rvJXS/FzgOYMx+ja5TbOhPEaPeitL2jS2Mo2YmfrmcRqHs3YtTYRj5SYUOGe
u3sBzdQTdHXx5BYjFceZYMsALlwwzxbYRxZGyxJiwZQsUQxZ0LZNa7QClsSe
3btMcxbJjnznLRU2BXFmr8+K7de3D9In6GyhNQYXf+jB++fMnskdv/1mA/Pi
yrRQWAgWPbJ6QGirZyOwIM0JNWpO5AiCiBzEfbzXYfhBcoDUN2AX6mlsc4uL
6mo01493UTnRUODCCCEfjMA1V1/JpLvvmFYml1nWBc/G1LuqAeGLcZ+FUEPT
yjgNTpXxYjMvw4hx/WuoMXXrpCxaON88ensic2Xg2NNPPRHzUf3tg+/4awzk
pVgnjL8Oo1Dnh/fiZXPA3+EaMOidJQ270EjLYwRXOM/W7vI2pQ72mxYvp8XO
MGQWg+KD7c9PACNGTKGRAgnd4K0vbcU5UEgsUs8HHjrFMZ+dnCfr4FnIkfXA
CDMXJmm6BayMZDq5CSMia8krsJcnT5rA4rHbjg79S1pdFPO3+/2kiQ9xr3lB
Ic77MmJVqySDCoGcLDBr3IFAM3v9alUr217E1o0GZdn+uFJSgs59Y7eyvK9x
SOVmBxUuVMCSDmlrdrnX7EYRVC+/19/KsxkrAlJmk1r5Ex7L/n37rRGFCua3
FKfb1vAzWUrwOIeMvEMQqHfJAeysJE1KrMiT8C4ptWrIf6yT4Ce8YuiQVzWb
uAWcEZdBSFv4VeLijAPXN8cKbZA9Yj0WRozhApUbs93ovIZcimdgUYmg9Quw
zED3sVr/cYpTrAjZ/sB996PYgpe3bNrsAfAZ7Hz630+DV6E+cA6bL120m7WU
znOabgZnC/2DjFfhGIwDY1+2dLEWMOSIVtBQZiQSdR/AJe7ofjs8IWQ8oaUg
CxABsAI0ZC4I61BPE55PnPCldrmHH3oglHCUZUEXX9SCvyK1uS/cm9NiWG/Q
YpitLm45oH+/YUMH27zA2BtUNRV+dU4Gbcf2rbaaXbF86eBXX27Zohn8FjZ4
FNZLRCSJ4K6+6grGink3Pk3cxwGzbDZZxnV9lbyIFf2Jtr5C2evVs4e1YbUP
Gye/ZvVKFm3fZ55ucn4j++/YMU3Iw8ps3OjcULzdeNGYD9RvJJFC+XJlGDEE
unEa4guG9KMP32d72nGG90LTi/kD/3I96PEM1Zm6dO4k07C3LJ9M0PJlS6zQ
ZSdom28yTaivTP0zfZ7iTKvCaicJbUnZbrVTaury8PVHvvOWwYe2GhFBDxrY
Xw+CfdhD5qbB4aqs2hLVV1kwrw0borPSxkmWmdJL+9ygATEf2N9IvJ11wm2c
Jxy4/757rE2kpZRRZQfp7cqB57FYhND43Ib1nUerMGka4pF4SP16eohsdCu4
Q7589unHxkBqIpMVa8AEm1iHkPNvveUmcxyE2Lyvi0f8mAcCjA+DQr01yb15
GDaTN0e8HnpnW6v55ptuiPvL/iuxksFNeiHNN9H23q9vH0UeKxMeaFk2da1c
RZYg0A9iAritrGCwwUyXNoU5PSqVpi9VqRzsURU8znAStAtUO903agsWFYQZ
ovihvxkE9avERfQl2fRN47DIWvcxMgK1kFHSrMcsI+PYMrbPQ3OGU6UdKx8v
x8YhTnHKbQQufvThR/7xw4/2ZQ7YuWvnLrkKO8ND2Oyw65CJbC8/w4f4rFe3
NkoXnDz0M9XmHwJX4BJ33tEN8KKCCsETOK5Vs7qRgTANOJJOQAOT2l3eRs/y
E48/6k1DJ1YIyCl2DrpNDLEnz/DgA/fx2Dy/1Ue1HDJKVps0xduAbd4UtQ3x
kVKrBjq/Iaa8C8w55gsyhykEODF6WkWMMba5EkNXv14dtYKM84a4iIXadHyo
5gG79DWjXVs+16hdbvTuyLerVK7Uvl3b/fv2mAxrtANrjBOqV6uiHq57JRfq
JOmRSF+4gUC3SAt6l4PAynzg/nvNLk+oWL5I4YIxf+BDKJgsdN/wzWOPPuwk
WiVM3DRl8kRRs+GCOl80xdtZSdchk26MNxoIe3PihC/hUYxMaIDFWNl5h3P2
7knltGVLF/PDSRPHGyEsOhbLW0s/lARkz3IFhvGpJx9nzXAjaz7AAeyvx0rm
ykuXLGrerGnMB/Y3EqNqFrmuE94Xfp6YUGHa1Mm8mtUqeKNRH31Qtsw5TkG2
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
KxDO9XXzFGS7ML8gPLFyg2vn5F69Y6NjkMzpqWnxsXFI6XPPPgfxruj3Cxc0
l5UWo5qbGhumTJ44v2HesccchYZVeO0gaNJackvtOGwoW2liyMougrmzm5vm
5+fNRPmGwvn+uAIav5b7Smt0jeocZKzjiChlvvbLzQmFh++RzNLylC24woF8
DhS0RbQxxhhjjDHGbBZI2SHxFEkyKzOjob4ORVleWoZwhoqycrTzj9//0D2x
20bQzqFwjHxF206Ii8/M6HPjDX8rKiicXVE2d04Fknmlrq8oY6G4qODTER+n
pSYr2L6CJimmh0bS18g//v63woK8BS1NikYox+/qqrk3/eNGZdBjJ7ExXQf0
zw2FJ5u0th9FS9D0jcGDBuT2zdakD2lk/spIT5XvtwKXBWL5V0T8ATDGGGOM
McYY838i+aasTJ07dUA7tzQ3Vq6cVVyOcG6YVz+7vKK6suqlF17slpC4EYRz
YnxCcq/eaGdlee6TnnHt1dfMr2+oKC9F5CJ7ly1drOhefO67z16K+RBMcEZE
B9EP1sjLL72gUIrsCvnMbmfNnL5oYQviV5pX8ZeU4nkt+4HsrD46LmvGxUYr
OndOdiZFiomOUixBxW5ai5aP+ANgjDHGGGOMMea/QTmqkIEd2m+35x67KQnU
3NlzaqtrlNyZ5Yv+eiHCtntitw2tndGaSGYW+JSIPuG44xctWIhSnldXUz+v
trysBPnc1Nhw49+uj4+Lkde0AgAqIvFaHLbhmzFfK6d8SXEhC5wpu/r3qy8j
fhHObM5nakpvBK/SAaxF83I4tgJt1btXEteQrVDK7AH1zeZyhle2aJVTWDsb
Y4wxxhhjzGZEEAIaQdc1qvNll148Z3b5yuzJVdVVcyvRzijoirLyHXcYltI7
OTE+YUNrZ8Ryj27dkb+a+IyC7tc395233i4tKaqprlzxy7JpUydXlJe+/967
qFQpVkXs14lo7DjU+njx0089websqnF+vc6Uz1132Yn9yOU7KzND7utrGSzW
ADerKQ100qoI3uqCYMPorl2C6P2BXl5dNUf8vhtjjDHGGGOM+e9BAErKyVf5
iccf1QivImyjnVkoKyntntitT3pGfGzchtbOiGWOhTDtlpD4lz/9OTenb1Tn
Lgfstz+Suagwv6y0ePmyJS+9+Hxmn/TsrD6KbxYTHRUXG60I28q3tZYwX2w4
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
flK3zimWTz1U4JpdOne0iIwLZRs3rGPuI7K8JT7nE+QYE5wZvXnTBj0w3ff5
8ovPxo29GSEgO9YHFRiV6V8oK6KNszKo594oPbXCCcdZ7wau8czTT5p+wSVB
FzMhLO3btbEilUw/FnacA8oE6ETjl6+5egDs2KrovlrZDZvhvRnTmFndu3Vl
ZCIEzEeta0o0VuPFnc32yf1beoNPMIeYZdw8QgMDgMmlCeEilWHdcmeDtWW7
B7J/bCknI+4Mu+Bt/6uuVBCZhFCnFwTmZ3NnR/4t0fJX4M4BAQEB5Q3oDlSY
26nwaBhlFBqMVEdfYF4i59GGWqEWS3UZFpkvA0WBljfuzF83bdJI7sytqtCx
n++/7x4jnd07/o/fnoTNmdiwvuUzbh59I0oTu5QeQLWZ52RXYb6FUw2U5if7
FqiKe0sDAsoebm7CnZ1KTCvEgsEdCAq3cZlxK1csy85aw+cvvfi8ZxocrY/H
IbSNuR9M2XvvuZuZLq/kNrB+4cUm4XH6Q+el0nzOCdxtft6OFcuX/qn//5oi
2EltJVYrI8tG96PMZTbf+d9qVSunpiRxPyOGD0U6QZY15mnRooULaOnll13C
vZm4rJyI34CjBFgO8McunTsyLJlcjEa3UHXzGD9uTKzYL7pReqqU0znFYLYw
NDDpfby4838Vl8lg7vBf9evV4cZ69ujG/LKqO5aPEVv63Q2+bhD3byln4zgQ
BcxNJM+B7B+sC8i4Qo/GIjA534RjpvjTdQTizN+9/950d8CtAxKtzoUaVQEB
AQHlChVOOK51qxbYh7/7j5M7dmhnKUO3M9yu5VWDEwmvUbp61Uokv7Wfbrh+
JEohqtWy33JrGezLHAjcQNs2rbhbtJ6UX4/NJ594LErKjS4zYPOkE2txcPXA
P1nNCnMa4mwgJGY/x9dcPaBiheNTkhPRs+jN4LMdcJTDWc8k6t6t64Kv5iEi
Mtescg9XKeHqU97O7WbbYza9O/VtCWm08YQtfajuBwmGBfvRh+8jr/gv/bG1
ePl3c+Qi09yS5m4RdHw4Z/bMvhf0MVu+afOrVK4YKw73oHUa1RLnff20XTqL
lYlNy/00aZx+8km1zzqzF8Z27trsoqK963JzbAWtu/WWcdy85W9q1az+s0kn
gu0dcJgA82U6vP3WG3t2FzIs//63vygBEAUD/nSVtZ4Zfi5MoWTr1jnFhSnm
F5rUEGAnV1y4s7n4YsVJU2PFS1WfzZ2NDEH1aznQFlq0qzAfYmt+bJqgCcGk
c8lu3/iI/cC3zF/XtZihmBBIRSevq/RWkEcuYWlMefnFKMw5KuGh/In7gw4I
CAgIiICViMVl3RYkOTYn1Bg9qMOV+8sw5RXLl86dM8tNHEumag9jJJtqLLrg
vsQ5jtyZv+7cqYPcmXvWokZPzZr5SaxYi3mTHKDBGzdKGzL4WtQ91ik/0aUz
JzvToK3x48aYQFilpiEduHPA0YxG6amM+etHjZAju5PiaptZAvRLiaKMOQ3S
1/+qK5E2mM2HljjHimcl1uZdk+7Q1cTqcvw1d+LGt1WesVG5W4A0gzUjuNLT
UnTMjv0YNM3tnXRiLd1L3CCLZve+wq1sZj2SmR7D9l60cAGWPE3QVXvjhnU0
at6Xn5uuXMSK5V60LV4eav0EHNlgaPU+92xXq8wtgN5EgV7c70KLFDO/XNJx
CUinLzdkDS6OEgjEizsjOpADZukfNnRwYUGeaUKXL1uCyFqbk4XsYrr17NHN
tTXIPrddrWrl+vXqcIyIoGkH4s5WWkeqGCU9f94XXN/E3fwFQglZpIcMffjc
s0+biBtYy0PiHEc7KiAgICDgp4iKUiHVMXfREXv37Fq/bi3GMCoDhYjdO33a
1ObNmnDOuLE3uxOdlbnaCGhOGzig/751TssPd+52WhftZ2414s4cxIo1JooM
rYdapwfuvutOtJgsG41mHh69qrBO6R9UpDUsEqpV4RUE7hxwNIMB/8jDD1qA
hjmlKAAcM3csmox9GDFoptWqjBV81bhR2u/+42TjBA/hfoopF9q3a2NibZMb
cD+YwTJN5j7zmtc1qzOuvOLy2rVqSIo17GPFmbrNe2BII7a9ucF9ux8h1Sp2
Y+hwg1sdMXxo7tpss/7S50ZiZqxcDjGJWoGMckP8p8Q5cOeAw4fFi77esX0r
lNDYLkTBtHffgVe631q1SiXT6cM61bn6JOu/7TpVfLkz/5KakmTFdt3toqJU
5jyhdfdMvuuYX/9Kok2jmJJMN37IzUf1BX4WtFG3bZr8/nvTsTGYyPSVDjBc
HBgHhyAdfN2g/yqulhXVqDIDeRzryAcEBAQc5bAiM6/Ic4DdZa0lpHTmmlWo
CaS6khwJjwbE1MT+vO3W8VGoDtpQwxi4Swsef+wRjExUIefUrJHAsX5ZZWZb
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
tzcvN5v/vvrKS9wjboQcXFmXFv5D7Txj+tRDtbMcxX93FfU27uxk/pXPm1KB
uGqmcPJftPCYiy984vFHX3/tlVdefnHi00+yfv9999x4w7hRF5zfr29vOT+w
u6YDxERHyrmO3X19vOq6/H9XVIeu375iKWwXt4bmqlF+zeygQeobDoqYbby9
mtAzaLqBIirIg1HhwubP+1YOAzz1iv7KSkV5aWpKkj5P1eJrrYkPtJBzhp2l
j0j6uqWxVJj57tvy8VAwH49X4DEC9cYTQZ8A3BqedB4u89U06hleT8pb16N7
V96zz016Jiy0Qy1+QaadDcMwDHfhFodtV80rCRNXM2hYwSKt3FuOWatRVwku
/rz6qiv8fL0dzYt5LNdiKR1MYvQLlrOiYGkynWxa9I7roMwpst94eyp0NuIO
vewMOmv24kcfvs8xNatR16jIQnWKZhJpWA05r9QPCGeNqZWWFGHYK9gvV8Hy
0AHZ2m8E+2LSJ21cv6+yQt6qGrDTRNFZM99R/bhqZjY5Eb/19eCM0wfIrZ2b
oni5rOgDBTerrLSYP7/6cjalio6K0EcAFVLfH/5QO781Y5qmnTpjeZoA5an2
rM8y+mig/M7Ug+qTqqPZRISH6ptA699SiQl+FApkp8hICoWqy2cbTYA1jg5N
jnOaCjeCe/TO2zMU01VPuny2NxXk3XP3ndKtuk16rKS+kWzcWXbkaVLKJOVc
U47m3JwsOhm21DeQw5nH6jecTDeKFKf06GrbTz35uPQ15zV/Awc5sbPkLsiV
XanqPV4wo0HBk9u40QkJ8bGaUqQv9qadDcMwjHrAXdpZryH5UaOdJz79pLId
yR6WEzVGcnxczMEn1exFDS2xb7++vdesXllRXooZrFStCoB87z13yRtcgbh5
XaJiNF9SpjjvUM2JdqIMcYQXnp+k7SV8FDC2rutT42uKtKOBMFnjCsBVVLh7
zuzPFX1I86+PVDtz4TdcPxaxIO0sba5hOy6/T++eGil2gopLPmsE7eabbqAY
iAvEwpbNBSXFhcqcJU9yZRDjCFKLWCNYxcoQ5PotRtmh2hkJo1zVjnb27ORQ
hSRVuBVWdCM0LsY6zUzfFqSg9btKziVrTF/fCrSjlsobwsaWv/KoUZIjJ0mc
PLd5bNU50FFIumolMyNNd1Cfoaj8yIgwJ8cc/3ri8UeRzEhsJDO76PuPAvHd
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
i5Cbq1fP7rnr1/77v/0Z4dT6bPL2vn16aabk1WkHeCk3bZJRWT+5invdyPAb
E15DzpFtaS8t0711a1cvXrSQptwe91c/m20bks4T9NabE6y0pQ39m683I+Td
u51Bl0xKZu7of9wKfHByZ/eQmUrNB4weY9upY/sNxYV//tM369etQWCKiwpY
UjihdauWKe9wRERERMTfBes5r0Kzy1rnwtK6FgySN5m4ie8vOP/cAddeM/KB
4R99+P7qVSu2bN64cUMRBwsXzF+6ZNG0qZNfeXk8J9As55sMil8Jr8U3NHsQ
vkPrGoJGl/jvtmNVO4PgZMqhLrNA9QrFRPaKd/tHuDN6Aj+HOAMVtorJVH+K
obfcBDfRK9LyQHyOe+bplA9gRJ0CCj80x4DNrJYtkFIETDp86iknoflr3QNI
o9ZnqO7TY57ih/JiLXeVtR8UYNpH9dXX9KuFX9Iawun2jka6m2+6IdYfP2DQ
MrM5sxl2TjLS007oelx6o4bPPzcOhgvVNd0TKNu9k6UJuXpw5AiECvEwa5xL
ZVhUw6qbSC68NMsSt6N0O1LE+3TPnjKaBWtWr4RP8Q7l7cxvEWkZdGX9pFma
4hyO4WWsmfoDf/vNFtbM0pJt9G34/ffSwm/+6Vdhj+in3FlqzBXNSG+GbVgz
N/jQgw/oaK2TBo8btxm5c9UwUZhbDWEjhWE8q1+fdWtXM90F+bkMbNMmGcah
p7zDERERERF/Fyzavt9ZunnXWxjIpV57cetWLU85+cTHH3tk5YplhQV52v4M
0jHIC41x185SVAje+Ly1+VOvWpriPWsIlQ3SWiJZ/CLW5005Ql2So8vzoybK
NzcSFXY5Qn1bA+ISSedAZYNzJNHV4s5AXqO2ZqLaKrgzTATNLeQ0tszKs+PG
pnwAI+oU1OeRKMvcHNG0sT4whx3620kff2SNXdYrPVcNT0Zr1YaogY9fVaHb
W2ons0UzK+xoQrrv3rsh4zqBS59ZHl984bkQKx2xv8M9ZBNEN0prwOuS9apP
757m3eLTbT2LlP1Ytuul8S+YNRqKbXSzwiAB/2k5J+SKV+SE1191fUM+d+4o
oak9P+7+6MP33bfs0L4tbN1Vt7J+ak1u0ji9e7czaMraWLRD3+DRCOeK5UuR
Xm6EF/3RFYpJVSTOIK1hfU3tOW1az5wxnccEqQbvvfu2lae4EA+CJvV/3O78
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
HbdTRSdT0naz2fYstLroci/WzZg+FZHQoqsslxhtXn/tP3Kc14pNvzP7MFUh
b8lJ6xSNUOkntJDL+bP69UXwkBbZ59fv78wFqSlJGiclM7JV6Nunl8J6K1BY
PTmqqDbSSDkIeXRUhAKGM28it/J40sjjWHR7/IUbDAaDwdDEwEy9eNEC6Xui
Qgre9dSTjyukp+y+nEA32nPRZoqSF0uzrav8dWtXi7vJu1AkXZ+lJUWoImiw
A88bIO1XNpYi7BQ77v13FbRW98KXodtwHCWDhuJpH/CJxx8VcZNRt1x9G+r9
HCvc2YlTDc4fdJ620hQUS/u/6GzysNNem/aa+UoHcU3nTh29vVoo9/dp7hit
YiKUrBxP2noTc4yLjf595gzetvyFOVDyMtiNOLXYtHJtc830ab9SprJX11N/
bRTqEWiS9L7ydzth3inwrjtvl1uf7KiffOIxJ7Qd1/C5etUKaquqSguVUMkB
EEybOqVm315lKkeWJJmfj/9UJhY0E+LcovlJMh13fFr1NjgWQZZTs+MDrgTf
/B2U/It3KObu9Ihx5yMTadENxQ9cMH+u/tparpEXf0Z6as8e3bTprx7k+pYt
mtEpFw+98JWXX5QtjaxkYc3ya2bMkduCbPX3VlWMfeuNZiedkBAfi+Tz3KjI
cAqJCA91BNKp1QFm2zxozK03ywRX+dQ0yvEvczxckAq5zR686WyS8CdDXaZP
5fXWlCEzbAaQ5597xtfHi35BrpgEmaSyMtOVzx1ZYqxzwsExhlx6yVDFA6Fz
EUIFDDwkd5a0IJxydXFWkrW6yLPkh+LaH7airvozisoPRcYVOqn5iIFaWctl
aeMYxhgMBoPBYGhAoG0uX7ZE28EOd0YDfOD+e8U7ZKGqnTvN6dpuVhxsx6Oz
rvIV+Fpbz7JsFB2WDTbE58eJ3yuJjOIby7tQ5q/8JF9pR8NJWr+2qrIcJeeL
zz/joSi31O2Zp5/iV2mtIm5c2VDv51jhzg5V5LhTYgK0wlHSpBkCvXNt4PLm
xXw5gGUotahWQmQ6qHRUaIYKNquVDdf+9ZN77r6TwtU7MlSgHNgohUNnFLIY
YiIv9Xfefgs6CeOuJ+6r4nhL5GR4oMUcGRtQpjJ9n9P/LFEk9FvueuP1VyEp
Tnx1Pn+bMa1b185UOzYmynkhfMqI0eXe4EZTvXLEcIoaeN4A3pXCxcu6W9Fr
JeoiYvJNUA11ga5xfGm1uKQVJGTYYVva4TLufGRwDGtluc1LnvXHTCQWLkOP
I7eIXHpaCiL3048/PPfs03ffdcdtY255+KEHPv3ko0UL58N3ZNGtQHDKxaYI
/IiT8uVBdeXvfNGFg5FMxEZ2BUg+NASJpfcZ65AluZSedqhYYVzAo/VXkgRq
azItNdnljlGvUNvi4wfE6zZJ+PPBOCB7Bj6nTP5ZAR9kw4A8IBgLF8z76MNx
SxYvXLF8qVIwa6GGT2Xx01zDcHf9dSMZMDUPyiHlkLOhBEZWCjxU/kqyp5JM
8nRkjypRCJKmFbm66q8BWfx66EVDfvj+W4ZZhsdlSxczpsnOXK4iepzHX7jB
YDAYDE0M0M91a1c7oaVgpqgQaJvXXH0lOqRMDTWVKzuGa79a6+zTyU5MFmtM
65znSmVWvfSSoWJAiuNUG5xRgpiR11yFJgCxgpJop8blJjuoE2gvXInSIkam
kFYy/x58wSDuEnN54flntSmpUMwi2k7grNP2J9Z07Q993CBobNwZqnjC8f9A
i5Mv8CsvvyjvYK2KyDJQNqvavJOr8upVK3j/YgfcGODvWxfX0zYr3cqD/Hy9
oZ/cK7/pmppq5W2hcA6kZDp5WHjKFcMvk+Nq/fvOyJKSYSE5EFv1OzKpXWz1
OzKGxCr+LQcwX6gTei8MCI0UMtW7V4/oqAgVWNta0uN/NMNhAb5JPyJpbffn
xv1g3HtQXVkXSMa0VqYIyRBquRuLDUnaxZGVDEiJzLTZ5+z3/Tzpx0EDz1Vg
B8VJPtx6UrFhl16slSJH4CmfB/n6eMmU19/PR14GB+ftdf5fSmGg6O4cUyWN
bx7viCYGXqnSvvOqPx//KbJUWVEmR3hZUMv9RNGzJSqMLYqnDc+VxU7S+rWM
aV06J2olxOVekZONdz1yoou5F9mgNImolpH79O7pRBfUWqW2j2V97cTn5ExU
ZDjDNY/+8IP3uV12PoolsnLFMod6ay72+Ns2GAwGg6HpAcYE43A0zNKSIlnz
Qk61EenoA86+sz4d7lw7delp+yOWMHfD424bc4vDnUXZHMiFec3qlYpNKj2B
T+51NqDFlJ09caWE5usXn3+mjT89+uWXXlCmISk/Ukj+atwZvom6JYtreo1+
+fijD+hNOAJ6mmM+rQTZqG0ojQsXzIMCy0BRrMFJpnMw9OrUQOhz82YnckD3
SQlEhJSqOyM9lT7Sfp9iX9MXZ/Xr69qf1Kme+svVGvmh64dfPkyGtdqjkeX5
bzOm0S4IvnRIrqQaMJdJP01csnjh9Gm/3jx6FOe1GygJMe58jEI+CMpXS6fD
d66/bmR5WYmkF6nWJrKMUvZVVwEttshDRAMafFYrgZIipJQzCBX/i5Tk9bff
dqvkmQEHPtKmdVBcbPTh1pPqDb1oCJVRPjiey4FcqmmCPK9loqDlRAZGIBMI
uQO43EYjTuQx6LZINCcV787QgDjNHbWDMYR+eeD+ezVAwV6diUnGURIhmRMo
GxoChkRlZaYjRef0P0uRwbSI5wSaqD8WovqaEVJLi06YiLTUZMbhjglxlIkc
UiAHlKk8Wcp7xZDLqNgqKACReP+9dxgMkTGEWUEeNP0h1RcOuUBu9Zr16ok5
ZjAYDAaD4cjAXKw1doXbQlvQqnuXzolyZ3aWsh03ZIc7S98TgdUF6J+yPUNV
6Nyp49tj36yLO3MSjeWtN19XHB5l5RBbR4MVd0YN5i5VTNbFyiZz3bXXKE+x
luXfeP1VpQuRzqOAUbW3yB1W24AWko2NOyu2Eiq6YlspXusP338ra0OFCAPa
WIFQPPbow1xDf8nwGN1MilZd3JlOadmiGZ3i7dWi2UknoN1p5/c/r7zE267e
Wzlv7uz77r171crlckeVrbV2WBRizmEH9YiivIbp2fvvuwc1VTlcEEhtr7z6
n5eRLiQElZVqoFvKI1VMGfFr0fwkypFZtUwjjDsfo0BUxEqU+gfBQIpm/TET
qdD6jxPyTravqSlJG7IzZWELUwayzZbzAgIvZ2QlJqMcKGp4WIjGEAVbOMCv
+b8Ef7c+vXvK8haSxSOohtYGu3bppATTKl//I1rhclveKriTkwML0ZUtLv9K
edPTZMdJ39BQkBeAFigSO8bTZUiUVhfFl53dZ01biJBkadHC+QhP0vq1SGNk
RJjieqmDnNAH9ciPYiEiD1BvxYJQgHckGWm5eOiFWi2RJZWPd0tuYWbkTEJ8
LCPY3//2t25dO38+/lMnxqPqJoMrLRNR1AXnD5T/tRxGbOvZYDAYDIYGBzOy
aKlWsGWoxkQcFhqs+Egyw3b8Rh026kTLcbZ0mfeVIEOhkrnx95kz6uLOSqLE
01UIKihaJaqIYhrz3IsuHOx4lknBUBhb2BkXKPGuIj9/MO49R9tRompuPNrv
rbFxZ16+46eMaqcIz7wiXuOzz/x7zuw/eHtoXJN/mXT7bbd2TIjjApdbh+dN
wouV3KeefWeRF25RH8lW36tlc/U4J2VlKuPYFcuXitdoJ1ppg6hMPe+HQqgM
dNjl3o/7+qsv5K8N5UG/pfLQZ2rOBbSOAhUBW4G5KJbzVE97Lo5wGnc+dqGV
OsVdR6TpXPp6+OXDamqqGQSQZC3O8K+XFbeOOc/YpSDGfEVs4DuK76SMVBN/
+G7EFZcjPwpWXNuQRoPJ4daTciBTPFSxl+VjAn1eu2bVqBuv75SYgOxxgXbP
eZBS2Cumva+PFzLfvVuXq68asXDBvKVLFv3w/beXDbtEoe1iY6LMX7XBwXDB
+1fcNg5efukFJEo224r1Ia8WeQTIrFoRC/dWVYx7/12NlspE4KRsdpZn6/dJ
UZ5H5i8tY0pikZa01OQrRwzX6qUMLRB4RBQhkcwgEshtSvJ6Bd6kVkiaYlYo
dQIVrtm3F5Hr26eXyz0XIDlahPH4CzcYDAaDoYnhiuGXoR4wIystsmKYpKel
KJinZnyX26rQ0TBdbqZTm5u4auVI0m6RbGu1xn5I7gz+88pLLZqf5AQglbur
HAOZ+t99Z6yMdfmUtoCqQA0hUH6+3nLsVciXr7783DHYlsMjB0f7vTU27qz4
MFQAlqGcOLwflHPUJwWwQmkUzdSOniwD6VZZCSqckavufeeWLZolxMfKMxrt
kS6QjqcAs7IqjI6KoI9gu1LwkCv6YuWKZXquvODrqr/oOSVANKjPhx+8L1Nw
AGtetnRxaUlR1y6deJz4vsI3qWk0lpMotNoAkmOp+LIT7M6z/zLD4UKDiTqR
Y63bID8ff/TBiuVL+YPLu7mstFjZgoBsTrQTrdDrxUUFMu2GU3/37QQYilb2
kJ/4uBjKR+yREDEUGU4fbj0VaO7nST8qdhl1gK0rX96nn3zUq2f3E47/B5Ip
+20l3tXfE1rNUEatFJQAZqQM5hnpqR0T4qgJf08FxDM0IJy5ho7T/j59J3dm
mV3J8VnRGzhWNud5c2ePuOJyTU8qwQlsqHSKTjSweh6tLe+Zv03XTrGCdSMz
+6qrpk2dMuzSixWfX7weIendq8d99979048/IBKOzZU8WeTMolDzG7IzqSHF
3nvPXYpn6FiINaCPksFgMBgMBuGlF59H62MqZ2pG29Tn+nVr9Gttd1cnBrJr
P3c+gCqKPiuKKUQJzURRquryd4YKudwbN9KToT8O9ePMqpXLpR7LV1cJlTij
zJvSf2So/MvPP+kacWfZJ9cOils7Rm5DvbfGxp2lzqFvy9STl+/VsjlU1En0
KRdL5VcSy/773/4mRYsu4EYnzvYhwWv39mohnz7Zl3bv1uXEE46Tx59Co3OZ
3j8KoXZGOP595gzZIir0XF315+k8Qn6IVGPMrTfvraqQKwHqa1Vl+Ttvv6WN
QgmMXAlk08vT4fVOMGR1hCTW8Szw+B/NcFiQlCI5UE6tq0SEh8oyH/pcWVGm
5EFQYy2XIW+izPJ01mKg5OfDD96/cMgFlOOEYmDQQG7lNa+1F5dbAo9g35la
QcBvG3NLTU11dlaGhlCNqHAiqvHRh+OuuvIK6DD/l3MH9L/1ltFvvfn6wgXz
FABcS0zwIA4Qcq7ndhjTkQUuM/yPYJCh6xEGGQAoqxQSRXdo31ncWRKFaKUk
r6f7tAKJ8HAvwoPYiDvXXkCuf/DXnMWz3h77piypFCpTUyH9DgWe+utkRrnP
Pv14/rw5SLgSRijtRc6GLIVDXLN6pVaSETZur9m3l5ozA3br2hk5pFEaxhlF
qaTZ/BsMBoPB0OCA2kjh1Ko70zFfVyxfioYgAlI7OZGW2V3u1XvHzdmhpdIl
dA1E6dqRV0t9PSR3nvD1lzwiPi4GKiSbcDlqKWp3Ysd4EWFKcPaUOUDt5FdY
kkKvKKeMLMMVUkwOa+gVDsdXJZ2vDfXeGht3lhOfj3dL2hgbE+Xr46XkSgfU
6rT9+YhRtDp36qiUoGhZXC9H47q4M4WgN1Kgeoq7tM+rALDa6uW5KIHodeVl
JZAIhTL+7tsJCiinHbq66q9wsuLF6LfnDzpv1crl2jdEfaWoXj27K1eRY6uv
zWXJgNYH5EPqcGeX2xXRiPMxCtFnRWinZ5EikBAfi6wiww8+cF96WkpJcaHc
NJQ/SKawiB8U49ln/t3/7H7IpDYKHSGRVYxWcpBhyYy8UY5MVCina5dOa9es
kqc/EisiBrtXNgGqVFFe6sR0UsRvfVXltQ6AtFN/rv/2m6/jYqO9vVqYzXaD
g+5mckGElF6KMwxrSFp0VMR1117z+fhPlyxeuHjRAg5uvOE6rnTtD1tHjyh3
HhLlmEtxXoObfqpnfKMrNWddesnQZUsXy20Z8QAcKKmffJSUKFzrQlo91tIK
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
ymDNothlpcUQ2OeefdrfzweeC1cVCQ0K9Oe4davA668bycXKB60w3d99O0HW
2g51PSQohJrLshpu+++nntBeMzWhNJqgA6ohbt67Vw+K5XoeSns7d+oY4O9b
T4wvcWeRa66Pigznda1csWzrlk28CiWo4hHdu3XRa/R4hxoMBoPBYDAYDAaD
4WgA5qjw1C731i0E8MknHoO9AgXZVuDrnTu2KUq2LKs35eV26ZwYGOAn4gxz
vOP2Mfy6t6qCn/5fFO6aaki3wnNBh3+fOcMx1dZush4H4fX18Xrg/nthzTwC
0s3FFeWlLzz/rCylxVt1S21yKloNE5fFOFyY45tHjyotKYImlxQXit5C85WE
ms/Px39KS7VLDoPmmMJDQzrQCr0BmXCL1Ad3aBcS3F6e1C53ImndEh4WosTW
PEJh0KDqkRFhvAfL72wwGAwGg8FgMBgMTRWy1tburcJhPf/cM2KFMqIWd1b0
bHixDp568nGopWJcy9F43tzZYqzFRQXa5JVntLahu3XtzLPgpC43EXYeB/OF
9j7+2CObN21UnDEu5paHHrzfSTnt2s+da1fb4c7RURFeLZsrEzT0fOWKZZUV
ZWmpyXB86qOk0rB+6PyWzXlfffl5/7P7wdYVKEyP4BNGzIG2pOU6Td1kCq7t
bwXxVkJqKqnk1xTLQUryegg4XLueeOAGg8FgMBgMBoPBYDimAVuE9InPikSP
fesNcWeHPuuYk1mZ6XurKib/MikyIgxqCWEMDPCjkO7dulSUl8J5MzPSykqL
c3OyocBQV0g0DPqxRx+GIJ/cphW3wFg5EHfW47j9heefpXCBB0Fyr79upJis
gnjXxZ2d+su0u1VQwOibbqQO8Pc9u3dCcrWLva+6SumxKDw5ad2M6VNff+0/
V181om+fXrExUTxCiwBRkeFUiRZx4DxI29864FnnDzqPQiiZ0sCmvFy4szyy
64kHbjAYDAaDwWAwGAyGYxcipJBHADfU5xeff+bQ2Nq7z2Bj7oadO7YNu/Ri
bgwK9Nd2rb+fD+x4964d2tuVmbfSQEOfPx//KWS5a5dOkFOYsmPbLM6rUF2v
vfqKjKtFSGHcQwafr4heXFyXwbaz9Sw+LvrPmdvG3LJ2zaqiwnwqvyE7Exav
Ywh1RnoqX3kEZ2gINXTaSOVn/THzjtvHnHpKG7H7kOD2su7mWHvrHN806oZd
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
x+KxvvZ3sNycqd/hzyhmuxiJga1Z48/Gfrh/IavMnjWDZQtf7dm9C8IyNBDa
vQxmjVXP56effPzRpA/gTL7Ub2bUIgc5O7bd3P3Gkn5+G5gaZ96mdUtvbbVt
JNLuvFy+adSwvtW2o9jXiH4hhQAbfYNIVDALPI/Ws0QYiwK0YtY/J7tBaa1d
JCEYKoTv1s3KtBKUnftgVNQiot7UJ+W2yU1Jf+uIdP9aLlWBg+UTaiQyj8gc
bJ6FC+ahsq0qFgQOByaMqMhOSxbGhDdQiyjK83/3myf/0t/uZp/NntmwQT0U
oh5p1Z+BZNyFX1mhYvmyJTaIhA9RpqYPAL2Rw1E954giiiiipJBFhJDYWAIo
gttuveWLz2dbdNcmRHZngIyctGoQmgWrADKE0sIp7j4j2I8fO7IzZ/sj/foW
Ecv0ayOGF01nrHV23ToXXnB+au2aixd9dejgfkaMcbOkJ/AZZT1zxrTHHu0H
UjauT/1u1HSo2xZqm4duocVCoY63sfexOJoG74dkQIxAd6UtZsJjoP05wLTQ
8fL4Y4/4Llibe/fkofGxNvW660jXx27Mmz/0OMLOxUisa0abT5Prf/Mv59Wq
eRkWIFOzedMGEOiJ40dDWTBb7bB+n3v2aU165gJEADhdsXwp/zKP4B9//09+
xWnwZ0k/v4kJcgLcsmrlctMZTMrGhkQ6vfrKIJv+yJwRRXTWZKg2gk7JlpGe
On3aJ/aiAqQYuwtg2b5tS8UKF2RmpMmWehpZYobo2C6tdasWrJHQCximZRFZ
pMLkF4ShJyf9rSNShTE7Jqnd3vNW9K9x2hZO1A3S87YeNqWC3KoOKcnyQGHY
WTJ3HgZDCaolheFYBXWzMrEHAi/ZxyQUA+n/+KOIXKwvGAmJp9zjGFYcPGhA
5DOMKKKIIkoKherZDepnD3j5xdydO4yz1aIGHes/N3dVGW7eDXaFRUdNReS/
HBw88COfbjVyqVEj3036C5YRQmMaay0Uxb76eMpHVsvE0GIAQc0MGrbZ22+N
MOHOakhqdlSqYYH6ou2xy2mGQBejDrVGekjc40BFXyCmOpwPbAGaWfTY/FOL
hBv2hqL/Zt+e9LTaRjPG4kifA84XemNDcnFfM8LOxUiY6Fb/g5F+f/5vr+jU
Yd7cL+G3Qwf3s2w5CF28McOgSR9O5FcVLvx9Wmot+BNms/pfVp0MRAGLmh+G
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
NeKCPZyYBZy41xxLQDpimbKDy8yYAzG9/NILx48d0e4yRcIQ6/Xr1rByjdoN
b1QAO18ar4IeQustWVAvOwsEPXTI6wagIig42JWbM+fLz13CBhKYnuBePDKk
pN+X569fry7vaAa3zYB4Td7XZqyx/OxUY++TPkEFKMRqasa7v+9j63bj2PoS
dglEJnOOu/za/8YOXX/dNXffdcczTz/59lsjJn/04Yzpn86cMY3PRV8vHDN6
5CP9+jICXJkZ4SJJ9O2UQTIiiE+D/Kd9OtUYBvsBsYi++3bfk3/pn1Kl0ml3
nCWmwAwmr+YJiH2EHtBbyNP9phuMH1A5WtPeIlFP9H+Me8G9//j7f8K9/IRP
WJrPbl27nEM5O+cKGTmv3z5kqbN2rM1lyRf0MpLzq4XzQwJa6P2n5CzGmG0E
bLWqVfr26YUQQ4LxDBgJ3+zb41bFnt27WjRvatMKnu3Qwf0cW3y7ebMmsTjX
+SJJH9iIIoooonJMwpYQ3bd40VdBcSOQV65YhmYxMFuMk5mRhsR2sxi7AsGO
ojGM87RkwKEIHeBsKCmGhG1hjTjyuFXL5ucQNjxTMhcJW9dKIHzu27vbJtqM
Z96unShobF3D9jTyC/Q6SfornBEZF8qbzpo5XfNP5wCvDMP4dnZ2xtQsg2+X
aM/EEnIbDbOM5UfruXz0EriIBNGxOCBNYj6pLHRFpw6mNrNOc3Zsww5kIvjk
+ObuN7K0RbWJjWUL7DvDt7wytiV42fjtfznvvB63dMe2NK3D9Ys0wN4T37nl
bZ0r/qxY4QLgRkm/LwuHO27buhkG48FsLmMqRM/beuilETUri5LOYAUoxCrA
P5J9AN2gdDuMJ2ci6mVnNWva+K47b+/T+6EXnn8WWfrF57M3rF+Ldc0rY1Hr
oTIHxOB8vnTemSwG57prr2bRGcqe9BcvI+Qgi2RRZwBV9KCDyaex1jtztmek
p7IKjNMoAJyVFcZpoy6ZOJZMqNIG47W7vA0jb79m5D8ryzJiqbVrcgK3btum
1d49efbAshkWs4aaYPGClRo3ahDV2S52YhYuql6VT925zALra93a1ShltNV3
3+5j5BFu+3/8vt/DfRJLDai/gvw/0/sWhp3hHyQzGBmheuL4URb17rxcjg8e
+BFWvOnG61n7MImR/3CIxHPCljaoisK2I4oooohKmlT9ISwQS8zNGj3eYDog
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
6sr+8pWWS0VWZjrPlOqZG/mkOznH+cNCvg8MH3n+esr6Rs3mztR8Xm62WLNG
jfV/g8FgMBgMBkMlqMRm20WiRqp84fmxiPewMGROqTILC3Y9/dSIyIjGvtXb
SmeqUFdOdzbotltgELBmKDMFpuTLli6GhkBYEJLDQoPl1ynLbeUJ8lX5KUn7
dm0WLpiHJL9i+dKPJ37YqWP7Zk0T42KjpW10mZdpjkpsSiE+vBGvRou8+MI4
OIIU7rSUEhspJvOSxQshzjyzbp1a/AvkyGW/VeX4qh5ONFDh1193LW20csWy
4qICRlN2VgbdVbnDWrdqIStimolm1faOKB7jUY4G8tI9/V8NT2tYn8/Zs2as
W5unttYOCVR64LUDuCY+Lkb+y5XYFWjs0AcUAJw/UuRtn1fUX0dF3JkDBoWL
Y69w/T4vrcFgMBgMBoPBb1ERd0aKRmjnE5kTkRIqt3jRgm1/bIGHIqJDS/fs
LkEWPadTh5DgQB/6RYpTyBeYQtaudQpi/6KF86XCQzbmE/446eOP+BWWEdGk
UWBAXUXWlW0qha8fHurD+s/Nydq1c3t6WkpB/k4oP9QJEn3RhedHR0U4p2xI
Lm1RCZdB+H/8sUfmzJ6ZmrKa1pGLOo+Vm7OUzvzUr++lPBOaANdWVDEXflk8
3Vf1cKKhebMkyDKtw4CiaeBx8nfma9s2rWgURh/dVaxZ1t30VcXZ1mYR4IBe
oRDr3bp2Vi42pX7myfBE/oKOERoSxL20eOV7XOoAl1x84dAH77/s0t6KeODz
ivrrqIQ7MzOIOzMijDsb/BOK6SEvHrf9pQ1PGZPwqdTk6sku+sehe6F6jmwt
5LhkfjqGQ+EEA1k3ydKJrkLn0VatJlVPmfmTMhToeqe/AEy5LE/K8iAdB93P
ZAyDwVCDIZUWcya8UjGBb7rxeoUhQgRF8lT6p3fGv5UQHwsblXwumV+iviJI
V3c5pRbXdM0sDd9smpRA8RQVHMhT+7Zbb2bOryTOsK9wTqcOOdmZYk97dpdI
oQ/xgURnZqTNnzf322++Gv/2m88+8/T9Q+698Ybr+l7WB/571ZX9b7n5xkce
Hvbaqy9/9eXnU6dM5h3Xrc3jLsUB42li4kDJxbZv2/rRh+9DoJTQ1ucvfoKA
LidSJpsBiRZ8/vjDd2vycvbuKZXlMO0ljXOf3hcnJsQx9LjeeSJU8nyejPSi
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
SJ7WjojWzgAAAJDoL/RGNffmc5l0KpI5Kei4rp0BAAAgkdxxjihOPgZ981Q7
AwAAQCJ6OY6lYqFWLYfk9ec+950BAADgv/oLvclGYdHFyZPbPbmMb1QBAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAANz0b3cQ1c0=
    "], {{0, 1079.}, {1300., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->72],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{1300., 1079.},
  PlotRange->{{0, 1300.}, {0, 1079.}}]], "Input",ExpressionUUID->"c2f578c7-\
00d8-4123-bb54-186f656f9fc7"],

Cell["\<\
When determinant of (I-A) is not 0, then the matrix would be valid.\
\>", "Text",
 CellChangeTimes->{{3.860134810524868*^9, 
  3.8601348726520414`*^9}},ExpressionUUID->"217938b0-db08-4025-bbb6-\
1e21b120f1d1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"IdentityMatrix", "[", "8", "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.8601349461474776`*^9, 3.8601349560406017`*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"17af4893-352a-4293-9194-3696759a9f85"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "1", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "1", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "1", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "1", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "1", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "1", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.8601349495911407`*^9, 3.8601349569650545`*^9}},
 CellLabel->
  "Out[124]//MatrixForm=",ExpressionUUID->"d92ed510-9f4a-41f4-ac99-\
eac6c555b594"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Det", "[", 
  RowBox[{"Inverse", "[", 
   RowBox[{
    TagBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"1", "0", "0", "0", "0", "0", "0", "0"},
        {"0", "1", "0", "0", "0", "0", "0", "0"},
        {"0", "0", "1", "0", "0", "0", "0", "0"},
        {"0", "0", "0", "1", "0", "0", "0", "0"},
        {"0", "0", "0", "0", "1", "0", "0", "0"},
        {"0", "0", "0", "0", "0", "1", "0", "0"},
        {"0", "0", "0", "0", "0", "0", "1", "0"},
        {"0", "0", "0", "0", "0", "0", "0", "1"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}],
     Function[BoxForm`e$, 
      MatrixForm[BoxForm`e$]]], "-", 
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "1", "1", "0", "1", "0", "0", "0"},
       {"1", "0", "0", "1", "0", "1", "0", "0"},
       {"1", "0", "0", "1", "0", "0", "1", "0"},
       {"0", "1", "1", "0", "0", "0", "0", "1"},
       {"1", "0", "0", "0", "0", "1", "1", "0"},
       {"0", "1", "0", "0", "1", "0", "0", "1"},
       {"0", "0", "1", "0", "1", "0", "0", "1"},
       {"0", "0", "0", "1", "0", "1", "1", "0"}
      }], "\[NoBreak]", ")"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.860134874449633*^9, 3.8601348768265314`*^9}, 
   3.8601349071942325`*^9, {3.8601349665637903`*^9, 3.8601349909285*^9}, 
   3.860135092006658*^9},
 CellLabel->
  "In[128]:=",ExpressionUUID->"1b411abe-74e9-40a8-a5da-73141de7254a"],

Cell[BoxData[
 TemplateBox[{
  "Inverse", "sing", 
   "\"Matrix \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{\\\"1\\\", \\\",\\\", RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \
RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"0\\\", \\\",\\\", \
RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"0\\\", \\\",\\\", \\\"0\\\", \
\\\",\\\", \\\"0\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"1\\\", \\\",\\\", \
\\\"0\\\", \\\",\\\", RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"0\\\", \
\\\",\\\", RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"0\\\", \\\",\\\", \
\\\"0\\\"}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"-\
\\\", \\\"1\\\"}], \\\",\\\", \\\"0\\\", \\\",\\\", \\\"1\\\", \\\",\\\", \
RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"0\\\", \\\",\\\", \\\"0\\\", \
\\\",\\\", RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"0\\\"}], \
\\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{\\\"0\\\", \\\",\\\", \
RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", RowBox[{\\\"-\\\", \\\"1\\\"}], \\\
\",\\\", \\\"1\\\", \\\",\\\", \\\"0\\\", \\\",\\\", \\\"0\\\", \\\",\\\", \\\
\"0\\\", \\\",\\\", RowBox[{\\\"-\\\", \\\"1\\\"}]}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"0\\\
\", \\\",\\\", \\\"0\\\", \\\",\\\", \\\"0\\\", \\\",\\\", \\\"1\\\", \\\",\\\
\", RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", RowBox[{\\\"-\\\", \
\\\"1\\\"}], \\\",\\\", \\\"0\\\"}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{\\\"0\\\", \\\",\\\", RowBox[{\\\"-\\\", \
\\\"1\\\"}], \\\",\\\", \\\"0\\\", \\\",\\\", \\\"0\\\", \\\",\\\", \
RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"1\\\", \\\",\\\", \\\"0\\\", \
\\\",\\\", RowBox[{\\\"-\\\", \\\"1\\\"}]}], \\\"}\\\"}], \\\",\\\", RowBox[{\
\\\"{\\\", RowBox[{\\\"0\\\", \\\",\\\", \\\"0\\\", \\\",\\\", \
RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"0\\\", \\\",\\\", \
RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"0\\\", \\\",\\\", \\\"1\\\", \
\\\",\\\", RowBox[{\\\"-\\\", \\\"1\\\"}]}], \\\"}\\\"}], \\\",\\\", RowBox[{\
\\\"{\\\", RowBox[{\\\"0\\\", \\\",\\\", \\\"0\\\", \\\",\\\", \\\"0\\\", \
\\\",\\\", RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"0\\\", \\\",\\\", \
RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", RowBox[{\\\"-\\\", \\\"1\\\"}], \\\
\",\\\", \\\"1\\\"}], \\\"}\\\"}]}], \\\"}\\\"}]\\) is singular.\"", 2, 128, 
   13, 22258074638468022392, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8601349917270393`*^9, 3.8601350987280855`*^9},
 CellLabel->
  "During evaluation of \
In[128]:=",ExpressionUUID->"922cba84-d05c-4cf8-af5c-a714531cacbc"],

Cell[BoxData[
 RowBox[{"Det", "[", 
  RowBox[{"Inverse", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "1"}], ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1", ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "0", ",", "1", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "1"}], ",", "1", ",", "0", ",", "0", ",", "0", ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0", ",", "1", ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "1", ",", "0", ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", "1", ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", 
       RowBox[{"-", "1"}], ",", "0", ",", 
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], "]"}], "]"}]], "Output",
 CellChangeTimes->{3.8601349917400665`*^9, 3.8601350987350855`*^9},
 CellLabel->
  "Out[128]=",ExpressionUUID->"6910710a-31b6-488b-b8fe-19fed91b7d4f"]
}, Open  ]],

Cell["Crazy matrix is not work.", "Text",
 CellChangeTimes->{{3.860135030788478*^9, 3.8601350617936916`*^9}, {
  3.8601351148656564`*^9, 3.860135137224209*^9}, {3.86013875758399*^9, 
  3.8601387597890263`*^9}},ExpressionUUID->"84ab1cff-4b25-4c2c-a9b7-\
5dad273d01e9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{958, 973},
WindowMargins->{{Automatic, -7}, {Automatic, 0}},
PrintingCopies->1,
PrintingPageRange->{32000, 32000},
PrintingOptions->{"Magnification"->1.,
"PaperOrientation"->"Portrait",
"PaperSize"->{595.32, 841.92}},
TaggingRules->{
 "WelcomeScreenSettings" -> {"FEStarting" -> False}, "TryRealOnly" -> False},
SpellingDictionaries->{"CorrectWords"->{"zx", "Qin", "Rui", "colourable"}},
Magnification:>1.1 Inherited,
FrontEndVersion->"12.2 for Microsoft Windows (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"b008791c-16c0-4ddd-b326-17e352e14d85"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 155, 3, 249, "Title",ExpressionUUID->"e27e77bf-d6eb-48e6-9e58-965ec2a44eac"],
Cell[738, 27, 131, 3, 133, "Subtitle",ExpressionUUID->"02d40c21-725c-4117-a783-edffb919fbbd"],
Cell[872, 32, 133, 3, 79, "Subsubtitle",ExpressionUUID->"23e00274-b39b-4c57-82ae-a7b5a8ea2769"],
Cell[CellGroupData[{
Cell[1030, 39, 159, 3, 170, "Section",ExpressionUUID->"e67365e4-4428-4263-bf54-68539de6f627"],
Cell[CellGroupData[{
Cell[1214, 46, 241, 5, 137, "Subsection",ExpressionUUID->"4c5007aa-f20d-4472-a344-972dbd1caa33"],
Cell[CellGroupData[{
Cell[1480, 55, 237, 4, 114, "Subsubsection",ExpressionUUID->"62fcc24d-cb07-4ab5-8f2c-97d94f12f346"],
Cell[CellGroupData[{
Cell[1742, 63, 471, 13, 74, "Input",ExpressionUUID->"2ab6e594-7b51-4a1d-b3dc-f3b720b30d6d"],
Cell[2216, 78, 743, 22, 161, "Output",ExpressionUUID->"ffef7dba-baae-46ab-83cc-597a70e943c9"]
}, Open  ]],
Cell[2974, 103, 173, 3, 91, "Text",ExpressionUUID->"8ea3168f-be9f-4409-a261-5e8045e71deb"],
Cell[CellGroupData[{
Cell[3172, 110, 460, 11, 74, "Input",ExpressionUUID->"6c30e524-cad0-492d-bb3f-cbb0e20fb671"],
Cell[3635, 123, 669, 20, 161, "Output",ExpressionUUID->"de8e4781-0bf2-4e64-a07a-01bc093be571"]
}, Open  ]],
Cell[4319, 146, 167, 3, 91, "Text",ExpressionUUID->"fa6c51c9-ba88-470c-a6af-e6bfc8cdd09d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4523, 154, 282, 5, 114, "Subsubsection",ExpressionUUID->"2e4e3d6f-2c4e-4356-9aee-281a4ce97271"],
Cell[4808, 161, 155, 3, 91, "Text",ExpressionUUID->"7c9c8131-00fb-4aa0-b3a0-d98735a4bf0d"],
Cell[CellGroupData[{
Cell[4988, 168, 212, 4, 74, "Input",ExpressionUUID->"11ec6d93-331f-4a78-ad05-25520ee379b3"],
Cell[5203, 174, 803, 25, 161, "Output",ExpressionUUID->"25d55ac6-c38f-4959-b73e-71270f84cf54"]
}, Open  ]],
Cell[6021, 202, 163, 3, 91, "Text",ExpressionUUID->"aed58a9e-e4a6-467d-a121-273fa5c214ca"],
Cell[CellGroupData[{
Cell[6209, 209, 210, 4, 74, "Input",ExpressionUUID->"337e2f0f-362e-41fe-af3d-16d8778a8fba"],
Cell[6422, 215, 908, 28, 624, "Output",ExpressionUUID->"95a74868-dde1-423d-afb0-38c7cb0631d4"]
}, Open  ]],
Cell[7345, 246, 185, 3, 324, "Text",ExpressionUUID->"fef59be1-9e4e-4150-baa1-6bcfe0488674"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7567, 254, 263, 4, 407, "Subsubsection",ExpressionUUID->"359bf11d-cfc1-4339-be7f-6f5f5a371586"],
Cell[7833, 260, 165, 3, 324, "Text",ExpressionUUID->"41c6c7be-c02f-4ff0-8e32-78914536e588"],
Cell[CellGroupData[{
Cell[8023, 267, 245, 4, 266, "Input",ExpressionUUID->"77b4903c-f03c-4540-b7ec-d87fcdf1caf8"],
Cell[8271, 273, 1149, 37, 740, "Output",ExpressionUUID->"23e81b30-d177-4a44-bf66-d033e52e902c"]
}, Open  ]],
Cell[9435, 313, 324, 7, 541, "Text",ExpressionUUID->"fe269254-4d87-439a-88cd-33f96244ac59"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9796, 325, 282, 4, 407, "Subsubsection",ExpressionUUID->"0912b389-0ba6-417e-bbb2-b816ccda4586"],
Cell[10081, 331, 197, 3, 324, "Text",ExpressionUUID->"1872ec5d-499d-4f50-bf57-1365f8d24602"],
Cell[CellGroupData[{
Cell[10303, 338, 871, 24, 457, "Input",ExpressionUUID->"aaf0d5c2-6a3c-4ed8-a6dd-4be008a72b7f"],
Cell[11177, 364, 692, 21, 574, "Output",ExpressionUUID->"418c2448-3f73-4c60-8fea-7e2ae79d3532"],
Cell[11872, 387, 690, 21, 574, "Output",ExpressionUUID->"4885905e-70b7-4174-9fe9-5f73ec086d7d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12599, 413, 374, 8, 266, "Input",ExpressionUUID->"a6797d8c-958a-4c42-851a-5961eee59825"],
Cell[12976, 423, 228, 3, 299, "Output",ExpressionUUID->"65826825-5d56-4947-a375-f539785459d6"]
}, Open  ]],
Cell[13219, 429, 200, 3, 324, "Text",ExpressionUUID->"bd16d01a-114e-4178-b063-fc70f0abb536"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[13468, 438, 381, 9, 740, "Subsection",ExpressionUUID->"2db9910b-6103-4983-be04-06025f66685d"],
Cell[13852, 449, 165, 3, 324, "Text",ExpressionUUID->"08c40abc-9d21-4470-948b-133323c204bd"],
Cell[CellGroupData[{
Cell[14042, 456, 659, 19, 457, "Input",ExpressionUUID->"8ca82b7f-93f6-42ce-93c0-85a47e300c50"],
Cell[14704, 477, 388, 10, 299, "Output",ExpressionUUID->"811e5211-7174-4a3f-9bf9-4b8a81c23ac9"],
Cell[15095, 489, 387, 10, 299, "Output",ExpressionUUID->"71ee264c-3478-4e5a-9cab-5127fe0a3aa8"]
}, Open  ]],
Cell[15497, 502, 204, 3, 324, "Text",ExpressionUUID->"fbeee1e8-6eeb-451d-adf7-93b92590f144"],
Cell[CellGroupData[{
Cell[15726, 509, 1952, 61, 457, "Input",ExpressionUUID->"8e15a36f-d5c8-4c4d-99f9-995aad908ad0"],
Cell[17681, 572, 1816, 53, 441, "Output",ExpressionUUID->"fac61bfb-da12-4090-8fbd-9f6f6b40a6cf"],
Cell[19500, 627, 1931, 57, 441, "Output",ExpressionUUID->"6d1b0f22-40cb-416d-b4b7-6fcdddf8048b"]
}, Open  ]],
Cell[21446, 687, 173, 3, 324, "Text",ExpressionUUID->"b188d4de-0d8b-46aa-b0e8-cdbc38faa3b6"],
Cell[CellGroupData[{
Cell[21644, 694, 632, 16, 266, "Input",ExpressionUUID->"859a2bea-0534-4d3e-9bed-c5e7ad42018e"],
Cell[22279, 712, 384, 9, 299, "Output",ExpressionUUID->"3b7f674a-7fa0-440d-b1b4-1691e2f3fbfe"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[22712, 727, 319, 5, 491, "Subsection",ExpressionUUID->"1bfb4bd3-df4a-475d-810f-44b270f4d879"],
Cell[CellGroupData[{
Cell[23056, 736, 299, 6, 407, "Subsubsection",ExpressionUUID->"d7766c2e-963b-45d5-8cce-128472a8df48"],
Cell[CellGroupData[{
Cell[23380, 746, 1459, 44, 266, "Input",ExpressionUUID->"5d5afa53-180b-4733-9ba9-ed7dd66bd250"],
Cell[24842, 792, 2604, 74, 907, "Output",ExpressionUUID->"92cecdd3-58f7-4e2e-b297-11382dc6226e"]
}, Open  ]],
Cell[27461, 869, 357, 7, 324, "Text",ExpressionUUID->"f651d0a6-b795-43c8-9686-ad876de82521"],
Cell[CellGroupData[{
Cell[27843, 880, 1181, 36, 266, "Input",ExpressionUUID->"4c0d5522-2e0c-4d6d-baa2-5ff25d0e5a9a"],
Cell[29027, 918, 2456, 68, 907, "Output",ExpressionUUID->"43c6f1df-032e-44d6-bc5e-2642e0ba5268"]
}, Open  ]],
Cell[CellGroupData[{
Cell[31520, 991, 210, 3, 266, "Input",ExpressionUUID->"51a0447b-9cad-4ee7-b767-0aff98a799ee"],
Cell[31733, 996, 4913, 135, 774, "Output",ExpressionUUID->"d2fe3696-8747-4243-9157-0dd6d708f204"]
}, Open  ]],
Cell[36661, 1134, 178, 3, 324, "Text",ExpressionUUID->"2c30f02d-b07b-42eb-890c-c0d14ec0d3e8"],
Cell[36842, 1139, 194, 4, 324, "Text",ExpressionUUID->"a14f1a90-3edf-41fa-95ae-9fa4321648b9"],
Cell[CellGroupData[{
Cell[37061, 1147, 933, 31, 266, "Input",ExpressionUUID->"2209323e-526a-41e0-8c13-866905654d39"],
Cell[37997, 1180, 1984, 61, 441, "Output",ExpressionUUID->"a2899632-2691-4d76-9023-451fb04b0f99"]
}, Open  ]],
Cell[39996, 1244, 172, 3, 324, "Text",ExpressionUUID->"b5ea13f0-0445-4f97-8413-ed0289824b59"],
Cell[40171, 1249, 200, 4, 324, "Text",ExpressionUUID->"e0b63d5f-48b8-4569-b306-284c484a2594"],
Cell[CellGroupData[{
Cell[40396, 1257, 1146, 35, 266, "Input",ExpressionUUID->"ecce292a-829d-456b-9807-590b60391ba7"],
Cell[41545, 1294, 715, 21, 574, "Output",ExpressionUUID->"c14ac93b-6c3b-46c0-a4bd-b96c57f6757a"]
}, Open  ]],
Cell[42275, 1318, 220, 4, 324, "Text",ExpressionUUID->"13e0e9c7-9172-4de1-9feb-a48025c236d5"],
Cell[CellGroupData[{
Cell[42520, 1326, 1121, 34, 266, "Input",ExpressionUUID->"6e73e10e-9836-428a-9862-3236dcf49cd0"],
Cell[43644, 1362, 695, 21, 574, "Output",ExpressionUUID->"381c4004-320a-412b-bfb6-93afeb9941d9"]
}, Open  ]],
Cell[44354, 1386, 201, 4, 324, "Text",ExpressionUUID->"9526bc67-3b2e-4cd9-bfbb-6a8c981aeaff"],
Cell[CellGroupData[{
Cell[44580, 1394, 1242, 37, 266, "Input",ExpressionUUID->"5f017020-d4df-4453-a224-08097e2d7ba1"],
Cell[45825, 1433, 814, 24, 574, "Output",ExpressionUUID->"9a628bba-378a-46d9-82ef-941ecc9eba9f"]
}, Open  ]],
Cell[46654, 1460, 204, 4, 324, "Text",ExpressionUUID->"092f3460-a9b3-4e40-a7d4-3b5a61d423fa"],
Cell[CellGroupData[{
Cell[46883, 1468, 1200, 37, 266, "Input",ExpressionUUID->"361146b3-d1ae-49de-b5b2-a6f22f315007"],
Cell[48086, 1507, 664, 20, 574, "Output",ExpressionUUID->"59c9448e-3549-4468-bab5-3dd13eb60e03"]
}, Open  ]],
Cell[48765, 1530, 194, 4, 324, "Text",ExpressionUUID->"9e650dbb-cae4-4bca-9dea-9968f4bb86f6"],
Cell[CellGroupData[{
Cell[48984, 1538, 490, 12, 266, "Input",ExpressionUUID->"8d9a125f-f9f9-4257-be07-e89e79858d98"],
Cell[49477, 1552, 5451, 153, 774, "Output",ExpressionUUID->"38e70ff4-7055-453a-846c-abf32e195b37"]
}, Open  ]],
Cell[54943, 1708, 288, 7, 324, "Text",ExpressionUUID->"d22d26aa-891a-4848-bad9-c7b45d544410"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55268, 1720, 227, 3, 407, "Subsubsection",ExpressionUUID->"d2e6632c-2b2a-4814-8d6b-7b7f785a2269"],
Cell[55498, 1725, 200, 3, 324, "Text",ExpressionUUID->"84c7b588-0ea0-44c0-a1fe-05acfe03ee43"],
Cell[CellGroupData[{
Cell[55723, 1732, 1433, 43, 457, "Input",ExpressionUUID->"0465d67d-08cb-4df7-9a54-806ec78ed1aa"],
Cell[57159, 1777, 2561, 73, 907, "Output",ExpressionUUID->"58e2a30a-88c7-480f-b7ae-ca6ee31a2c43"],
Cell[59723, 1852, 2561, 73, 907, "Output",ExpressionUUID->"00f87cd2-bf61-4731-a363-fec7007ac87c"]
}, Open  ]],
Cell[62299, 1928, 162, 3, 324, "Text",ExpressionUUID->"f231073a-af4b-401b-b8d7-863a0f8be142"],
Cell[62464, 1933, 153, 3, 324, "Text",ExpressionUUID->"72b03644-9d2f-4478-aa2d-7b411a1fc0a4"],
Cell[62620, 1938, 174, 4, 324, "Text",ExpressionUUID->"5353afa0-5938-4c05-9562-da9114e75f99"],
Cell[CellGroupData[{
Cell[62819, 1946, 2358, 64, 407, "Input",ExpressionUUID->"3c63288e-5445-4cd9-85c0-070bbaed1766"],
Cell[65180, 2012, 1457, 44, 574, "Output",ExpressionUUID->"70e26b82-abe2-479b-8099-57a20c3faa80"]
}, Open  ]],
Cell[66652, 2059, 175, 4, 324, "Text",ExpressionUUID->"094e19f5-8db6-44b4-a650-9dc86f61e668"],
Cell[CellGroupData[{
Cell[66852, 2067, 2178, 60, 407, "Input",ExpressionUUID->"05b3ee2e-2ba8-477d-94c0-b3106a3be783"],
Cell[69033, 2129, 1306, 40, 574, "Output",ExpressionUUID->"680009a7-9573-41f5-a03f-2cb541cccf0a"]
}, Open  ]],
Cell[70354, 2172, 175, 4, 324, "Text",ExpressionUUID->"24a29637-c7e2-4417-a3c3-c845983728a7"],
Cell[CellGroupData[{
Cell[70554, 2180, 2266, 64, 407, "Input",ExpressionUUID->"97bb5c67-b1a3-480f-81b9-83eae45a00fc"],
Cell[72823, 2246, 1351, 42, 574, "Output",ExpressionUUID->"e3f62ab9-3b09-40f9-8c7e-57ed3ff232ad"]
}, Open  ]],
Cell[74189, 2291, 176, 4, 324, "Text",ExpressionUUID->"23410603-03fb-4010-93b8-1ef8182d8dcf"],
Cell[CellGroupData[{
Cell[74390, 2299, 2265, 62, 407, "Input",ExpressionUUID->"6b9db27e-6169-471e-b55e-77f8f64b272f"],
Cell[76658, 2363, 1352, 42, 574, "Output",ExpressionUUID->"8b917aed-4d65-40e6-aa9c-0a929ba87d52"]
}, Open  ]],
Cell[78025, 2408, 168, 4, 324, "Text",ExpressionUUID->"d4753f9d-a5f1-48ba-824b-fa5e3b8c458f"],
Cell[CellGroupData[{
Cell[78218, 2416, 445, 11, 266, "Input",ExpressionUUID->"c851af55-15f6-4d4d-ad5f-a174374af87b"],
Cell[78666, 2429, 5996, 169, 907, "Output",ExpressionUUID->"e1620bd2-357c-42d1-8eba-ccf6bfdc3304"]
}, Open  ]],
Cell[84677, 2601, 191, 3, 324, "Text",ExpressionUUID->"3b85d190-5f2f-4c61-b7de-6c60a9554c5e"],
Cell[84871, 2606, 983, 29, 824, "Input",ExpressionUUID->"31a85384-e863-4b89-8cdb-b689aaabd82b"],
Cell[CellGroupData[{
Cell[85879, 2639, 1261, 34, 457, "Input",ExpressionUUID->"0f13b376-3772-4000-911a-8856ee3d6276"],
Cell[87143, 2675, 1325, 38, 466, "Output",ExpressionUUID->"8fd5bafe-e0f6-49f4-8cf3-6ad253fc034e"]
}, Open  ]],
Cell[88483, 2716, 653, 16, 324, "Text",ExpressionUUID->"d5acf192-2b16-4853-81f2-9f9a6398cc0f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[89185, 2738, 236, 5, 491, "Subsection",ExpressionUUID->"faff6bc3-eaa8-4597-a625-8205835061e7"],
Cell[89424, 2745, 173, 3, 324, "Text",ExpressionUUID->"3e5058d4-7e42-4585-aea3-ae31b9cc9d8f"],
Cell[CellGroupData[{
Cell[89622, 2752, 1336, 42, 266, "Input",ExpressionUUID->"026341d4-031b-4324-a06f-49bc0b6e47ff"],
Cell[90961, 2796, 2564, 73, 907, "Output",ExpressionUUID->"f7ec9421-fcda-432f-a332-e216a5687a96"]
}, Open  ]],
Cell[CellGroupData[{
Cell[93562, 2874, 1401, 43, 266, "Input",ExpressionUUID->"c9947411-b67f-4ec5-81c4-44b84ec84e69"],
Cell[94966, 2919, 2538, 73, 907, "Output",ExpressionUUID->"1cee3f1b-9415-461f-afc5-8899dff35300"]
}, Open  ]],
Cell[97519, 2995, 172, 3, 324, "Text",ExpressionUUID->"d9588e94-324a-4610-8521-977daf8722d1"],
Cell[CellGroupData[{
Cell[97716, 3002, 5249, 142, 473, "Input",ExpressionUUID->"68ff2236-87fb-4360-99bf-eb89b8187c90"],
Cell[102968, 3146, 14756, 411, 1573, "Output",ExpressionUUID->"10d215e0-ea66-47b7-99ad-a8a043e4d719"]
}, Open  ]],
Cell[117739, 3560, 180, 3, 324, "Text",ExpressionUUID->"f28fbc66-8a71-4aff-b301-134ce187b598"],
Cell[CellGroupData[{
Cell[117944, 3567, 5249, 142, 724, "Input",ExpressionUUID->"f8977a6f-a6cf-4ab6-84ad-66f272cfff95"],
Cell[123196, 3711, 14734, 411, 1573, "Output",ExpressionUUID->"a511f5e3-0643-4670-9c3c-762c3681aeb8"]
}, Open  ]],
Cell[137945, 4125, 232, 6, 324, "Text",ExpressionUUID->"9c84cbd3-c8a4-42ca-bcaa-3f1aead2a8b3"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[138226, 4137, 177, 3, 607, "Section",ExpressionUUID->"3de196c6-9f09-44d0-82d3-b32c380affa8"],
Cell[CellGroupData[{
Cell[138428, 4144, 127, 3, 491, "Subsection",ExpressionUUID->"64a0a638-68bc-4511-b0e3-b859884607e5"],
Cell[CellGroupData[{
Cell[138580, 4151, 649, 16, 407, "Input",ExpressionUUID->"269c623b-fd7f-4943-a522-9b9e8871f3d8"],
Cell[139232, 4169, 644, 19, 574, "Output",ExpressionUUID->"a474241e-5dd9-4a54-bd81-19ee78425d37"]
}, Open  ]],
Cell[139891, 4191, 580, 18, 324, "Text",ExpressionUUID->"1b988c9e-be06-4b16-a27c-e0f2c6d1b50d"],
Cell[CellGroupData[{
Cell[140496, 4213, 1094, 31, 407, "Input",ExpressionUUID->"864e59c6-d0c3-4d50-bac6-aa6259e882f6"],
Cell[141593, 4246, 1136, 37, 574, "Output",ExpressionUUID->"e5160b70-1e95-4ada-9686-81083236b1da"]
}, Open  ]],
Cell[142744, 4286, 158, 3, 324, "Text",ExpressionUUID->"dda022db-bd47-499a-bb4e-b651e3ff4933"],
Cell[142905, 4291, 728, 19, 407, "Input",ExpressionUUID->"b173a24d-43a2-4874-9817-1b9f9f2e8d3a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143670, 4315, 127, 3, 491, "Subsection",ExpressionUUID->"23fae68a-716a-4770-9c99-6d2dc09a7a54"],
Cell[CellGroupData[{
Cell[143822, 4322, 285, 4, 382, "WolframAlphaLong",ExpressionUUID->"42fe7143-2f55-404b-80da-c56889711dd8"],
Cell[144110, 4328, 37986, 754, 1824, "Print",ExpressionUUID->"41649053-d675-4b95-a868-92dcc7bac8fa"]
}, Open  ]],
Cell[182111, 5085, 1648, 44, 197, "Input",ExpressionUUID->"25b14c38-ec1e-49b1-9ab2-5f0247289004"],
Cell[183762, 5131, 730, 23, 137, "Text",ExpressionUUID->"6f715f98-0475-451c-a834-6952d247e0c0"],
Cell[184495, 5156, 159, 3, 59, "Text",ExpressionUUID->"7d2ce8cf-3731-4996-bc1e-2de0143a850b"],
Cell[184657, 5161, 1140, 34, 84, "Input",ExpressionUUID->"791ca3cf-956e-4d43-ba67-39f725ce687a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[185834, 5200, 127, 3, 90, "Subsection",ExpressionUUID->"295fb6f7-b42d-4e68-a264-fa289aae500e"],
Cell[CellGroupData[{
Cell[185986, 5207, 569, 13, 48, "Input",ExpressionUUID->"cc40ee84-3409-4d20-b348-8b2c00dbf091"],
Cell[186558, 5222, 913, 29, 111, "Output",ExpressionUUID->"d97a0b11-d2f8-4d4e-9326-ce847142af00"]
}, Open  ]],
Cell[187486, 5254, 168, 4, 59, "Text",ExpressionUUID->"62cb2fc3-8f48-466b-9765-64c5decbac17"],
Cell[CellGroupData[{
Cell[187679, 5262, 424, 10, 48, "Input",ExpressionUUID->"6e0e01b8-795a-4165-8ebc-64c73f0af16c"],
Cell[188106, 5274, 339, 8, 55, "Output",ExpressionUUID->"31efe28f-4f8d-486b-97ea-239226ce7d2e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[188482, 5287, 649, 12, 117, "Input",ExpressionUUID->"b4f9627f-145e-4896-aa0c-09865562140f"],
Cell[189134, 5301, 330, 5, 55, "Output",ExpressionUUID->"c38bd2ac-7320-4159-ad67-26259393b5bd"],
Cell[189467, 5308, 329, 5, 55, "Output",ExpressionUUID->"f555dbbf-e768-49e7-8e78-50319c3cf439"],
Cell[189799, 5315, 329, 5, 55, "Output",ExpressionUUID->"4be8d9a1-6c7b-4450-8b15-31eda11a626d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[190189, 5327, 164, 3, 111, "Section",ExpressionUUID->"8f4e43e4-44a3-44d1-9fbf-0a3f46528203"],
Cell[CellGroupData[{
Cell[190378, 5334, 275, 7, 59, "Subsection",ExpressionUUID->"4f2313db-2385-4426-910b-410cb7ff7d33"],
Cell[CellGroupData[{
Cell[190678, 5345, 216, 4, 49, "Subsubsection",ExpressionUUID->"62fa6ffe-808b-4b24-a468-00796bedd784"],
Cell[190897, 5351, 478, 8, 65, "Text",ExpressionUUID->"ebdf6ba5-d037-495e-97c2-89ba6e847270"]
}, Open  ]],
Cell[CellGroupData[{
Cell[191412, 5364, 387, 11, 49, "Subsubsection",ExpressionUUID->"3a418828-c306-47e3-bf50-8aa4bff38fb8"],
Cell[CellGroupData[{
Cell[191824, 5379, 613, 17, 87, "Input",ExpressionUUID->"7dcfd81c-d837-410f-82a4-d16c75adfeb1"],
Cell[192440, 5398, 716, 21, 107, "Output",ExpressionUUID->"d56087ac-8533-46ee-a936-3a0f8574d2fc"]
}, Open  ]],
Cell[193171, 5422, 125958, 2070, 427, "Text",ExpressionUUID->"6fac33eb-e7d6-4f1a-8418-24715178b18c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[319166, 7497, 393, 11, 49, "Subsubsection",ExpressionUUID->"f7affd16-c3eb-44df-b7f4-bed205bedb75"],
Cell[CellGroupData[{
Cell[319584, 7512, 774, 22, 87, "Input",ExpressionUUID->"dac2eb41-6103-4863-a6ed-d6252f6cd5a2"],
Cell[320361, 7536, 720, 21, 381, "Output",ExpressionUUID->"880db87f-de5d-4000-8bf6-851d2ceb5c99"]
}, Open  ]],
Cell[321096, 7560, 100836, 1661, 1419, "Text",ExpressionUUID->"f0680c42-277a-4d46-bb38-9c4c50f24928"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[421981, 9227, 263, 6, 317, "Subsection",ExpressionUUID->"f3b867fa-1fc2-41d7-b19f-a6c49c769253"],
Cell[422247, 9235, 160369, 2637, 1512, "Text",ExpressionUUID->"bc8a57ed-e81a-4b2f-900c-6f6c6f10e078"],
Cell[582619, 11874, 253, 4, 91, "Text",ExpressionUUID->"6961e85d-4d26-4494-bc68-ceb1512d0d3a"],
Cell[582875, 11880, 389, 11, 203, "Input",ExpressionUUID->"ec548450-eca8-486d-b990-d01c1fcc7fae"],
Cell[CellGroupData[{
Cell[583289, 11895, 393, 9, 74, "Input",ExpressionUUID->"98067f90-897f-49fe-a0b0-ecf4d480e425"],
Cell[583685, 11906, 137946, 3556, 1703, "Output",ExpressionUUID->"4c2d776e-9dde-4dc6-b35d-d1c63a121d8e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[721680, 15468, 152, 3, 137, "Subsection",ExpressionUUID->"e72b5184-ee71-40df-b5b6-acdae2bc120d"],
Cell[CellGroupData[{
Cell[721857, 15475, 276, 6, 182, "Subsubsection",ExpressionUUID->"253eef0e-7318-43d8-a38d-4bb91506120e"],
Cell[CellGroupData[{
Cell[722158, 15485, 251, 4, 74, "Input",ExpressionUUID->"ee9c8466-5f4f-4246-a3e8-c50d3b5f90a0"],
Cell[722412, 15491, 720, 21, 249, "Output",ExpressionUUID->"3ac4364e-56e5-4cc2-b4dc-7f61f3d6e0d0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[723169, 15517, 339, 7, 74, "Input",ExpressionUUID->"5bdbe935-ceff-4d07-b28d-9e0ac67e6238"],
Cell[723511, 15526, 717, 21, 249, "Output",ExpressionUUID->"b73fdd60-fa5b-459a-a6d4-6cbea422cc1c"]
}, Open  ]],
Cell[724243, 15550, 150, 3, 91, "Text",ExpressionUUID->"f535d1db-37e5-4a21-91af-ce2bfefc2bbd"],
Cell[CellGroupData[{
Cell[724418, 15557, 1355, 38, 203, "Input",ExpressionUUID->"b35b1222-14b1-41de-b420-0d1c9fcdb820"],
Cell[725776, 15597, 720, 21, 249, "Output",ExpressionUUID->"9788c209-5b1b-4682-8238-9a4d6c2806c2"]
}, Open  ]],
Cell[726511, 15621, 563, 10, 91, "Text",ExpressionUUID->"f33fad9b-4ea5-495b-b72d-0e3760adb0c5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[727111, 15636, 269, 6, 182, "Subsubsection",ExpressionUUID->"c6d347a3-e125-4c1b-b40d-e174d65d6cf8"],
Cell[727383, 15644, 415, 8, 151, "Text",ExpressionUUID->"cf522400-dd41-4478-be0d-7d5c495861a0"],
Cell[CellGroupData[{
Cell[727823, 15656, 956, 25, 203, "Input",ExpressionUUID->"df3a47e9-1ef2-43f6-ba29-9ebc8e775c37"],
Cell[728782, 15683, 825, 23, 249, "Output",ExpressionUUID->"e6326623-00c3-420a-942f-f05333454df0"]
}, Open  ]],
Cell[729622, 15709, 242, 6, 91, "Text",ExpressionUUID->"7b292976-c39d-4788-8a66-aecef884071e"],
Cell[CellGroupData[{
Cell[729889, 15719, 851, 22, 203, "Input",ExpressionUUID->"b6a15e0b-e738-45a5-9332-c80ce1c3a466"],
Cell[730743, 15743, 694, 21, 249, "Output",ExpressionUUID->"5fb318ba-390a-4005-bd69-334f46c61061"]
}, Open  ]],
Cell[731452, 15767, 459, 8, 151, "Text",ExpressionUUID->"f84773b4-736b-452f-9a41-60bcc7879a3e"],
Cell[CellGroupData[{
Cell[731936, 15779, 854, 23, 203, "Input",ExpressionUUID->"400926a8-146a-4a78-91d1-90b91ab8bb30"],
Cell[732793, 15804, 845, 21, 249, "Output",ExpressionUUID->"e5ba1882-4706-4ec7-bd3d-2bc0d8ceec88"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[733699, 15832, 227, 5, 137, "Subsection",ExpressionUUID->"efaef18d-82af-4684-a13a-12d7f38676df"],
Cell[CellGroupData[{
Cell[733951, 15841, 209, 4, 114, "Subsubsection",ExpressionUUID->"c303c7d6-90fa-4fbc-b282-92c9f5783bcc"],
Cell[734163, 15847, 777, 16, 380, "Input",ExpressionUUID->"9e3c7f85-ac7c-46eb-9ea9-31121e4b3f71"]
}, Open  ]],
Cell[CellGroupData[{
Cell[734977, 15868, 172, 3, 114, "Subsubsection",ExpressionUUID->"219f0791-eadc-4878-95ff-e2611cb02e7e"],
Cell[CellGroupData[{
Cell[735174, 15875, 1609, 35, 380, "Input",ExpressionUUID->"d63b843f-5d91-4845-805c-21e0b2ee930b"],
Cell[736786, 15912, 149, 2, 84, "Output",ExpressionUUID->"859fd13d-8832-4214-ae05-ac1037b42830"]
}, Open  ]],
Cell[736950, 15917, 178, 3, 91, "Text",ExpressionUUID->"b12d0715-3f29-4759-af82-6858ffa967a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[737165, 15925, 178, 3, 114, "Subsubsection",ExpressionUUID->"e5bb1416-e288-450d-ae9c-be8dc7ef7ffe"],
Cell[CellGroupData[{
Cell[737368, 15932, 869, 20, 380, "Input",ExpressionUUID->"7e0f3575-b858-406f-b209-6b25cf395691"],
Cell[738240, 15954, 1110, 26, 427, "Output",ExpressionUUID->"824cf8eb-b4e3-47cb-baad-c91dd7eeac3e"]
}, Open  ]],
Cell[739365, 15983, 221, 4, 91, "Text",ExpressionUUID->"cc0c3253-d11f-4ce6-8c58-767a8b92e9e3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[739623, 15992, 179, 3, 114, "Subsubsection",ExpressionUUID->"fd3eb24d-2517-4baf-a7c2-5983cae77f25"],
Cell[739805, 15997, 163, 3, 91, "Text",ExpressionUUID->"30f1d795-4f36-45d5-941a-5f400a8c6eda"],
Cell[CellGroupData[{
Cell[739993, 16004, 1581, 34, 886, "Input",ExpressionUUID->"a288fffe-cfcb-43e6-b66f-c192f9dbe0ee"],
Cell[741577, 16040, 986, 25, 427, "Output",ExpressionUUID->"20bdcacc-d601-40d4-809e-fe327d2c5706"],
Cell[742566, 16067, 986, 25, 427, "Output",ExpressionUUID->"16130492-c27b-4e57-8c8d-969243f418e6"]
}, Open  ]],
Cell[743567, 16095, 171, 3, 91, "Text",ExpressionUUID->"1927cacd-e210-454b-8790-3c032c682b42"],
Cell[CellGroupData[{
Cell[743763, 16102, 1544, 36, 380, "Input",ExpressionUUID->"c513cba9-772c-445c-9cb9-7dbd54427906"],
Cell[745310, 16140, 962, 25, 427, "Output",ExpressionUUID->"66ef1aa5-bbe4-4e6d-8d91-9a52b588f95d"]
}, Open  ]],
Cell[746287, 16168, 195, 3, 91, "Text",ExpressionUUID->"c380cf15-cac9-4177-a742-4ecea42c5cd6"],
Cell[CellGroupData[{
Cell[746507, 16175, 2520, 58, 380, "Input",ExpressionUUID->"b190e848-5d41-4ffe-a480-284ada041edd"],
Cell[749030, 16235, 1087, 27, 427, "Output",ExpressionUUID->"cc9de9ae-9f82-4fc2-bdf7-457ecaf24d91"]
}, Open  ]],
Cell[750132, 16265, 194, 3, 91, "Text",ExpressionUUID->"54eee46b-7dd0-42b8-8231-a06fa1e5b25f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[750363, 16273, 180, 3, 114, "Subsubsection",ExpressionUUID->"f5ab42d1-bbb4-45e8-aac3-846c67be68a2"],
Cell[CellGroupData[{
Cell[750568, 16280, 335, 8, 74, "Input",ExpressionUUID->"15df11ac-904a-4ad7-ab8c-eb07a4cba41b"],
Cell[750906, 16290, 1073, 38, 123, "Output",ExpressionUUID->"91bbecbf-0164-45ed-940b-3e226b35db33"]
}, Open  ]],
Cell[CellGroupData[{
Cell[752016, 16333, 1096, 39, 114, "Input",ExpressionUUID->"3bd32018-8217-4f29-91e3-c493608cf07a"],
Cell[753115, 16374, 463, 15, 123, "Output",ExpressionUUID->"ca2daaab-95d4-405f-abe3-a8bc9bc400be"]
}, Open  ]],
Cell[CellGroupData[{
Cell[753615, 16394, 541, 18, 147, "Input",ExpressionUUID->"384d70f6-a1a1-4bd3-a11b-528ac180b03b"],
Cell[754159, 16414, 149, 2, 84, "Output",ExpressionUUID->"d04c78e1-3b73-4698-9f27-d829a8b7d5cf"]
}, Open  ]],
Cell[754323, 16419, 229, 4, 91, "Text",ExpressionUUID->"c92619dc-07bc-494f-9fe6-5000a36c9086"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[754601, 16429, 153, 3, 137, "Subsection",ExpressionUUID->"d2e20236-82fc-474e-9f19-cbe6297a48b1"],
Cell[CellGroupData[{
Cell[754779, 16436, 188, 3, 114, "Subsubsection",ExpressionUUID->"dc01a366-5c4e-4e1a-a09d-309dba790424"],
Cell[CellGroupData[{
Cell[754992, 16443, 1317, 38, 179, "Input",ExpressionUUID->"ee443926-654d-4b0e-8e6c-79c229e8728c"],
Cell[756312, 16483, 1791, 34, 744, "Output",ExpressionUUID->"86394b90-0eec-47cd-9532-dcd860d5e566"]
}, Open  ]],
Cell[758118, 16520, 197, 3, 91, "Text",ExpressionUUID->"8bf12ba5-81f5-497b-b98a-0eb254b15bf0"],
Cell[758318, 16525, 152, 3, 74, "Input",ExpressionUUID->"661e2932-473d-4426-88a5-b36b96b2dcbb"],
Cell[CellGroupData[{
Cell[758495, 16532, 363, 7, 119, "WolframAlphaLong",ExpressionUUID->"0b17dfa0-72d4-4e87-9787-c9a2c712b664"],
Cell[758861, 16541, 85490, 1732, 5741, "Print",ExpressionUUID->"e6709f84-5481-4e43-8e6c-db66f728a704"]
}, Open  ]],
Cell[844366, 18276, 238, 4, 91, "Text",ExpressionUUID->"8ca5066d-a2c0-4648-a37c-b7ce04332e7c"],
Cell[844607, 18282, 173, 3, 39, "Text",ExpressionUUID->"feb0f408-e663-45f1-9fbf-e4d7da0b715c"],
Cell[CellGroupData[{
Cell[844805, 18289, 380, 6, 119, "WolframAlphaLong",ExpressionUUID->"79792e2c-e629-4c1e-87f8-2ee88b813c11"],
Cell[845188, 18297, 75800, 1555, 4542, "Print",ExpressionUUID->"f2b3e9eb-31b9-463a-b22b-45ba90180abe"]
}, Open  ]],
Cell[921003, 19855, 242, 6, 91, "Text",ExpressionUUID->"ed0e0482-ebaf-4e45-95a2-4d3610bbdcd1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[921294, 19867, 227, 4, 137, "Subsection",ExpressionUUID->"2af6f0bf-719b-421b-ab48-df0f48976178"],
Cell[921524, 19873, 401319, 6584, 1465, "Input",ExpressionUUID->"c2f578c7-00d8-4123-bb54-186f656f9fc7"],
Cell[1322846, 26459, 219, 5, 91, "Text",ExpressionUUID->"217938b0-db08-4025-bbb6-1e21b120f1d1"],
Cell[CellGroupData[{
Cell[1323090, 26468, 253, 5, 74, "Input",ExpressionUUID->"17af4893-352a-4293-9194-3696759a9f85"],
Cell[1323346, 26475, 991, 25, 427, "Output",ExpressionUUID->"d92ed510-9f4a-41f4-ac99-eac6c555b594"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1324374, 26505, 1683, 39, 249, "Input",ExpressionUUID->"1b411abe-74e9-40a8-a5da-73141de7254a"],
Cell[1326060, 26546, 2695, 40, 94, "Message",ExpressionUUID->"922cba84-d05c-4cf8-af5c-a714531cacbc"],
Cell[1328758, 26588, 1807, 47, 123, "Output",ExpressionUUID->"6910710a-31b6-488b-b8fe-19fed91b7d4f"]
}, Open  ]],
Cell[1330580, 26638, 267, 4, 59, "Text",ExpressionUUID->"84ab1cff-4b25-4c2c-a9b7-5dad273d01e9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

